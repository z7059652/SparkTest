



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.directory
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : PaidSearchRecordSpark_types.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using global::Microsoft.Bond;
using global::System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Text;

namespace SparkSchema
{

/// <summary>
/// UserAdActivitySummarySpark
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class UserAdActivitySummarySpark : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional nullable<vector<SparkSchema.UserAdActivityDetailSpark>> UserAdActivities
    private List<global::SparkSchema.UserAdActivityDetailSpark> m_UserAdActivities;

    // 2: Optional SparkSchema.UETUserIdTypeSpark Type
    private global::SparkSchema.UETUserIdTypeSpark m_Type;

    /// <summary>
    /// UserAdActivities
    /// </summary>
    public List<global::SparkSchema.UserAdActivityDetailSpark> UserAdActivities
    {
        get { return this.m_UserAdActivities; }
        set { this.m_UserAdActivities = value; }
    }

    /// <summary>
    /// Type
    /// </summary>
    public global::SparkSchema.UETUserIdTypeSpark Type
    {
        get { return this.m_Type; }
        set { this.m_Type = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata UserAdActivities_meta = new Metadata();
        public static readonly Metadata Type_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("UserAdActivitySummarySpark");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "SparkSchema." + meta.name;


            // UserAdActivities
            UserAdActivities_meta.name = "UserAdActivities";
            UserAdActivities_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Type
            Type_meta.name = "Type";
            Type_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            Type_meta.default_value.int_value = Convert.ToInt64(global::SparkSchema.UETUserIdTypeSpark.UAIPID);
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int UserAdActivities = 1;
        public const int Type = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_UserAdActivities = "UserAdActivities";
        public const String s_Type = "Type";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public UserAdActivitySummarySpark()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_UserAdActivities = default(List<global::SparkSchema.UserAdActivityDetailSpark>);
        m_Type = global::SparkSchema.UETUserIdTypeSpark.UAIPID;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::SparkSchema.UserAdActivitySummarySpark cloned = new global::SparkSchema.UserAdActivitySummarySpark();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::SparkSchema.UserAdActivitySummarySpark that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: nullable<vector<SparkSchema.UserAdActivityDetailSpark>> UserAdActivities
        if (this.UserAdActivities != null)
        {
            if (that.UserAdActivities == null)
            {
                that.UserAdActivities = new List<global::SparkSchema.UserAdActivityDetailSpark>();
            }
            else
            {
                that.UserAdActivities.Clear();
            }
            foreach (var iter1 in this.UserAdActivities)
            {
                global::SparkSchema.UserAdActivityDetailSpark tmpItem2 = default(global::SparkSchema.UserAdActivityDetailSpark);
                tmpItem2 = (iter1 == null ? null : (global::SparkSchema.UserAdActivityDetailSpark)iter1.Clone());
                that.UserAdActivities.Add(tmpItem2);
            }
        }
        else
        {
            that.UserAdActivities = null;
        }
        // 2: SparkSchema.UETUserIdTypeSpark Type
        that.Type = this.Type;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_UserAdActivities(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Type = (global::SparkSchema.UETUserIdTypeSpark)reader.ReadInt32();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.UserAdActivities:  // id=1
                    this.ReadField_impl_UserAdActivities(reader, type);
                    break;
                case __ordinals.Type:  // id=2
                    this.Type = (global::SparkSchema.UETUserIdTypeSpark)global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    private void ReadField_impl_UserAdActivities(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_LIST);
    
        if (size1 == 1)
        {
            if (this.m_UserAdActivities == null) { this.m_UserAdActivities = new List<global::SparkSchema.UserAdActivityDetailSpark>(); } 
            BondDataType elemType3;
            UInt32 count4;
        
            reader.ReadContainerBegin(out count4, out elemType3);
            global::Microsoft.Bond.ReadHelper.ValidateType(elemType3, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            if (this.m_UserAdActivities.Capacity < count4)
            {
                this.m_UserAdActivities.Capacity = (int)count4;
            }
        
            for (UInt32 i6 = 0; i6 < count4; i6++)
            {
                global::SparkSchema.UserAdActivityDetailSpark element5 = new global::SparkSchema.UserAdActivityDetailSpark();
                 
                ReadHelper.ReadStruct(reader, element5, elemType3);
                this.m_UserAdActivities.Add(element5);
            }
        
            reader.ReadContainerEnd();
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_UserAdActivities


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(UserAdActivitySummarySpark))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        UInt32 count1 = (UInt32)((m_UserAdActivities != null) ? 1 : 0);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.UserAdActivities, Schema.UserAdActivities_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_LIST);
                if (count1 != 0)
                {
                        UInt32 count3 = (m_UserAdActivities == null ? 0 : (UInt32)m_UserAdActivities.Count);
                    writer.WriteContainerBegin(count3, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    for (int idx2 = 0; idx2 < count3; idx2++)
                    {
                            m_UserAdActivities[idx2].Write(writer, true);
                    }
                    writer.WriteContainerEnd();
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.UserAdActivities, Schema.UserAdActivities_meta);
        }

        if (writeAllFields || (!Schema.Type_meta.default_value.Equals(Convert.ToInt32(m_Type))))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.Type, Schema.Type_meta);
                writer.WriteInt32((Int32)m_Type);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.Type, Schema.Type_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="UserAdActivities";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.element = global::SparkSchema.UserAdActivityDetailSpark.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="Type";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = Convert.ToInt64(global::SparkSchema.UETUserIdTypeSpark.UAIPID);
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        UserAdActivitySummarySpark that = obj as UserAdActivitySummarySpark;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(UserAdActivitySummarySpark other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(UserAdActivitySummarySpark that)
    {
        bool equals = true;
        
        equals = equals && ((this.UserAdActivities == null) == (that.UserAdActivities == null));
        equals = equals && ((this.Type == that.Type));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(UserAdActivitySummarySpark that)
    {
        bool equals = true;
        
        equals = equals && ((this.UserAdActivities == null) == (that.UserAdActivities == null));
        if (equals && !(this.UserAdActivities == null))
        {
            if (equals && this.UserAdActivities != null && this.UserAdActivities.Count != 0)
            {
                var enum_1_1 = this.UserAdActivities.GetEnumerator();
                var enum_2_2 = that.UserAdActivities.GetEnumerator();
                while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
                {
                        equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                    equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                    if (!equals)
                    {
                        break;
                    }
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_UserAdActivities, this.UserAdActivities, separator);
        sb.AppendFormat(format, __internal.s_Type, this.Type, separator);
        
        return sb.ToString();
    } // ToString()

}; // class UserAdActivitySummarySpark

/// <summary>
/// UserSearchClickSummarySpark
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class UserSearchClickSummarySpark : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional nullable<vector<SparkSchema.SearchClickDetailSpark>> UserSearchActivities
    private List<global::SparkSchema.SearchClickDetailSpark> m_UserSearchActivities;

    // 2: Optional SparkSchema.UETUserIdTypeSpark Type
    private global::SparkSchema.UETUserIdTypeSpark m_Type;

    /// <summary>
    /// UserSearchActivities
    /// </summary>
    public List<global::SparkSchema.SearchClickDetailSpark> UserSearchActivities
    {
        get { return this.m_UserSearchActivities; }
        set { this.m_UserSearchActivities = value; }
    }

    /// <summary>
    /// Type
    /// </summary>
    public global::SparkSchema.UETUserIdTypeSpark Type
    {
        get { return this.m_Type; }
        set { this.m_Type = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata UserSearchActivities_meta = new Metadata();
        public static readonly Metadata Type_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("UserSearchClickSummarySpark");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "SparkSchema." + meta.name;


            // UserSearchActivities
            UserSearchActivities_meta.name = "UserSearchActivities";
            UserSearchActivities_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Type
            Type_meta.name = "Type";
            Type_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            Type_meta.default_value.int_value = Convert.ToInt64(global::SparkSchema.UETUserIdTypeSpark.UAIPID);
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int UserSearchActivities = 1;
        public const int Type = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_UserSearchActivities = "UserSearchActivities";
        public const String s_Type = "Type";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public UserSearchClickSummarySpark()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_UserSearchActivities = default(List<global::SparkSchema.SearchClickDetailSpark>);
        m_Type = global::SparkSchema.UETUserIdTypeSpark.UAIPID;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::SparkSchema.UserSearchClickSummarySpark cloned = new global::SparkSchema.UserSearchClickSummarySpark();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::SparkSchema.UserSearchClickSummarySpark that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: nullable<vector<SparkSchema.SearchClickDetailSpark>> UserSearchActivities
        if (this.UserSearchActivities != null)
        {
            if (that.UserSearchActivities == null)
            {
                that.UserSearchActivities = new List<global::SparkSchema.SearchClickDetailSpark>();
            }
            else
            {
                that.UserSearchActivities.Clear();
            }
            foreach (var iter1 in this.UserSearchActivities)
            {
                global::SparkSchema.SearchClickDetailSpark tmpItem2 = default(global::SparkSchema.SearchClickDetailSpark);
                tmpItem2 = (iter1 == null ? null : (global::SparkSchema.SearchClickDetailSpark)iter1.Clone());
                that.UserSearchActivities.Add(tmpItem2);
            }
        }
        else
        {
            that.UserSearchActivities = null;
        }
        // 2: SparkSchema.UETUserIdTypeSpark Type
        that.Type = this.Type;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_UserSearchActivities(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Type = (global::SparkSchema.UETUserIdTypeSpark)reader.ReadInt32();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.UserSearchActivities:  // id=1
                    this.ReadField_impl_UserSearchActivities(reader, type);
                    break;
                case __ordinals.Type:  // id=2
                    this.Type = (global::SparkSchema.UETUserIdTypeSpark)global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    private void ReadField_impl_UserSearchActivities(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_LIST);
    
        if (size1 == 1)
        {
            if (this.m_UserSearchActivities == null) { this.m_UserSearchActivities = new List<global::SparkSchema.SearchClickDetailSpark>(); } 
            BondDataType elemType3;
            UInt32 count4;
        
            reader.ReadContainerBegin(out count4, out elemType3);
            global::Microsoft.Bond.ReadHelper.ValidateType(elemType3, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            if (this.m_UserSearchActivities.Capacity < count4)
            {
                this.m_UserSearchActivities.Capacity = (int)count4;
            }
        
            for (UInt32 i6 = 0; i6 < count4; i6++)
            {
                global::SparkSchema.SearchClickDetailSpark element5 = new global::SparkSchema.SearchClickDetailSpark();
                 
                ReadHelper.ReadStruct(reader, element5, elemType3);
                this.m_UserSearchActivities.Add(element5);
            }
        
            reader.ReadContainerEnd();
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_UserSearchActivities


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(UserSearchClickSummarySpark))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        UInt32 count1 = (UInt32)((m_UserSearchActivities != null) ? 1 : 0);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.UserSearchActivities, Schema.UserSearchActivities_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_LIST);
                if (count1 != 0)
                {
                        UInt32 count3 = (m_UserSearchActivities == null ? 0 : (UInt32)m_UserSearchActivities.Count);
                    writer.WriteContainerBegin(count3, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    for (int idx2 = 0; idx2 < count3; idx2++)
                    {
                            m_UserSearchActivities[idx2].Write(writer, true);
                    }
                    writer.WriteContainerEnd();
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.UserSearchActivities, Schema.UserSearchActivities_meta);
        }

        if (writeAllFields || (!Schema.Type_meta.default_value.Equals(Convert.ToInt32(m_Type))))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.Type, Schema.Type_meta);
                writer.WriteInt32((Int32)m_Type);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.Type, Schema.Type_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="UserSearchActivities";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.element = global::SparkSchema.SearchClickDetailSpark.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="Type";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = Convert.ToInt64(global::SparkSchema.UETUserIdTypeSpark.UAIPID);
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        UserSearchClickSummarySpark that = obj as UserSearchClickSummarySpark;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(UserSearchClickSummarySpark other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(UserSearchClickSummarySpark that)
    {
        bool equals = true;
        
        equals = equals && ((this.UserSearchActivities == null) == (that.UserSearchActivities == null));
        equals = equals && ((this.Type == that.Type));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(UserSearchClickSummarySpark that)
    {
        bool equals = true;
        
        equals = equals && ((this.UserSearchActivities == null) == (that.UserSearchActivities == null));
        if (equals && !(this.UserSearchActivities == null))
        {
            if (equals && this.UserSearchActivities != null && this.UserSearchActivities.Count != 0)
            {
                var enum_1_1 = this.UserSearchActivities.GetEnumerator();
                var enum_2_2 = that.UserSearchActivities.GetEnumerator();
                while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
                {
                        equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                    equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                    if (!equals)
                    {
                        break;
                    }
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_UserSearchActivities, this.UserSearchActivities, separator);
        sb.AppendFormat(format, __internal.s_Type, this.Type, separator);
        
        return sb.ToString();
    } // ToString()

}; // class UserSearchClickSummarySpark

/// <summary>
/// PaidSearchRecordSpark
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class PaidSearchRecordSpark : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional Microsoft.Bond.GUID UETUserId
    private global::Microsoft.Bond.GUID m_UETUserId;

    // 2: Optional SparkSchema.UserAdActivitySummarySpark UserAdActivityData
    private global::SparkSchema.UserAdActivitySummarySpark m_UserAdActivityData;

    // 3: Optional SparkSchema.UserSearchClickSummarySpark UserSearchClickData
    private global::SparkSchema.UserSearchClickSummarySpark m_UserSearchClickData;

    /// <summary>
    /// UETUserId
    /// </summary>
    public global::Microsoft.Bond.GUID UETUserId
    {
        get { return this.m_UETUserId; }
        set { this.m_UETUserId = value; }
    }

    /// <summary>
    /// UserAdActivityData
    /// </summary>
    public global::SparkSchema.UserAdActivitySummarySpark UserAdActivityData
    {
        get { return this.m_UserAdActivityData; }
        set { this.m_UserAdActivityData = value; }
    }

    /// <summary>
    /// UserSearchClickData
    /// </summary>
    public global::SparkSchema.UserSearchClickSummarySpark UserSearchClickData
    {
        get { return this.m_UserSearchClickData; }
        set { this.m_UserSearchClickData = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata UETUserId_meta = new Metadata();
        public static readonly Metadata UserAdActivityData_meta = new Metadata();
        public static readonly Metadata UserSearchClickData_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("PaidSearchRecordSpark");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "SparkSchema." + meta.name;


            // UETUserId
            UETUserId_meta.name = "UETUserId";
            UETUserId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // UserAdActivityData
            UserAdActivityData_meta.name = "UserAdActivityData";
            UserAdActivityData_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // UserSearchClickData
            UserSearchClickData_meta.name = "UserSearchClickData";
            UserSearchClickData_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int UETUserId = 1;
        public const int UserAdActivityData = 2;
        public const int UserSearchClickData = 3;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_UETUserId = "UETUserId";
        public const String s_UserAdActivityData = "UserAdActivityData";
        public const String s_UserSearchClickData = "UserSearchClickData";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public PaidSearchRecordSpark()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_UETUserId = new global::Microsoft.Bond.GUID();
        m_UserAdActivityData = new global::SparkSchema.UserAdActivitySummarySpark();
        m_UserSearchClickData = new global::SparkSchema.UserSearchClickSummarySpark();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::SparkSchema.PaidSearchRecordSpark cloned = new global::SparkSchema.PaidSearchRecordSpark();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::SparkSchema.PaidSearchRecordSpark that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: Microsoft.Bond.GUID UETUserId
        that.UETUserId = (this.UETUserId == null ? null : (global::Microsoft.Bond.GUID)this.UETUserId.Clone());
        // 2: SparkSchema.UserAdActivitySummarySpark UserAdActivityData
        that.UserAdActivityData = (this.UserAdActivityData == null ? null : (global::SparkSchema.UserAdActivitySummarySpark)this.UserAdActivityData.Clone());
        // 3: SparkSchema.UserSearchClickSummarySpark UserSearchClickData
        that.UserSearchClickData = (this.UserSearchClickData == null ? null : (global::SparkSchema.UserSearchClickSummarySpark)this.UserSearchClickData.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.UETUserId.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.UserAdActivityData.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.UserSearchClickData.Read(reader);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.UETUserId:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.UETUserId.Read(reader);
                    break;
                case __ordinals.UserAdActivityData:  // id=2
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.UserAdActivityData.Read(reader);
                    break;
                case __ordinals.UserSearchClickData:  // id=3
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.UserSearchClickData.Read(reader);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(PaidSearchRecordSpark))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.UETUserId, Schema.UETUserId_meta);
            m_UETUserId.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.UserAdActivityData, Schema.UserAdActivityData_meta);
            m_UserAdActivityData.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.UserSearchClickData, Schema.UserSearchClickData_meta);
            m_UserSearchClickData.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="UETUserId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.Bond.GUID.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="UserAdActivityData";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::SparkSchema.UserAdActivitySummarySpark.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="UserSearchClickData";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::SparkSchema.UserSearchClickSummarySpark.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        PaidSearchRecordSpark that = obj as PaidSearchRecordSpark;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(PaidSearchRecordSpark other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(PaidSearchRecordSpark that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(PaidSearchRecordSpark that)
    {
        bool equals = true;
        
        equals = equals && (this.UETUserId == null ? true : this.UETUserId.MemberwiseCompare(that.UETUserId));
        equals = equals && (this.UserAdActivityData == null ? true : this.UserAdActivityData.MemberwiseCompare(that.UserAdActivityData));
        equals = equals && (this.UserSearchClickData == null ? true : this.UserSearchClickData.MemberwiseCompare(that.UserSearchClickData));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_UETUserId, this.UETUserId, separator);
        sb.AppendFormat(format, __internal.s_UserAdActivityData, this.UserAdActivityData, separator);
        sb.AppendFormat(format, __internal.s_UserSearchClickData, this.UserSearchClickData, separator);
        
        return sb.ToString();
    } // ToString()

}; // class PaidSearchRecordSpark

/// <summary>
/// UMS_ANIDSpark
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class UMS_ANIDSpark : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional Microsoft.Bond.GUID ANID
    private global::Microsoft.Bond.GUID m_ANID;

    // 2: Optional Microsoft.Bond.GUID StableIdValue
    private global::Microsoft.Bond.GUID m_StableIdValue;

    // 3: Optional SparkSchema.UETUserIdTypeSpark StableIdType
    private global::SparkSchema.UETUserIdTypeSpark m_StableIdType;

    /// <summary>
    /// ANID
    /// </summary>
    public global::Microsoft.Bond.GUID ANID
    {
        get { return this.m_ANID; }
        set { this.m_ANID = value; }
    }

    /// <summary>
    /// StableIdValue
    /// </summary>
    public global::Microsoft.Bond.GUID StableIdValue
    {
        get { return this.m_StableIdValue; }
        set { this.m_StableIdValue = value; }
    }

    /// <summary>
    /// StableIdType
    /// </summary>
    public global::SparkSchema.UETUserIdTypeSpark StableIdType
    {
        get { return this.m_StableIdType; }
        set { this.m_StableIdType = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata ANID_meta = new Metadata();
        public static readonly Metadata StableIdValue_meta = new Metadata();
        public static readonly Metadata StableIdType_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("UMS_ANIDSpark");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "SparkSchema." + meta.name;


            // ANID
            ANID_meta.name = "ANID";
            ANID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // StableIdValue
            StableIdValue_meta.name = "StableIdValue";
            StableIdValue_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // StableIdType
            StableIdType_meta.name = "StableIdType";
            StableIdType_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            StableIdType_meta.default_value.int_value = Convert.ToInt64(global::SparkSchema.UETUserIdTypeSpark.ANID);
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int ANID = 1;
        public const int StableIdValue = 2;
        public const int StableIdType = 3;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_ANID = "ANID";
        public const String s_StableIdValue = "StableIdValue";
        public const String s_StableIdType = "StableIdType";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public UMS_ANIDSpark()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_ANID = new global::Microsoft.Bond.GUID();
        m_StableIdValue = new global::Microsoft.Bond.GUID();
        m_StableIdType = global::SparkSchema.UETUserIdTypeSpark.ANID;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::SparkSchema.UMS_ANIDSpark cloned = new global::SparkSchema.UMS_ANIDSpark();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::SparkSchema.UMS_ANIDSpark that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: Microsoft.Bond.GUID ANID
        that.ANID = (this.ANID == null ? null : (global::Microsoft.Bond.GUID)this.ANID.Clone());
        // 2: Microsoft.Bond.GUID StableIdValue
        that.StableIdValue = (this.StableIdValue == null ? null : (global::Microsoft.Bond.GUID)this.StableIdValue.Clone());
        // 3: SparkSchema.UETUserIdTypeSpark StableIdType
        that.StableIdType = this.StableIdType;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ANID.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.StableIdValue.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.StableIdType = (global::SparkSchema.UETUserIdTypeSpark)reader.ReadInt32();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.ANID:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.ANID.Read(reader);
                    break;
                case __ordinals.StableIdValue:  // id=2
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.StableIdValue.Read(reader);
                    break;
                case __ordinals.StableIdType:  // id=3
                    this.StableIdType = (global::SparkSchema.UETUserIdTypeSpark)global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(UMS_ANIDSpark))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.ANID, Schema.ANID_meta);
            m_ANID.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.StableIdValue, Schema.StableIdValue_meta);
            m_StableIdValue.Write(writer, true);
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.StableIdType_meta.default_value.Equals(Convert.ToInt32(m_StableIdType))))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.StableIdType, Schema.StableIdType_meta);
                writer.WriteInt32((Int32)m_StableIdType);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.StableIdType, Schema.StableIdType_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="ANID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.Bond.GUID.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="StableIdValue";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.Bond.GUID.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="StableIdType";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = Convert.ToInt64(global::SparkSchema.UETUserIdTypeSpark.ANID);
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        UMS_ANIDSpark that = obj as UMS_ANIDSpark;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(UMS_ANIDSpark other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(UMS_ANIDSpark that)
    {
        bool equals = true;
        
        equals = equals && ((this.StableIdType == that.StableIdType));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(UMS_ANIDSpark that)
    {
        bool equals = true;
        
        equals = equals && (this.ANID == null ? true : this.ANID.MemberwiseCompare(that.ANID));
        equals = equals && (this.StableIdValue == null ? true : this.StableIdValue.MemberwiseCompare(that.StableIdValue));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_ANID, this.ANID, separator);
        sb.AppendFormat(format, __internal.s_StableIdValue, this.StableIdValue, separator);
        sb.AppendFormat(format, __internal.s_StableIdType, this.StableIdType, separator);
        
        return sb.ToString();
    } // ToString()

}; // class UMS_ANIDSpark

/// <summary>
/// UMS_MUIDSpark
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class UMS_MUIDSpark : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional Microsoft.Bond.GUID MUID
    private global::Microsoft.Bond.GUID m_MUID;

    // 2: Optional Microsoft.Bond.GUID StableIdValue
    private global::Microsoft.Bond.GUID m_StableIdValue;

    // 3: Optional SparkSchema.UETUserIdTypeSpark StableIdType
    private global::SparkSchema.UETUserIdTypeSpark m_StableIdType;

    /// <summary>
    /// MUID
    /// </summary>
    public global::Microsoft.Bond.GUID MUID
    {
        get { return this.m_MUID; }
        set { this.m_MUID = value; }
    }

    /// <summary>
    /// StableIdValue
    /// </summary>
    public global::Microsoft.Bond.GUID StableIdValue
    {
        get { return this.m_StableIdValue; }
        set { this.m_StableIdValue = value; }
    }

    /// <summary>
    /// StableIdType
    /// </summary>
    public global::SparkSchema.UETUserIdTypeSpark StableIdType
    {
        get { return this.m_StableIdType; }
        set { this.m_StableIdType = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata MUID_meta = new Metadata();
        public static readonly Metadata StableIdValue_meta = new Metadata();
        public static readonly Metadata StableIdType_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("UMS_MUIDSpark");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "SparkSchema." + meta.name;


            // MUID
            MUID_meta.name = "MUID";
            MUID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // StableIdValue
            StableIdValue_meta.name = "StableIdValue";
            StableIdValue_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // StableIdType
            StableIdType_meta.name = "StableIdType";
            StableIdType_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            StableIdType_meta.default_value.int_value = Convert.ToInt64(global::SparkSchema.UETUserIdTypeSpark.MUID);
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int MUID = 1;
        public const int StableIdValue = 2;
        public const int StableIdType = 3;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_MUID = "MUID";
        public const String s_StableIdValue = "StableIdValue";
        public const String s_StableIdType = "StableIdType";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public UMS_MUIDSpark()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_MUID = new global::Microsoft.Bond.GUID();
        m_StableIdValue = new global::Microsoft.Bond.GUID();
        m_StableIdType = global::SparkSchema.UETUserIdTypeSpark.MUID;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::SparkSchema.UMS_MUIDSpark cloned = new global::SparkSchema.UMS_MUIDSpark();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::SparkSchema.UMS_MUIDSpark that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: Microsoft.Bond.GUID MUID
        that.MUID = (this.MUID == null ? null : (global::Microsoft.Bond.GUID)this.MUID.Clone());
        // 2: Microsoft.Bond.GUID StableIdValue
        that.StableIdValue = (this.StableIdValue == null ? null : (global::Microsoft.Bond.GUID)this.StableIdValue.Clone());
        // 3: SparkSchema.UETUserIdTypeSpark StableIdType
        that.StableIdType = this.StableIdType;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.MUID.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.StableIdValue.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.StableIdType = (global::SparkSchema.UETUserIdTypeSpark)reader.ReadInt32();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.MUID:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.MUID.Read(reader);
                    break;
                case __ordinals.StableIdValue:  // id=2
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.StableIdValue.Read(reader);
                    break;
                case __ordinals.StableIdType:  // id=3
                    this.StableIdType = (global::SparkSchema.UETUserIdTypeSpark)global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(UMS_MUIDSpark))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.MUID, Schema.MUID_meta);
            m_MUID.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.StableIdValue, Schema.StableIdValue_meta);
            m_StableIdValue.Write(writer, true);
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.StableIdType_meta.default_value.Equals(Convert.ToInt32(m_StableIdType))))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.StableIdType, Schema.StableIdType_meta);
                writer.WriteInt32((Int32)m_StableIdType);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.StableIdType, Schema.StableIdType_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="MUID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.Bond.GUID.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="StableIdValue";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.Bond.GUID.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="StableIdType";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = Convert.ToInt64(global::SparkSchema.UETUserIdTypeSpark.MUID);
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        UMS_MUIDSpark that = obj as UMS_MUIDSpark;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(UMS_MUIDSpark other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(UMS_MUIDSpark that)
    {
        bool equals = true;
        
        equals = equals && ((this.StableIdType == that.StableIdType));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(UMS_MUIDSpark that)
    {
        bool equals = true;
        
        equals = equals && (this.MUID == null ? true : this.MUID.MemberwiseCompare(that.MUID));
        equals = equals && (this.StableIdValue == null ? true : this.StableIdValue.MemberwiseCompare(that.StableIdValue));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_MUID, this.MUID, separator);
        sb.AppendFormat(format, __internal.s_StableIdValue, this.StableIdValue, separator);
        sb.AppendFormat(format, __internal.s_StableIdType, this.StableIdType, separator);
        
        return sb.ToString();
    } // ToString()

}; // class UMS_MUIDSpark
} // namespace SparkSchema
