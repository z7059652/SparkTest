



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.directory
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : KPIIViewSpark_types.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using global::Microsoft.Bond;
using global::System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Text;

namespace SparkSchema
{

/// <summary>
/// KPIIViewSpark
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class KPIIViewSpark : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional Microsoft.Bond.GUID RGUID
    private global::Microsoft.Bond.GUID m_RGUID;

    // 2: Optional int64 Delta
    private Int64 m_Delta;

    // 3: Optional string ClientIP
    private String m_ClientIP;

    // 4: Optional string ClientIPv6
    private String m_ClientIPv6;

    // 5: Optional string SurrogateKey
    private String m_SurrogateKey;

    // 6: Optional string UserId
    private String m_UserId;

    // 7: Optional string AnalyticsGUID
    private String m_AnalyticsGUID;

    // 8: Optional string QueryPhrase
    private String m_QueryPhrase;

    // 9: Optional string NonNormalizedQueryString
    private String m_NonNormalizedQueryString;

    // 10: Optional string ClickId
    private String m_ClickId;

    // 11: Optional string Latitude
    private String m_Latitude;

    // 12: Optional string Longitude
    private String m_Longitude;

    // 13: Optional string ClientId
    private String m_ClientId;

    // 14: Optional string AnonymousId
    private String m_AnonymousId;

    // 15: Optional string DATASET
    private String m_DATASET;

    // 16: Optional Microsoft.Bond.GUID CID
    private global::Microsoft.Bond.GUID m_CID;

    // 17: Optional Microsoft.Bond.GUID MUID
    private global::Microsoft.Bond.GUID m_MUID;

    // 18: Optional Microsoft.Bond.GUID MUIDAutoGen
    private global::Microsoft.Bond.GUID m_MUIDAutoGen;

    /// <summary>
    /// RGUID
    /// </summary>
    public global::Microsoft.Bond.GUID RGUID
    {
        get { return this.m_RGUID; }
        set { this.m_RGUID = value; }
    }

    /// <summary>
    /// Delta
    /// </summary>
    public Int64 Delta
    {
        get { return this.m_Delta; }
        set { this.m_Delta = value; }
    }

    /// <summary>
    /// ClientIP
    /// </summary>
    public String ClientIP
    {
        get { return this.m_ClientIP; }
        set { this.m_ClientIP = value; }
    }

    /// <summary>
    /// ClientIPv6
    /// </summary>
    public String ClientIPv6
    {
        get { return this.m_ClientIPv6; }
        set { this.m_ClientIPv6 = value; }
    }

    /// <summary>
    /// SurrogateKey
    /// </summary>
    public String SurrogateKey
    {
        get { return this.m_SurrogateKey; }
        set { this.m_SurrogateKey = value; }
    }

    /// <summary>
    /// UserId
    /// </summary>
    public String UserId
    {
        get { return this.m_UserId; }
        set { this.m_UserId = value; }
    }

    /// <summary>
    /// AnalyticsGUID
    /// </summary>
    public String AnalyticsGUID
    {
        get { return this.m_AnalyticsGUID; }
        set { this.m_AnalyticsGUID = value; }
    }

    /// <summary>
    /// QueryPhrase
    /// </summary>
    public String QueryPhrase
    {
        get { return this.m_QueryPhrase; }
        set { this.m_QueryPhrase = value; }
    }

    /// <summary>
    /// NonNormalizedQueryString
    /// </summary>
    public String NonNormalizedQueryString
    {
        get { return this.m_NonNormalizedQueryString; }
        set { this.m_NonNormalizedQueryString = value; }
    }

    /// <summary>
    /// ClickId
    /// </summary>
    public String ClickId
    {
        get { return this.m_ClickId; }
        set { this.m_ClickId = value; }
    }

    /// <summary>
    /// Latitude
    /// </summary>
    public String Latitude
    {
        get { return this.m_Latitude; }
        set { this.m_Latitude = value; }
    }

    /// <summary>
    /// Longitude
    /// </summary>
    public String Longitude
    {
        get { return this.m_Longitude; }
        set { this.m_Longitude = value; }
    }

    /// <summary>
    /// ClientId
    /// </summary>
    public String ClientId
    {
        get { return this.m_ClientId; }
        set { this.m_ClientId = value; }
    }

    /// <summary>
    /// AnonymousId
    /// </summary>
    public String AnonymousId
    {
        get { return this.m_AnonymousId; }
        set { this.m_AnonymousId = value; }
    }

    /// <summary>
    /// DATASET
    /// </summary>
    public String DATASET
    {
        get { return this.m_DATASET; }
        set { this.m_DATASET = value; }
    }

    /// <summary>
    /// CID
    /// </summary>
    public global::Microsoft.Bond.GUID CID
    {
        get { return this.m_CID; }
        set { this.m_CID = value; }
    }

    /// <summary>
    /// MUID
    /// </summary>
    public global::Microsoft.Bond.GUID MUID
    {
        get { return this.m_MUID; }
        set { this.m_MUID = value; }
    }

    /// <summary>
    /// MUIDAutoGen
    /// </summary>
    public global::Microsoft.Bond.GUID MUIDAutoGen
    {
        get { return this.m_MUIDAutoGen; }
        set { this.m_MUIDAutoGen = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata RGUID_meta = new Metadata();
        public static readonly Metadata Delta_meta = new Metadata();
        public static readonly Metadata ClientIP_meta = new Metadata();
        public static readonly Metadata ClientIPv6_meta = new Metadata();
        public static readonly Metadata SurrogateKey_meta = new Metadata();
        public static readonly Metadata UserId_meta = new Metadata();
        public static readonly Metadata AnalyticsGUID_meta = new Metadata();
        public static readonly Metadata QueryPhrase_meta = new Metadata();
        public static readonly Metadata NonNormalizedQueryString_meta = new Metadata();
        public static readonly Metadata ClickId_meta = new Metadata();
        public static readonly Metadata Latitude_meta = new Metadata();
        public static readonly Metadata Longitude_meta = new Metadata();
        public static readonly Metadata ClientId_meta = new Metadata();
        public static readonly Metadata AnonymousId_meta = new Metadata();
        public static readonly Metadata DATASET_meta = new Metadata();
        public static readonly Metadata CID_meta = new Metadata();
        public static readonly Metadata MUID_meta = new Metadata();
        public static readonly Metadata MUIDAutoGen_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("KPIIViewSpark");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "SparkSchema." + meta.name;


            // RGUID
            RGUID_meta.name = "RGUID";
            RGUID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Delta
            Delta_meta.name = "Delta";
            Delta_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            Delta_meta.default_value.int_value = 0;

            // ClientIP
            ClientIP_meta.name = "ClientIP";
            ClientIP_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ClientIPv6
            ClientIPv6_meta.name = "ClientIPv6";
            ClientIPv6_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // SurrogateKey
            SurrogateKey_meta.name = "SurrogateKey";
            SurrogateKey_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // UserId
            UserId_meta.name = "UserId";
            UserId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AnalyticsGUID
            AnalyticsGUID_meta.name = "AnalyticsGUID";
            AnalyticsGUID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // QueryPhrase
            QueryPhrase_meta.name = "QueryPhrase";
            QueryPhrase_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // NonNormalizedQueryString
            NonNormalizedQueryString_meta.name = "NonNormalizedQueryString";
            NonNormalizedQueryString_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ClickId
            ClickId_meta.name = "ClickId";
            ClickId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Latitude
            Latitude_meta.name = "Latitude";
            Latitude_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Longitude
            Longitude_meta.name = "Longitude";
            Longitude_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ClientId
            ClientId_meta.name = "ClientId";
            ClientId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AnonymousId
            AnonymousId_meta.name = "AnonymousId";
            AnonymousId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // DATASET
            DATASET_meta.name = "DATASET";
            DATASET_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // CID
            CID_meta.name = "CID";
            CID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // MUID
            MUID_meta.name = "MUID";
            MUID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // MUIDAutoGen
            MUIDAutoGen_meta.name = "MUIDAutoGen";
            MUIDAutoGen_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int RGUID = 1;
        public const int Delta = 2;
        public const int ClientIP = 3;
        public const int ClientIPv6 = 4;
        public const int SurrogateKey = 5;
        public const int UserId = 6;
        public const int AnalyticsGUID = 7;
        public const int QueryPhrase = 8;
        public const int NonNormalizedQueryString = 9;
        public const int ClickId = 10;
        public const int Latitude = 11;
        public const int Longitude = 12;
        public const int ClientId = 13;
        public const int AnonymousId = 14;
        public const int DATASET = 15;
        public const int CID = 16;
        public const int MUID = 17;
        public const int MUIDAutoGen = 18;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_RGUID = "RGUID";
        public const String s_Delta = "Delta";
        public const String s_ClientIP = "ClientIP";
        public const String s_ClientIPv6 = "ClientIPv6";
        public const String s_SurrogateKey = "SurrogateKey";
        public const String s_UserId = "UserId";
        public const String s_AnalyticsGUID = "AnalyticsGUID";
        public const String s_QueryPhrase = "QueryPhrase";
        public const String s_NonNormalizedQueryString = "NonNormalizedQueryString";
        public const String s_ClickId = "ClickId";
        public const String s_Latitude = "Latitude";
        public const String s_Longitude = "Longitude";
        public const String s_ClientId = "ClientId";
        public const String s_AnonymousId = "AnonymousId";
        public const String s_DATASET = "DATASET";
        public const String s_CID = "CID";
        public const String s_MUID = "MUID";
        public const String s_MUIDAutoGen = "MUIDAutoGen";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public KPIIViewSpark()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_RGUID = new global::Microsoft.Bond.GUID();
        m_Delta = 0;
        m_ClientIP = string.Empty;
        m_ClientIPv6 = string.Empty;
        m_SurrogateKey = string.Empty;
        m_UserId = string.Empty;
        m_AnalyticsGUID = string.Empty;
        m_QueryPhrase = string.Empty;
        m_NonNormalizedQueryString = string.Empty;
        m_ClickId = string.Empty;
        m_Latitude = string.Empty;
        m_Longitude = string.Empty;
        m_ClientId = string.Empty;
        m_AnonymousId = string.Empty;
        m_DATASET = string.Empty;
        m_CID = new global::Microsoft.Bond.GUID();
        m_MUID = new global::Microsoft.Bond.GUID();
        m_MUIDAutoGen = new global::Microsoft.Bond.GUID();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::SparkSchema.KPIIViewSpark cloned = new global::SparkSchema.KPIIViewSpark();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::SparkSchema.KPIIViewSpark that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: Microsoft.Bond.GUID RGUID
        that.RGUID = (this.RGUID == null ? null : (global::Microsoft.Bond.GUID)this.RGUID.Clone());
        // 2: int64 Delta
        that.Delta = this.Delta;
        // 3: string ClientIP
        that.ClientIP = this.ClientIP;
        // 4: string ClientIPv6
        that.ClientIPv6 = this.ClientIPv6;
        // 5: string SurrogateKey
        that.SurrogateKey = this.SurrogateKey;
        // 6: string UserId
        that.UserId = this.UserId;
        // 7: string AnalyticsGUID
        that.AnalyticsGUID = this.AnalyticsGUID;
        // 8: string QueryPhrase
        that.QueryPhrase = this.QueryPhrase;
        // 9: string NonNormalizedQueryString
        that.NonNormalizedQueryString = this.NonNormalizedQueryString;
        // 10: string ClickId
        that.ClickId = this.ClickId;
        // 11: string Latitude
        that.Latitude = this.Latitude;
        // 12: string Longitude
        that.Longitude = this.Longitude;
        // 13: string ClientId
        that.ClientId = this.ClientId;
        // 14: string AnonymousId
        that.AnonymousId = this.AnonymousId;
        // 15: string DATASET
        that.DATASET = this.DATASET;
        // 16: Microsoft.Bond.GUID CID
        that.CID = (this.CID == null ? null : (global::Microsoft.Bond.GUID)this.CID.Clone());
        // 17: Microsoft.Bond.GUID MUID
        that.MUID = (this.MUID == null ? null : (global::Microsoft.Bond.GUID)this.MUID.Clone());
        // 18: Microsoft.Bond.GUID MUIDAutoGen
        that.MUIDAutoGen = (this.MUIDAutoGen == null ? null : (global::Microsoft.Bond.GUID)this.MUIDAutoGen.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.RGUID.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Delta = reader.ReadInt64();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ClientIP = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ClientIPv6 = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.SurrogateKey = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.UserId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.AnalyticsGUID = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.QueryPhrase = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.NonNormalizedQueryString = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ClickId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Latitude = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Longitude = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ClientId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.AnonymousId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.DATASET = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.CID.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.MUID.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.MUIDAutoGen.Read(reader);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.RGUID:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.RGUID.Read(reader);
                    break;
                case __ordinals.Delta:  // id=2
                    this.Delta = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    break;
                case __ordinals.ClientIP:  // id=3
                    this.ClientIP = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.ClientIPv6:  // id=4
                    this.ClientIPv6 = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.SurrogateKey:  // id=5
                    this.SurrogateKey = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.UserId:  // id=6
                    this.UserId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.AnalyticsGUID:  // id=7
                    this.AnalyticsGUID = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.QueryPhrase:  // id=8
                    this.QueryPhrase = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.NonNormalizedQueryString:  // id=9
                    this.NonNormalizedQueryString = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.ClickId:  // id=10
                    this.ClickId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Latitude:  // id=11
                    this.Latitude = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Longitude:  // id=12
                    this.Longitude = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.ClientId:  // id=13
                    this.ClientId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.AnonymousId:  // id=14
                    this.AnonymousId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.DATASET:  // id=15
                    this.DATASET = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.CID:  // id=16
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.CID.Read(reader);
                    break;
                case __ordinals.MUID:  // id=17
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.MUID.Read(reader);
                    break;
                case __ordinals.MUIDAutoGen:  // id=18
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.MUIDAutoGen.Read(reader);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(KPIIViewSpark))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.RGUID, Schema.RGUID_meta);
            m_RGUID.Write(writer, true);
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.Delta_meta.default_value.Equals(m_Delta)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.Delta, Schema.Delta_meta);
                writer.WriteInt64(m_Delta);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.Delta, Schema.Delta_meta);
        }

        if (writeAllFields || (!Schema.ClientIP_meta.default_value.Equals(m_ClientIP)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ClientIP, Schema.ClientIP_meta);
                writer.WriteString(m_ClientIP);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ClientIP, Schema.ClientIP_meta);
        }

        if (writeAllFields || (!Schema.ClientIPv6_meta.default_value.Equals(m_ClientIPv6)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ClientIPv6, Schema.ClientIPv6_meta);
                writer.WriteString(m_ClientIPv6);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ClientIPv6, Schema.ClientIPv6_meta);
        }

        if (writeAllFields || (!Schema.SurrogateKey_meta.default_value.Equals(m_SurrogateKey)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.SurrogateKey, Schema.SurrogateKey_meta);
                writer.WriteString(m_SurrogateKey);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.SurrogateKey, Schema.SurrogateKey_meta);
        }

        if (writeAllFields || (!Schema.UserId_meta.default_value.Equals(m_UserId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.UserId, Schema.UserId_meta);
                writer.WriteString(m_UserId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.UserId, Schema.UserId_meta);
        }

        if (writeAllFields || (!Schema.AnalyticsGUID_meta.default_value.Equals(m_AnalyticsGUID)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AnalyticsGUID, Schema.AnalyticsGUID_meta);
                writer.WriteString(m_AnalyticsGUID);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AnalyticsGUID, Schema.AnalyticsGUID_meta);
        }

        if (writeAllFields || (!Schema.QueryPhrase_meta.default_value.Equals(m_QueryPhrase)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.QueryPhrase, Schema.QueryPhrase_meta);
                writer.WriteString(m_QueryPhrase);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.QueryPhrase, Schema.QueryPhrase_meta);
        }

        if (writeAllFields || (!Schema.NonNormalizedQueryString_meta.default_value.Equals(m_NonNormalizedQueryString)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.NonNormalizedQueryString, Schema.NonNormalizedQueryString_meta);
                writer.WriteString(m_NonNormalizedQueryString);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.NonNormalizedQueryString, Schema.NonNormalizedQueryString_meta);
        }

        if (writeAllFields || (!Schema.ClickId_meta.default_value.Equals(m_ClickId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ClickId, Schema.ClickId_meta);
                writer.WriteString(m_ClickId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ClickId, Schema.ClickId_meta);
        }

        if (writeAllFields || (!Schema.Latitude_meta.default_value.Equals(m_Latitude)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Latitude, Schema.Latitude_meta);
                writer.WriteString(m_Latitude);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Latitude, Schema.Latitude_meta);
        }

        if (writeAllFields || (!Schema.Longitude_meta.default_value.Equals(m_Longitude)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Longitude, Schema.Longitude_meta);
                writer.WriteString(m_Longitude);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Longitude, Schema.Longitude_meta);
        }

        if (writeAllFields || (!Schema.ClientId_meta.default_value.Equals(m_ClientId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ClientId, Schema.ClientId_meta);
                writer.WriteString(m_ClientId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ClientId, Schema.ClientId_meta);
        }

        if (writeAllFields || (!Schema.AnonymousId_meta.default_value.Equals(m_AnonymousId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AnonymousId, Schema.AnonymousId_meta);
                writer.WriteString(m_AnonymousId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AnonymousId, Schema.AnonymousId_meta);
        }

        if (writeAllFields || (!Schema.DATASET_meta.default_value.Equals(m_DATASET)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.DATASET, Schema.DATASET_meta);
                writer.WriteString(m_DATASET);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.DATASET, Schema.DATASET_meta);
        }

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.CID, Schema.CID_meta);
            m_CID.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.MUID, Schema.MUID_meta);
            m_MUID.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.MUIDAutoGen, Schema.MUIDAutoGen_meta);
            m_MUIDAutoGen.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="RGUID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.Bond.GUID.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="Delta";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="ClientIP";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 4;
        field.metadata.name="ClientIPv6";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 5;
        field.metadata.name="SurrogateKey";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 6;
        field.metadata.name="UserId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 7;
        field.metadata.name="AnalyticsGUID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 8;
        field.metadata.name="QueryPhrase";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 9;
        field.metadata.name="NonNormalizedQueryString";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="ClickId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 11;
        field.metadata.name="Latitude";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 12;
        field.metadata.name="Longitude";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 13;
        field.metadata.name="ClientId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 14;
        field.metadata.name="AnonymousId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 15;
        field.metadata.name="DATASET";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 16;
        field.metadata.name="CID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.Bond.GUID.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 17;
        field.metadata.name="MUID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.Bond.GUID.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 18;
        field.metadata.name="MUIDAutoGen";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.Bond.GUID.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        KPIIViewSpark that = obj as KPIIViewSpark;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(KPIIViewSpark other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(KPIIViewSpark that)
    {
        bool equals = true;
        
        equals = equals && ((this.Delta == that.Delta));
        equals = equals && ((this.ClientIP == null) == (that.ClientIP == null));
        equals = equals && (this.ClientIP == null ? true : (this.ClientIP.Length == that.ClientIP.Length));
        equals = equals && ((this.ClientIPv6 == null) == (that.ClientIPv6 == null));
        equals = equals && (this.ClientIPv6 == null ? true : (this.ClientIPv6.Length == that.ClientIPv6.Length));
        equals = equals && ((this.SurrogateKey == null) == (that.SurrogateKey == null));
        equals = equals && (this.SurrogateKey == null ? true : (this.SurrogateKey.Length == that.SurrogateKey.Length));
        equals = equals && ((this.UserId == null) == (that.UserId == null));
        equals = equals && (this.UserId == null ? true : (this.UserId.Length == that.UserId.Length));
        equals = equals && ((this.AnalyticsGUID == null) == (that.AnalyticsGUID == null));
        equals = equals && (this.AnalyticsGUID == null ? true : (this.AnalyticsGUID.Length == that.AnalyticsGUID.Length));
        equals = equals && ((this.QueryPhrase == null) == (that.QueryPhrase == null));
        equals = equals && (this.QueryPhrase == null ? true : (this.QueryPhrase.Length == that.QueryPhrase.Length));
        equals = equals && ((this.NonNormalizedQueryString == null) == (that.NonNormalizedQueryString == null));
        equals = equals && (this.NonNormalizedQueryString == null ? true : (this.NonNormalizedQueryString.Length == that.NonNormalizedQueryString.Length));
        equals = equals && ((this.ClickId == null) == (that.ClickId == null));
        equals = equals && (this.ClickId == null ? true : (this.ClickId.Length == that.ClickId.Length));
        equals = equals && ((this.Latitude == null) == (that.Latitude == null));
        equals = equals && (this.Latitude == null ? true : (this.Latitude.Length == that.Latitude.Length));
        equals = equals && ((this.Longitude == null) == (that.Longitude == null));
        equals = equals && (this.Longitude == null ? true : (this.Longitude.Length == that.Longitude.Length));
        equals = equals && ((this.ClientId == null) == (that.ClientId == null));
        equals = equals && (this.ClientId == null ? true : (this.ClientId.Length == that.ClientId.Length));
        equals = equals && ((this.AnonymousId == null) == (that.AnonymousId == null));
        equals = equals && (this.AnonymousId == null ? true : (this.AnonymousId.Length == that.AnonymousId.Length));
        equals = equals && ((this.DATASET == null) == (that.DATASET == null));
        equals = equals && (this.DATASET == null ? true : (this.DATASET.Length == that.DATASET.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(KPIIViewSpark that)
    {
        bool equals = true;
        
        equals = equals && (this.RGUID == null ? true : this.RGUID.MemberwiseCompare(that.RGUID));
        equals = equals && (this.ClientIP == null ? true : this.ClientIP == that.ClientIP);
        equals = equals && (this.ClientIPv6 == null ? true : this.ClientIPv6 == that.ClientIPv6);
        equals = equals && (this.SurrogateKey == null ? true : this.SurrogateKey == that.SurrogateKey);
        equals = equals && (this.UserId == null ? true : this.UserId == that.UserId);
        equals = equals && (this.AnalyticsGUID == null ? true : this.AnalyticsGUID == that.AnalyticsGUID);
        equals = equals && (this.QueryPhrase == null ? true : this.QueryPhrase == that.QueryPhrase);
        equals = equals && (this.NonNormalizedQueryString == null ? true : this.NonNormalizedQueryString == that.NonNormalizedQueryString);
        equals = equals && (this.ClickId == null ? true : this.ClickId == that.ClickId);
        equals = equals && (this.Latitude == null ? true : this.Latitude == that.Latitude);
        equals = equals && (this.Longitude == null ? true : this.Longitude == that.Longitude);
        equals = equals && (this.ClientId == null ? true : this.ClientId == that.ClientId);
        equals = equals && (this.AnonymousId == null ? true : this.AnonymousId == that.AnonymousId);
        equals = equals && (this.DATASET == null ? true : this.DATASET == that.DATASET);
        equals = equals && (this.CID == null ? true : this.CID.MemberwiseCompare(that.CID));
        equals = equals && (this.MUID == null ? true : this.MUID.MemberwiseCompare(that.MUID));
        equals = equals && (this.MUIDAutoGen == null ? true : this.MUIDAutoGen.MemberwiseCompare(that.MUIDAutoGen));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_RGUID, this.RGUID, separator);
        sb.AppendFormat(format, __internal.s_Delta, this.Delta, separator);
        sb.AppendFormat(format, __internal.s_ClientIP, this.ClientIP, separator);
        sb.AppendFormat(format, __internal.s_ClientIPv6, this.ClientIPv6, separator);
        sb.AppendFormat(format, __internal.s_SurrogateKey, this.SurrogateKey, separator);
        sb.AppendFormat(format, __internal.s_UserId, this.UserId, separator);
        sb.AppendFormat(format, __internal.s_AnalyticsGUID, this.AnalyticsGUID, separator);
        sb.AppendFormat(format, __internal.s_QueryPhrase, this.QueryPhrase, separator);
        sb.AppendFormat(format, __internal.s_NonNormalizedQueryString, this.NonNormalizedQueryString, separator);
        sb.AppendFormat(format, __internal.s_ClickId, this.ClickId, separator);
        sb.AppendFormat(format, __internal.s_Latitude, this.Latitude, separator);
        sb.AppendFormat(format, __internal.s_Longitude, this.Longitude, separator);
        sb.AppendFormat(format, __internal.s_ClientId, this.ClientId, separator);
        sb.AppendFormat(format, __internal.s_AnonymousId, this.AnonymousId, separator);
        sb.AppendFormat(format, __internal.s_DATASET, this.DATASET, separator);
        sb.AppendFormat(format, __internal.s_CID, this.CID, separator);
        sb.AppendFormat(format, __internal.s_MUID, this.MUID, separator);
        sb.AppendFormat(format, __internal.s_MUIDAutoGen, this.MUIDAutoGen, separator);
        
        return sb.ToString();
    } // ToString()

}; // class KPIIViewSpark
} // namespace SparkSchema
