



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.directory
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : SearchClickDetailSpark_types.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using global::Microsoft.Bond;
using global::System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Text;

namespace SparkSchema
{

/// <summary>
/// SearchClickDetailSpark
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class SearchClickDetailSpark : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional nullable<int16> ABTestingTypes
    private Int16? m_ABTestingTypes;

    // 2: Optional string ABTestName
    private String m_ABTestName;

    // 3: Optional nullable<int8> ActualImpRange
    private SByte? m_ActualImpRange;

    // 4: Optional nullable<int8> ActualMLImpRange
    private SByte? m_ActualMLImpRange;

    // 5: Optional string AdLanguage
    private String m_AdLanguage;

    // 6: Optional nullable<uint8> AdServerStatusId
    private Byte? m_AdServerStatusId;

    // 7: Optional int32 AdUnitId
    private Int32 m_AdUnitId;

    // 8: Optional int8 AdUnitTypeId
    private SByte m_AdUnitTypeId;

    // 9: Optional nullable<int32> AlgorithmFilterId
    private Int32? m_AlgorithmFilterId;

    // 10: Optional nullable<int32> AlgorithmId
    private Int32? m_AlgorithmId;

    // 11: Optional nullable<int64> Click_OrderItemId
    private Int64? m_Click_OrderItemId;

    // 12: Optional nullable<int16> AskedAdCnt
    private Int16? m_AskedAdCnt;

    // 13: Optional nullable<int8> BaseImpRange
    private SByte? m_BaseImpRange;

    // 14: Optional nullable<double> BidDensity
    private Double? m_BidDensity;

    // 15: Optional string BingVertical
    private String m_BingVertical;

    // 16: Optional string BucketId
    private String m_BucketId;

    // 17: Optional nullable<int16> CategoryId
    private Int16? m_CategoryId;

    // 18: Optional vector<int32> ChannelIds
    private List<Int32> m_ChannelIds;

    // 19: Optional string CID
    private String m_CID;

    // 20: Optional string PageView_ClientIP
    private String m_PageView_ClientIP;

    // 21: Optional nullable<int16> ClientTimeZoneId
    private Int16? m_ClientTimeZoneId;

    // 22: Optional nullable<int32> CodePage
    private Int32? m_CodePage;

    // 23: Optional nullable<int64> DateTime
    private Int64? m_DateTime;

    // 24: Optional nullable<int32> DeviceId
    private Int32? m_DeviceId;

    // 25: Optional nullable<int32> DeviceOSId
    private Int32? m_DeviceOSId;

    // 26: Optional string DeviceOSName
    private String m_DeviceOSName;

    // 27: Optional string DeviceOSVersion
    private String m_DeviceOSVersion;

    // 28: Optional nullable<int8> DeviceTypeId
    private SByte? m_DeviceTypeId;

    // 29: Optional nullable<bool> DisputedFlag
    private Boolean? m_DisputedFlag;

    // 30: Optional nullable<int16> DistributionChannelId
    private Int16? m_DistributionChannelId;

    // 31: Optional nullable<int32> DumpId
    private Int32? m_DumpId;

    // 32: Optional string DynamicParamNormalizedURL
    private String m_DynamicParamNormalizedURL;

    // 33: Optional nullable<int32> ECPIThresholdValue
    private Int32? m_ECPIThresholdValue;

    // 34: Optional nullable<int32> ExperimentId
    private Int32? m_ExperimentId;

    // 35: Optional nullable<int16> FlowId
    private Int16? m_FlowId;

    // 36: Optional string FormCode
    private String m_FormCode;

    // 37: Optional nullable<int8> GleamedAdRange
    private SByte? m_GleamedAdRange;

    // 38: Optional bool IsMI
    private Boolean m_IsMI;

    // 39: Optional nullable<int8> LogSequence
    private SByte? m_LogSequence;

    // 40: Optional string LogServerName
    private String m_LogServerName;

    // 41: Optional nullable<int32> MakeId
    private Int32? m_MakeId;

    // 42: Optional uint8 MarketplaceClassificationId
    private Byte m_MarketplaceClassificationId;

    // 43: Optional nullable<int16> MediumId
    private Int16? m_MediumId;

    // 44: Optional string MIMUID
    private String m_MIMUID;

    // 45: Optional nullable<int32> MTID
    private Int32? m_MTID;

    // 46: Optional int32 NetworkId
    private Int32 m_NetworkId;

    // 47: Optional string NonNormalizedQueryString
    private String m_NonNormalizedQueryString;

    // 48: Optional nullable<int32> NumNonPforP
    private Int32? m_NumNonPforP;

    // 49: Optional nullable<int32> OriginalAdUnitId
    private Int32? m_OriginalAdUnitId;

    // 50: Optional nullable<int32> OriginalPropertyId
    private Int32? m_OriginalPropertyId;

    // 51: Optional nullable<int32> OriginalPublisherId
    private Int32? m_OriginalPublisherId;

    // 52: Optional nullable<int32> OSId
    private Int32? m_OSId;

    // 53: Optional string WebsiteCountry
    private String m_WebsiteCountry;

    // 54: Optional nullable<int8> PageNumber
    private SByte? m_PageNumber;

    // 55: Optional nullable<int8> PageSectionId
    private SByte? m_PageSectionId;

    // 56: Optional nullable<int16> PageType
    private Int16? m_PageType;

    // 57: Optional string PartnerCode
    private String m_PartnerCode;

    // 58: Optional string PassportAgeGroupId
    private String m_PassportAgeGroupId;

    // 59: Optional string PassportBDay
    private String m_PassportBDay;

    // 60: Optional string PassportFlags
    private String m_PassportFlags;

    // 61: Optional string PassportGenderId
    private String m_PassportGenderId;

    // 62: Optional string PassportRegion
    private String m_PassportRegion;

    // 63: Optional string PassportZipCode
    private String m_PassportZipCode;

    // 64: Optional string PCPB
    private String m_PCPB;

    // 65: Optional nullable<int32> PropertyId
    private Int32? m_PropertyId;

    // 66: Optional nullable<uint32> PubConfigGroupId
    private UInt32? m_PubConfigGroupId;

    // 67: Optional nullable<int32> PublisherAccountId
    private Int32? m_PublisherAccountId;

    // 68: Optional vector<int32> QueryLocationIds
    private List<Int32> m_QueryLocationIds;

    // 69: Optional int32 PublisherAccountTimeZone
    private Int32 m_PublisherAccountTimeZone;

    // 70: Optional nullable<int16> PublisherCurrencyId
    private Int16? m_PublisherCurrencyId;

    // 71: Optional nullable<int32> PublisherId
    private Int32? m_PublisherId;

    // 72: Optional nullable<uint8> PublisherOwnerId
    private Byte? m_PublisherOwnerId;

    // 73: Optional string QueryPhrase
    private String m_QueryPhrase;

    // 74: Optional nullable<int32> ReasonCode
    private Int32? m_ReasonCode;

    // 75: Optional int32 RelatedToAccountId
    private Int32 m_RelatedToAccountId;

    // 76: Optional int8 RelationshipId
    private SByte m_RelationshipId;

    // 77: Optional string IncomingPublisherWebSiteCountry
    private String m_IncomingPublisherWebSiteCountry;

    // 78: Optional nullable<int16> ReturnedAdCnt
    private Int16? m_ReturnedAdCnt;

    // 79: Optional nullable<int32> RSNId
    private Int32? m_RSNId;

    // 80: Optional nullable<int32> SearchFormId
    private Int32? m_SearchFormId;

    // 81: Optional nullable<int16> SearchSiteVersionId
    private Int16? m_SearchSiteVersionId;

    // 82: Optional string SmartPricing
    private String m_SmartPricing;

    // 83: Optional nullable<uint16> SmartPricingDiscountAlgoId
    private UInt16? m_SmartPricingDiscountAlgoId;

    // 84: Optional nullable<uint32> SmartPricingDiscountVersion
    private UInt32? m_SmartPricingDiscountVersion;

    // 85: Optional nullable<uint16> SmartPricingQueryCategoryAlgoId
    private UInt16? m_SmartPricingQueryCategoryAlgoId;

    // 86: Optional nullable<int32> SmartPricingQueryCategoryId
    private Int32? m_SmartPricingQueryCategoryId;

    // 87: Optional nullable<int32> StartPosition
    private Int32? m_StartPosition;

    // 88: Optional nullable<int16> SubCategoryId
    private Int16? m_SubCategoryId;

    // 89: Optional int32 TerminalNodeId
    private Int32 m_TerminalNodeId;

    // 90: Optional int32 TPAdUId
    private Int32 m_TPAdUId;

    // 91: Optional string TrafficPartitionCode
    private String m_TrafficPartitionCode;

    // 92: Optional string TypeTag
    private String m_TypeTag;

    // 93: Optional nullable<int32> DeviceOSId2
    private Int32? m_DeviceOSId2;

    // 94: Optional nullable<int32> AbsPosition
    private Int32? m_AbsPosition;

    // 95: Optional nullable<int32> ActualBid
    private Int32? m_ActualBid;

    // 96: Optional nullable<int32> AdDisplayTypeId
    private Int32? m_AdDisplayTypeId;

    // 97: Optional nullable<int32> AdjustedRank
    private Int32? m_AdjustedRank;

    // 98: Optional nullable<int8> AdLayoutId
    private SByte? m_AdLayoutId;

    // 100: Optional nullable<int32> AdvertiserAccountId
    private Int32? m_AdvertiserAccountId;

    // 101: Optional nullable<int16> AdvertiserAccountPreferredCurrencyId
    private Int16? m_AdvertiserAccountPreferredCurrencyId;

    // 102: Optional nullable<double> AdvertiserNetAmountInPublisherCurrency
    private Double? m_AdvertiserNetAmountInPublisherCurrency;

    // 103: Optional nullable<uint8> AdvertiserOwnerId
    private Byte? m_AdvertiserOwnerId;

    // 104: Optional nullable<double> AmountChargedAdvertiserCurrency
    private Double? m_AmountChargedAdvertiserCurrency;

    // 105: Optional nullable<double> AmountChargedAuctionCurrency
    private Double? m_AmountChargedAuctionCurrency;

    // 106: Optional nullable<double> AmountChargedAuctionCurrencyUnadjusted
    private Double? m_AmountChargedAuctionCurrencyUnadjusted;

    // 107: Optional nullable<double> AmountChargedConstantUSDExchangeRt
    private Double? m_AmountChargedConstantUSDExchangeRt;

    // 108: Optional nullable<double> AmountChargedInPublisherCurrency
    private Double? m_AmountChargedInPublisherCurrency;

    // 109: Optional nullable<int32> AmountChargedLanguageCurrency
    private Int32? m_AmountChargedLanguageCurrency;

    // 110: Optional nullable<double> AmountChargedUSDMonthlyExchangeRt
    private Double? m_AmountChargedUSDMonthlyExchangeRt;

    // 111: Optional string BiddedKeyword
    private String m_BiddedKeyword;

    // 112: Optional nullable<int32> BiddedKeywordId
    private Int32? m_BiddedKeywordId;

    // 113: Optional nullable<int8> BiddedMatchTypeId
    private SByte? m_BiddedMatchTypeId;

    // 114: Optional nullable<int32> BusinessLocationId
    private Int32? m_BusinessLocationId;

    // 115: Optional nullable<uint64> CampaignId
    private UInt64? m_CampaignId;

    // 116: Optional nullable<int32> CampaignTimeZoneId
    private Int32? m_CampaignTimeZoneId;

    // 117: Optional nullable<int16> CampaignTZDayId
    private Int16? m_CampaignTZDayId;

    // 118: Optional nullable<int8> CampaignTZHourNum
    private SByte? m_CampaignTZHourNum;

    // 119: Optional string CleanKeywordHash
    private String m_CleanKeywordHash;

    // 120: Optional nullable<int16> CurrencyId
    private Int16? m_CurrencyId;

    // 121: Optional nullable<int32> CustomerId
    private Int32? m_CustomerId;

    // 122: Optional nullable<int16> DeliveryEngineRank
    private Int16? m_DeliveryEngineRank;

    // 123: Optional string EstimatedPagePosition
    private String m_EstimatedPagePosition;

    // 124: Optional nullable<int8> ExtendedMatchTypeId
    private SByte? m_ExtendedMatchTypeId;

    // 125: Optional nullable<int8> GleamedAdDelivered
    private SByte? m_GleamedAdDelivered;

    // 126: Optional nullable<int16> KeywordScore
    private Int16? m_KeywordScore;

    // 127: Optional nullable<int32> KeywordSourceBitmap
    private Int32? m_KeywordSourceBitmap;

    // 128: Optional nullable<int8> vectoringTypeId
    private SByte? m_vectoringTypeId;

    // 129: Optional nullable<int8> OnlineFraudQualityBand
    private SByte? m_OnlineFraudQualityBand;

    // 130: Optional nullable<int32> MatchScore
    private Int32? m_MatchScore;

    // 131: Optional nullable<int32> MatchTypeId
    private Int32? m_MatchTypeId;

    // 132: Optional nullable<double> MSRevenueAdvertiserCurrency
    private Double? m_MSRevenueAdvertiserCurrency;

    // 133: Optional nullable<double> MSRevenueUSD
    private Double? m_MSRevenueUSD;

    // 134: Optional nullable<double> OperationalCostAllowanceAdvertiserCurrency
    private Double? m_OperationalCostAllowanceAdvertiserCurrency;

    // 135: Optional nullable<double> OperationalCostAllowanceUSD
    private Double? m_OperationalCostAllowanceUSD;

    // 136: Optional nullable<uint64> OrderId
    private UInt64? m_OrderId;

    // 137: Optional string PagePosition
    private String m_PagePosition;

    // 138: Optional nullable<int16> PricingModelId
    private Int16? m_PricingModelId;

    // 139: Optional nullable<int16> ProbabilityOfClick
    private Int16? m_ProbabilityOfClick;

    // 140: Optional nullable<int32> ProductId
    private Int32? m_ProductId;

    // 141: Optional nullable<double> PublisherEarningsAdvertiserCurrency
    private Double? m_PublisherEarningsAdvertiserCurrency;

    // 142: Optional nullable<double> PublisherEarningsPublisherCurrency
    private Double? m_PublisherEarningsPublisherCurrency;

    // 143: Optional nullable<double> PublisherEarningsUSD
    private Double? m_PublisherEarningsUSD;

    // 144: Optional nullable<uint32> RankScore
    private UInt32? m_RankScore;

    // 145: Optional nullable<int8> RelativePosition
    private SByte? m_RelativePosition;

    // 146: Optional nullable<int32> SellableNodeId
    private Int32? m_SellableNodeId;

    // 147: Optional nullable<int32> SmartPricingModelId
    private Int32? m_SmartPricingModelId;

    // 148: Optional string SmartPricingRuleId
    private String m_SmartPricingRuleId;

    // 149: Optional string TokenRatioString
    private String m_TokenRatioString;

    // 150: Optional nullable<int32> WinningSegmentId
    private Int32? m_WinningSegmentId;

    // 151: Optional nullable<uint8> TargetedLocationType
    private Byte? m_TargetedLocationType;

    // 152: Optional uint16 RenderedLayoutId
    private UInt16 m_RenderedLayoutId;

    // 153: Optional nullable<int32> ExchangeRateDayId
    private Int32? m_ExchangeRateDayId;

    // 154: Optional nullable<int64> AdExtensionId
    private Int64? m_AdExtensionId;

    // 155: Optional nullable<int64> AdExtensionItemId
    private Int64? m_AdExtensionItemId;

    // 156: Optional nullable<uint16> AdExtensionItemRenderedLayoutId
    private UInt16? m_AdExtensionItemRenderedLayoutId;

    // 157: Optional int16 AdExtensionVersionId
    private Int16 m_AdExtensionVersionId;

    // 158: Optional nullable<int16> AdExtensionTypeId
    private Int16? m_AdExtensionTypeId;

    // 159: Optional nullable<uint16> AdExtensionRenderedLayoutId
    private UInt16? m_AdExtensionRenderedLayoutId;

    // 160: Optional string Click_ClientIP
    private String m_Click_ClientIP;

    // 161: Optional nullable<int64> Click_DateTime
    private Int64? m_Click_DateTime;

    // 162: Optional string ElementName
    private String m_ElementName;

    // 163: Optional bool IsMR
    private Boolean m_IsMR;

    // 164: Optional vector<int32> LocationIds
    private List<Int32> m_LocationIds;

    // 165: Optional nullable<int8> ListingTypeId
    private SByte? m_ListingTypeId;

    // 166: Optional string ClickId
    private String m_ClickId;

    // 167: Optional int32 FraudModelId
    private Int32 m_FraudModelId;

    // 168: Optional int8 FraudQualityBand
    private SByte m_FraudQualityBand;

    // 169: Optional string FraudQualityBand_test
    private String m_FraudQualityBand_test;

    // 170: Optional int16 FraudQualityType
    private Int16 m_FraudQualityType;

    // 171: Optional vector<uint8> FraudReason
    private List<Byte> m_FraudReason;

    // 172: Optional string FraudRuleId
    private String m_FraudRuleId;

    // 173: Optional double FraudScore
    private Double m_FraudScore;

    // 174: Optional nullable<int64> LogDelta
    private Int64? m_LogDelta;

    // 175: Optional Microsoft.Bond.GUID RGUID
    private global::Microsoft.Bond.GUID m_RGUID;

    // 176: Optional SparkSchema.PSCFRSpark PSCFRClickData
    private global::SparkSchema.PSCFRSpark m_PSCFRClickData;

    /// <summary>
    /// Page View details
    /// </summary>
    public Int16? ABTestingTypes
    {
        get { return this.m_ABTestingTypes; }
        set { this.m_ABTestingTypes = value; }
    }

    /// <summary>
    /// ABTestName
    /// </summary>
    public String ABTestName
    {
        get { return this.m_ABTestName; }
        set { this.m_ABTestName = value; }
    }

    /// <summary>
    /// ActualImpRange
    /// </summary>
    public SByte? ActualImpRange
    {
        get { return this.m_ActualImpRange; }
        set { this.m_ActualImpRange = value; }
    }

    /// <summary>
    /// ActualMLImpRange
    /// </summary>
    public SByte? ActualMLImpRange
    {
        get { return this.m_ActualMLImpRange; }
        set { this.m_ActualMLImpRange = value; }
    }

    /// <summary>
    /// AdLanguage
    /// </summary>
    public String AdLanguage
    {
        get { return this.m_AdLanguage; }
        set { this.m_AdLanguage = value; }
    }

    /// <summary>
    /// AdServerStatusId
    /// </summary>
    public Byte? AdServerStatusId
    {
        get { return this.m_AdServerStatusId; }
        set { this.m_AdServerStatusId = value; }
    }

    /// <summary>
    /// AdUnitId
    /// </summary>
    public Int32 AdUnitId
    {
        get { return this.m_AdUnitId; }
        set { this.m_AdUnitId = value; }
    }

    /// <summary>
    /// AdUnitTypeId
    /// </summary>
    public SByte AdUnitTypeId
    {
        get { return this.m_AdUnitTypeId; }
        set { this.m_AdUnitTypeId = value; }
    }

    /// <summary>
    /// AlgorithmFilterId
    /// </summary>
    public Int32? AlgorithmFilterId
    {
        get { return this.m_AlgorithmFilterId; }
        set { this.m_AlgorithmFilterId = value; }
    }

    /// <summary>
    /// AlgorithmId
    /// </summary>
    public Int32? AlgorithmId
    {
        get { return this.m_AlgorithmId; }
        set { this.m_AlgorithmId = value; }
    }

    /// <summary>
    /// Click_OrderItemId
    /// </summary>
    public Int64? Click_OrderItemId
    {
        get { return this.m_Click_OrderItemId; }
        set { this.m_Click_OrderItemId = value; }
    }

    /// <summary>
    /// AskedAdCnt
    /// </summary>
    public Int16? AskedAdCnt
    {
        get { return this.m_AskedAdCnt; }
        set { this.m_AskedAdCnt = value; }
    }

    /// <summary>
    /// BaseImpRange
    /// </summary>
    public SByte? BaseImpRange
    {
        get { return this.m_BaseImpRange; }
        set { this.m_BaseImpRange = value; }
    }

    /// <summary>
    /// BidDensity
    /// </summary>
    public Double? BidDensity
    {
        get { return this.m_BidDensity; }
        set { this.m_BidDensity = value; }
    }

    /// <summary>
    /// BingVertical
    /// </summary>
    public String BingVertical
    {
        get { return this.m_BingVertical; }
        set { this.m_BingVertical = value; }
    }

    /// <summary>
    /// BucketId
    /// </summary>
    public String BucketId
    {
        get { return this.m_BucketId; }
        set { this.m_BucketId = value; }
    }

    /// <summary>
    /// CategoryId
    /// </summary>
    public Int16? CategoryId
    {
        get { return this.m_CategoryId; }
        set { this.m_CategoryId = value; }
    }

    /// <summary>
    /// ChannelIds
    /// </summary>
    public List<Int32> ChannelIds
    {
        get { return this.m_ChannelIds; }
        set { this.m_ChannelIds = value; }
    }

    /// <summary>
    /// CID
    /// </summary>
    public String CID
    {
        get { return this.m_CID; }
        set { this.m_CID = value; }
    }

    /// <summary>
    /// PageView_ClientIP
    /// </summary>
    public String PageView_ClientIP
    {
        get { return this.m_PageView_ClientIP; }
        set { this.m_PageView_ClientIP = value; }
    }

    /// <summary>
    /// ClientTimeZoneId
    /// </summary>
    public Int16? ClientTimeZoneId
    {
        get { return this.m_ClientTimeZoneId; }
        set { this.m_ClientTimeZoneId = value; }
    }

    /// <summary>
    /// CodePage
    /// </summary>
    public Int32? CodePage
    {
        get { return this.m_CodePage; }
        set { this.m_CodePage = value; }
    }

    /// <summary>
    /// DateTime
    /// </summary>
    public Int64? DateTime
    {
        get { return this.m_DateTime; }
        set { this.m_DateTime = value; }
    }

    /// <summary>
    /// DeviceId
    /// </summary>
    public Int32? DeviceId
    {
        get { return this.m_DeviceId; }
        set { this.m_DeviceId = value; }
    }

    /// <summary>
    /// DeviceOSId
    /// </summary>
    public Int32? DeviceOSId
    {
        get { return this.m_DeviceOSId; }
        set { this.m_DeviceOSId = value; }
    }

    /// <summary>
    /// DeviceOSName
    /// </summary>
    public String DeviceOSName
    {
        get { return this.m_DeviceOSName; }
        set { this.m_DeviceOSName = value; }
    }

    /// <summary>
    /// DeviceOSVersion
    /// </summary>
    public String DeviceOSVersion
    {
        get { return this.m_DeviceOSVersion; }
        set { this.m_DeviceOSVersion = value; }
    }

    /// <summary>
    /// DeviceTypeId
    /// </summary>
    public SByte? DeviceTypeId
    {
        get { return this.m_DeviceTypeId; }
        set { this.m_DeviceTypeId = value; }
    }

    /// <summary>
    /// DisputedFlag
    /// </summary>
    public Boolean? DisputedFlag
    {
        get { return this.m_DisputedFlag; }
        set { this.m_DisputedFlag = value; }
    }

    /// <summary>
    /// DistributionChannelId
    /// </summary>
    public Int16? DistributionChannelId
    {
        get { return this.m_DistributionChannelId; }
        set { this.m_DistributionChannelId = value; }
    }

    /// <summary>
    /// DumpId
    /// </summary>
    public Int32? DumpId
    {
        get { return this.m_DumpId; }
        set { this.m_DumpId = value; }
    }

    /// <summary>
    /// DynamicParamNormalizedURL
    /// </summary>
    public String DynamicParamNormalizedURL
    {
        get { return this.m_DynamicParamNormalizedURL; }
        set { this.m_DynamicParamNormalizedURL = value; }
    }

    /// <summary>
    /// ECPIThresholdValue
    /// </summary>
    public Int32? ECPIThresholdValue
    {
        get { return this.m_ECPIThresholdValue; }
        set { this.m_ECPIThresholdValue = value; }
    }

    /// <summary>
    /// ExperimentId
    /// </summary>
    public Int32? ExperimentId
    {
        get { return this.m_ExperimentId; }
        set { this.m_ExperimentId = value; }
    }

    /// <summary>
    /// FlowId
    /// </summary>
    public Int16? FlowId
    {
        get { return this.m_FlowId; }
        set { this.m_FlowId = value; }
    }

    /// <summary>
    /// FormCode
    /// </summary>
    public String FormCode
    {
        get { return this.m_FormCode; }
        set { this.m_FormCode = value; }
    }

    /// <summary>
    /// GleamedAdRange
    /// </summary>
    public SByte? GleamedAdRange
    {
        get { return this.m_GleamedAdRange; }
        set { this.m_GleamedAdRange = value; }
    }

    /// <summary>
    /// IsMI
    /// </summary>
    public Boolean IsMI
    {
        get { return this.m_IsMI; }
        set { this.m_IsMI = value; }
    }

    /// <summary>
    /// LogSequence
    /// </summary>
    public SByte? LogSequence
    {
        get { return this.m_LogSequence; }
        set { this.m_LogSequence = value; }
    }

    /// <summary>
    /// LogServerName
    /// </summary>
    public String LogServerName
    {
        get { return this.m_LogServerName; }
        set { this.m_LogServerName = value; }
    }

    /// <summary>
    /// MakeId
    /// </summary>
    public Int32? MakeId
    {
        get { return this.m_MakeId; }
        set { this.m_MakeId = value; }
    }

    /// <summary>
    /// MarketplaceClassificationId
    /// </summary>
    public Byte MarketplaceClassificationId
    {
        get { return this.m_MarketplaceClassificationId; }
        set { this.m_MarketplaceClassificationId = value; }
    }

    /// <summary>
    /// MediumId
    /// </summary>
    public Int16? MediumId
    {
        get { return this.m_MediumId; }
        set { this.m_MediumId = value; }
    }

    /// <summary>
    /// MIMUID
    /// </summary>
    public String MIMUID
    {
        get { return this.m_MIMUID; }
        set { this.m_MIMUID = value; }
    }

    /// <summary>
    /// { IsObsolete = true; ObsoleteMessage = "MIMUID is being discontinued. MUID will be sourced solely    from  GBI. Use MUID";};
    /// </summary>
    public Int32? MTID
    {
        get { return this.m_MTID; }
        set { this.m_MTID = value; }
    }

    /// <summary>
    /// NetworkId
    /// </summary>
    public Int32 NetworkId
    {
        get { return this.m_NetworkId; }
        set { this.m_NetworkId = value; }
    }

    /// <summary>
    /// NonNormalizedQueryString
    /// </summary>
    public String NonNormalizedQueryString
    {
        get { return this.m_NonNormalizedQueryString; }
        set { this.m_NonNormalizedQueryString = value; }
    }

    /// <summary>
    /// NumNonPforP
    /// </summary>
    public Int32? NumNonPforP
    {
        get { return this.m_NumNonPforP; }
        set { this.m_NumNonPforP = value; }
    }

    /// <summary>
    /// OriginalAdUnitId
    /// </summary>
    public Int32? OriginalAdUnitId
    {
        get { return this.m_OriginalAdUnitId; }
        set { this.m_OriginalAdUnitId = value; }
    }

    /// <summary>
    /// OriginalPropertyId
    /// </summary>
    public Int32? OriginalPropertyId
    {
        get { return this.m_OriginalPropertyId; }
        set { this.m_OriginalPropertyId = value; }
    }

    /// <summary>
    /// OriginalPublisherId
    /// </summary>
    public Int32? OriginalPublisherId
    {
        get { return this.m_OriginalPublisherId; }
        set { this.m_OriginalPublisherId = value; }
    }

    /// <summary>
    /// OSId
    /// </summary>
    public Int32? OSId
    {
        get { return this.m_OSId; }
        set { this.m_OSId = value; }
    }

    /// <summary>
    /// WebsiteCountry
    /// </summary>
    public String WebsiteCountry
    {
        get { return this.m_WebsiteCountry; }
        set { this.m_WebsiteCountry = value; }
    }

    /// <summary>
    /// PageNumber
    /// </summary>
    public SByte? PageNumber
    {
        get { return this.m_PageNumber; }
        set { this.m_PageNumber = value; }
    }

    /// <summary>
    /// PageSectionId
    /// </summary>
    public SByte? PageSectionId
    {
        get { return this.m_PageSectionId; }
        set { this.m_PageSectionId = value; }
    }

    /// <summary>
    /// PageType
    /// </summary>
    public Int16? PageType
    {
        get { return this.m_PageType; }
        set { this.m_PageType = value; }
    }

    /// <summary>
    /// PartnerCode
    /// </summary>
    public String PartnerCode
    {
        get { return this.m_PartnerCode; }
        set { this.m_PartnerCode = value; }
    }

    /// <summary>
    /// PassportAgeGroupId
    /// </summary>
    public String PassportAgeGroupId
    {
        get { return this.m_PassportAgeGroupId; }
        set { this.m_PassportAgeGroupId = value; }
    }

    /// <summary>
    /// PassportBDay
    /// </summary>
    public String PassportBDay
    {
        get { return this.m_PassportBDay; }
        set { this.m_PassportBDay = value; }
    }

    /// <summary>
    /// PassportFlags
    /// </summary>
    public String PassportFlags
    {
        get { return this.m_PassportFlags; }
        set { this.m_PassportFlags = value; }
    }

    /// <summary>
    /// PassportGenderId
    /// </summary>
    public String PassportGenderId
    {
        get { return this.m_PassportGenderId; }
        set { this.m_PassportGenderId = value; }
    }

    /// <summary>
    /// PassportRegion
    /// </summary>
    public String PassportRegion
    {
        get { return this.m_PassportRegion; }
        set { this.m_PassportRegion = value; }
    }

    /// <summary>
    /// PassportZipCode
    /// </summary>
    public String PassportZipCode
    {
        get { return this.m_PassportZipCode; }
        set { this.m_PassportZipCode = value; }
    }

    /// <summary>
    /// PCPB
    /// </summary>
    public String PCPB
    {
        get { return this.m_PCPB; }
        set { this.m_PCPB = value; }
    }

    /// <summary>
    /// { IsObsolete = true; ObsoleteMessage = "Use PCPB in the AdImpression." };
    /// </summary>
    public Int32? PropertyId
    {
        get { return this.m_PropertyId; }
        set { this.m_PropertyId = value; }
    }

    /// <summary>
    /// PubConfigGroupId
    /// </summary>
    public UInt32? PubConfigGroupId
    {
        get { return this.m_PubConfigGroupId; }
        set { this.m_PubConfigGroupId = value; }
    }

    /// <summary>
    /// PublisherAccountId
    /// </summary>
    public Int32? PublisherAccountId
    {
        get { return this.m_PublisherAccountId; }
        set { this.m_PublisherAccountId = value; }
    }

    /// <summary>
    /// QueryLocationIds
    /// </summary>
    public List<Int32> QueryLocationIds
    {
        get { return this.m_QueryLocationIds; }
        set { this.m_QueryLocationIds = value; }
    }

    /// <summary>
    /// { Length = 5 };
    /// </summary>
    public Int32 PublisherAccountTimeZone
    {
        get { return this.m_PublisherAccountTimeZone; }
        set { this.m_PublisherAccountTimeZone = value; }
    }

    /// <summary>
    /// PublisherCurrencyId
    /// </summary>
    public Int16? PublisherCurrencyId
    {
        get { return this.m_PublisherCurrencyId; }
        set { this.m_PublisherCurrencyId = value; }
    }

    /// <summary>
    /// PublisherId
    /// </summary>
    public Int32? PublisherId
    {
        get { return this.m_PublisherId; }
        set { this.m_PublisherId = value; }
    }

    /// <summary>
    /// PublisherOwnerId
    /// </summary>
    public Byte? PublisherOwnerId
    {
        get { return this.m_PublisherOwnerId; }
        set { this.m_PublisherOwnerId = value; }
    }

    /// <summary>
    /// QueryPhrase
    /// </summary>
    public String QueryPhrase
    {
        get { return this.m_QueryPhrase; }
        set { this.m_QueryPhrase = value; }
    }

    /// <summary>
    /// ReasonCode
    /// </summary>
    public Int32? ReasonCode
    {
        get { return this.m_ReasonCode; }
        set { this.m_ReasonCode = value; }
    }

    /// <summary>
    /// RelatedToAccountId
    /// </summary>
    public Int32 RelatedToAccountId
    {
        get { return this.m_RelatedToAccountId; }
        set { this.m_RelatedToAccountId = value; }
    }

    /// <summary>
    /// RelationshipId
    /// </summary>
    public SByte RelationshipId
    {
        get { return this.m_RelationshipId; }
        set { this.m_RelationshipId = value; }
    }

    /// <summary>
    /// IncomingPublisherWebSiteCountry
    /// </summary>
    public String IncomingPublisherWebSiteCountry
    {
        get { return this.m_IncomingPublisherWebSiteCountry; }
        set { this.m_IncomingPublisherWebSiteCountry = value; }
    }

    /// <summary>
    /// ReturnedAdCnt
    /// </summary>
    public Int16? ReturnedAdCnt
    {
        get { return this.m_ReturnedAdCnt; }
        set { this.m_ReturnedAdCnt = value; }
    }

    /// <summary>
    /// RSNId
    /// </summary>
    public Int32? RSNId
    {
        get { return this.m_RSNId; }
        set { this.m_RSNId = value; }
    }

    /// <summary>
    /// SearchFormId
    /// </summary>
    public Int32? SearchFormId
    {
        get { return this.m_SearchFormId; }
        set { this.m_SearchFormId = value; }
    }

    /// <summary>
    /// SearchSiteVersionId
    /// </summary>
    public Int16? SearchSiteVersionId
    {
        get { return this.m_SearchSiteVersionId; }
        set { this.m_SearchSiteVersionId = value; }
    }

    /// <summary>
    /// SmartPricing
    /// </summary>
    public String SmartPricing
    {
        get { return this.m_SmartPricing; }
        set { this.m_SmartPricing = value; }
    }

    /// <summary>
    /// SmartPricingDiscountAlgoId
    /// </summary>
    public UInt16? SmartPricingDiscountAlgoId
    {
        get { return this.m_SmartPricingDiscountAlgoId; }
        set { this.m_SmartPricingDiscountAlgoId = value; }
    }

    /// <summary>
    /// SmartPricingDiscountVersion
    /// </summary>
    public UInt32? SmartPricingDiscountVersion
    {
        get { return this.m_SmartPricingDiscountVersion; }
        set { this.m_SmartPricingDiscountVersion = value; }
    }

    /// <summary>
    /// SmartPricingQueryCategoryAlgoId
    /// </summary>
    public UInt16? SmartPricingQueryCategoryAlgoId
    {
        get { return this.m_SmartPricingQueryCategoryAlgoId; }
        set { this.m_SmartPricingQueryCategoryAlgoId = value; }
    }

    /// <summary>
    /// SmartPricingQueryCategoryId
    /// </summary>
    public Int32? SmartPricingQueryCategoryId
    {
        get { return this.m_SmartPricingQueryCategoryId; }
        set { this.m_SmartPricingQueryCategoryId = value; }
    }

    /// <summary>
    /// StartPosition
    /// </summary>
    public Int32? StartPosition
    {
        get { return this.m_StartPosition; }
        set { this.m_StartPosition = value; }
    }

    /// <summary>
    /// SubCategoryId
    /// </summary>
    public Int16? SubCategoryId
    {
        get { return this.m_SubCategoryId; }
        set { this.m_SubCategoryId = value; }
    }

    /// <summary>
    /// TerminalNodeId
    /// </summary>
    public Int32 TerminalNodeId
    {
        get { return this.m_TerminalNodeId; }
        set { this.m_TerminalNodeId = value; }
    }

    /// <summary>
    /// TPAdUId
    /// </summary>
    public Int32 TPAdUId
    {
        get { return this.m_TPAdUId; }
        set { this.m_TPAdUId = value; }
    }

    /// <summary>
    /// TrafficPartitionCode
    /// </summary>
    public String TrafficPartitionCode
    {
        get { return this.m_TrafficPartitionCode; }
        set { this.m_TrafficPartitionCode = value; }
    }

    /// <summary>
    /// TypeTag
    /// </summary>
    public String TypeTag
    {
        get { return this.m_TypeTag; }
        set { this.m_TypeTag = value; }
    }

    /// <summary>
    /// DeviceOSId2
    /// </summary>
    public Int32? DeviceOSId2
    {
        get { return this.m_DeviceOSId2; }
        set { this.m_DeviceOSId2 = value; }
    }

    /// <summary>
    /// End of Page View Ad Impression Data
    /// </summary>
    public Int32? AbsPosition
    {
        get { return this.m_AbsPosition; }
        set { this.m_AbsPosition = value; }
    }

    /// <summary>
    /// ActualBid
    /// </summary>
    public Int32? ActualBid
    {
        get { return this.m_ActualBid; }
        set { this.m_ActualBid = value; }
    }

    /// <summary>
    /// AdDisplayTypeId
    /// </summary>
    public Int32? AdDisplayTypeId
    {
        get { return this.m_AdDisplayTypeId; }
        set { this.m_AdDisplayTypeId = value; }
    }

    /// <summary>
    /// AdjustedRank
    /// </summary>
    public Int32? AdjustedRank
    {
        get { return this.m_AdjustedRank; }
        set { this.m_AdjustedRank = value; }
    }

    /// <summary>
    /// AdLayoutId
    /// </summary>
    public SByte? AdLayoutId
    {
        get { return this.m_AdLayoutId; }
        set { this.m_AdLayoutId = value; }
    }

    /// <summary>
    /// AdvertiserAccountId
    /// </summary>
    public Int32? AdvertiserAccountId
    {
        get { return this.m_AdvertiserAccountId; }
        set { this.m_AdvertiserAccountId = value; }
    }

    /// <summary>
    /// AdvertiserAccountPreferredCurrencyId
    /// </summary>
    public Int16? AdvertiserAccountPreferredCurrencyId
    {
        get { return this.m_AdvertiserAccountPreferredCurrencyId; }
        set { this.m_AdvertiserAccountPreferredCurrencyId = value; }
    }

    /// <summary>
    /// AdvertiserNetAmountInPublisherCurrency
    /// </summary>
    public Double? AdvertiserNetAmountInPublisherCurrency
    {
        get { return this.m_AdvertiserNetAmountInPublisherCurrency; }
        set { this.m_AdvertiserNetAmountInPublisherCurrency = value; }
    }

    /// <summary>
    /// AdvertiserOwnerId
    /// </summary>
    public Byte? AdvertiserOwnerId
    {
        get { return this.m_AdvertiserOwnerId; }
        set { this.m_AdvertiserOwnerId = value; }
    }

    /// <summary>
    /// AmountChargedAdvertiserCurrency
    /// </summary>
    public Double? AmountChargedAdvertiserCurrency
    {
        get { return this.m_AmountChargedAdvertiserCurrency; }
        set { this.m_AmountChargedAdvertiserCurrency = value; }
    }

    /// <summary>
    /// AmountChargedAuctionCurrency
    /// </summary>
    public Double? AmountChargedAuctionCurrency
    {
        get { return this.m_AmountChargedAuctionCurrency; }
        set { this.m_AmountChargedAuctionCurrency = value; }
    }

    /// <summary>
    /// AmountChargedAuctionCurrencyUnadjusted
    /// </summary>
    public Double? AmountChargedAuctionCurrencyUnadjusted
    {
        get { return this.m_AmountChargedAuctionCurrencyUnadjusted; }
        set { this.m_AmountChargedAuctionCurrencyUnadjusted = value; }
    }

    /// <summary>
    /// AmountChargedConstantUSDExchangeRt
    /// </summary>
    public Double? AmountChargedConstantUSDExchangeRt
    {
        get { return this.m_AmountChargedConstantUSDExchangeRt; }
        set { this.m_AmountChargedConstantUSDExchangeRt = value; }
    }

    /// <summary>
    /// AmountChargedInPublisherCurrency
    /// </summary>
    public Double? AmountChargedInPublisherCurrency
    {
        get { return this.m_AmountChargedInPublisherCurrency; }
        set { this.m_AmountChargedInPublisherCurrency = value; }
    }

    /// <summary>
    /// AmountChargedLanguageCurrency
    /// </summary>
    public Int32? AmountChargedLanguageCurrency
    {
        get { return this.m_AmountChargedLanguageCurrency; }
        set { this.m_AmountChargedLanguageCurrency = value; }
    }

    /// <summary>
    /// { IsObsolete = true; ObsoleteMessage = "Use AmountChargedAuctionCurrency for  high    precision" };
    /// </summary>
    public Double? AmountChargedUSDMonthlyExchangeRt
    {
        get { return this.m_AmountChargedUSDMonthlyExchangeRt; }
        set { this.m_AmountChargedUSDMonthlyExchangeRt = value; }
    }

    /// <summary>
    /// BiddedKeyword
    /// </summary>
    public String BiddedKeyword
    {
        get { return this.m_BiddedKeyword; }
        set { this.m_BiddedKeyword = value; }
    }

    /// <summary>
    /// BiddedKeywordId
    /// </summary>
    public Int32? BiddedKeywordId
    {
        get { return this.m_BiddedKeywordId; }
        set { this.m_BiddedKeywordId = value; }
    }

    /// <summary>
    /// BiddedMatchTypeId
    /// </summary>
    public SByte? BiddedMatchTypeId
    {
        get { return this.m_BiddedMatchTypeId; }
        set { this.m_BiddedMatchTypeId = value; }
    }

    /// <summary>
    /// BusinessLocationId
    /// </summary>
    public Int32? BusinessLocationId
    {
        get { return this.m_BusinessLocationId; }
        set { this.m_BusinessLocationId = value; }
    }

    /// <summary>
    /// CampaignId
    /// </summary>
    public UInt64? CampaignId
    {
        get { return this.m_CampaignId; }
        set { this.m_CampaignId = value; }
    }

    /// <summary>
    /// { IsEnabled = false };
    /// </summary>
    public Int32? CampaignTimeZoneId
    {
        get { return this.m_CampaignTimeZoneId; }
        set { this.m_CampaignTimeZoneId = value; }
    }

    /// <summary>
    /// CampaignTZDayId
    /// </summary>
    public Int16? CampaignTZDayId
    {
        get { return this.m_CampaignTZDayId; }
        set { this.m_CampaignTZDayId = value; }
    }

    /// <summary>
    /// CampaignTZHourNum
    /// </summary>
    public SByte? CampaignTZHourNum
    {
        get { return this.m_CampaignTZHourNum; }
        set { this.m_CampaignTZHourNum = value; }
    }

    /// <summary>
    /// CleanKeywordHash
    /// </summary>
    public String CleanKeywordHash
    {
        get { return this.m_CleanKeywordHash; }
        set { this.m_CleanKeywordHash = value; }
    }

    /// <summary>
    /// CurrencyId
    /// </summary>
    public Int16? CurrencyId
    {
        get { return this.m_CurrencyId; }
        set { this.m_CurrencyId = value; }
    }

    /// <summary>
    /// CustomerId
    /// </summary>
    public Int32? CustomerId
    {
        get { return this.m_CustomerId; }
        set { this.m_CustomerId = value; }
    }

    /// <summary>
    /// DeliveryEngineRank
    /// </summary>
    public Int16? DeliveryEngineRank
    {
        get { return this.m_DeliveryEngineRank; }
        set { this.m_DeliveryEngineRank = value; }
    }

    /// <summary>
    /// EstimatedPagePosition
    /// </summary>
    public String EstimatedPagePosition
    {
        get { return this.m_EstimatedPagePosition; }
        set { this.m_EstimatedPagePosition = value; }
    }

    /// <summary>
    /// ExtendedMatchTypeId
    /// </summary>
    public SByte? ExtendedMatchTypeId
    {
        get { return this.m_ExtendedMatchTypeId; }
        set { this.m_ExtendedMatchTypeId = value; }
    }

    /// <summary>
    /// GleamedAdDelivered
    /// </summary>
    public SByte? GleamedAdDelivered
    {
        get { return this.m_GleamedAdDelivered; }
        set { this.m_GleamedAdDelivered = value; }
    }

    /// <summary>
    /// KeywordScore
    /// </summary>
    public Int16? KeywordScore
    {
        get { return this.m_KeywordScore; }
        set { this.m_KeywordScore = value; }
    }

    /// <summary>
    /// KeywordSourceBitmap
    /// </summary>
    public Int32? KeywordSourceBitmap
    {
        get { return this.m_KeywordSourceBitmap; }
        set { this.m_KeywordSourceBitmap = value; }
    }

    /// <summary>
    /// vectoringTypeId
    /// </summary>
    public SByte? vectoringTypeId
    {
        get { return this.m_vectoringTypeId; }
        set { this.m_vectoringTypeId = value; }
    }

    /// <summary>
    /// OnlineFraudQualityBand
    /// </summary>
    public SByte? OnlineFraudQualityBand
    {
        get { return this.m_OnlineFraudQualityBand; }
        set { this.m_OnlineFraudQualityBand = value; }
    }

    /// <summary>
    /// MatchScore
    /// </summary>
    public Int32? MatchScore
    {
        get { return this.m_MatchScore; }
        set { this.m_MatchScore = value; }
    }

    /// <summary>
    /// MatchTypeId
    /// </summary>
    public Int32? MatchTypeId
    {
        get { return this.m_MatchTypeId; }
        set { this.m_MatchTypeId = value; }
    }

    /// <summary>
    /// MSRevenueAdvertiserCurrency
    /// </summary>
    public Double? MSRevenueAdvertiserCurrency
    {
        get { return this.m_MSRevenueAdvertiserCurrency; }
        set { this.m_MSRevenueAdvertiserCurrency = value; }
    }

    /// <summary>
    /// MSRevenueUSD
    /// </summary>
    public Double? MSRevenueUSD
    {
        get { return this.m_MSRevenueUSD; }
        set { this.m_MSRevenueUSD = value; }
    }

    /// <summary>
    /// OperationalCostAllowanceAdvertiserCurrency
    /// </summary>
    public Double? OperationalCostAllowanceAdvertiserCurrency
    {
        get { return this.m_OperationalCostAllowanceAdvertiserCurrency; }
        set { this.m_OperationalCostAllowanceAdvertiserCurrency = value; }
    }

    /// <summary>
    /// OperationalCostAllowanceUSD
    /// </summary>
    public Double? OperationalCostAllowanceUSD
    {
        get { return this.m_OperationalCostAllowanceUSD; }
        set { this.m_OperationalCostAllowanceUSD = value; }
    }

    /// <summary>
    /// OrderId
    /// </summary>
    public UInt64? OrderId
    {
        get { return this.m_OrderId; }
        set { this.m_OrderId = value; }
    }

    /// <summary>
    /// { IsEnabled = false };
    /// </summary>
    public String PagePosition
    {
        get { return this.m_PagePosition; }
        set { this.m_PagePosition = value; }
    }

    /// <summary>
    /// PricingModelId
    /// </summary>
    public Int16? PricingModelId
    {
        get { return this.m_PricingModelId; }
        set { this.m_PricingModelId = value; }
    }

    /// <summary>
    /// ProbabilityOfClick
    /// </summary>
    public Int16? ProbabilityOfClick
    {
        get { return this.m_ProbabilityOfClick; }
        set { this.m_ProbabilityOfClick = value; }
    }

    /// <summary>
    /// ProductId
    /// </summary>
    public Int32? ProductId
    {
        get { return this.m_ProductId; }
        set { this.m_ProductId = value; }
    }

    /// <summary>
    /// PublisherEarningsAdvertiserCurrency
    /// </summary>
    public Double? PublisherEarningsAdvertiserCurrency
    {
        get { return this.m_PublisherEarningsAdvertiserCurrency; }
        set { this.m_PublisherEarningsAdvertiserCurrency = value; }
    }

    /// <summary>
    /// PublisherEarningsPublisherCurrency
    /// </summary>
    public Double? PublisherEarningsPublisherCurrency
    {
        get { return this.m_PublisherEarningsPublisherCurrency; }
        set { this.m_PublisherEarningsPublisherCurrency = value; }
    }

    /// <summary>
    /// PublisherEarningsUSD
    /// </summary>
    public Double? PublisherEarningsUSD
    {
        get { return this.m_PublisherEarningsUSD; }
        set { this.m_PublisherEarningsUSD = value; }
    }

    /// <summary>
    /// RankScore
    /// </summary>
    public UInt32? RankScore
    {
        get { return this.m_RankScore; }
        set { this.m_RankScore = value; }
    }

    /// <summary>
    /// RelativePosition
    /// </summary>
    public SByte? RelativePosition
    {
        get { return this.m_RelativePosition; }
        set { this.m_RelativePosition = value; }
    }

    /// <summary>
    /// SellableNodeId
    /// </summary>
    public Int32? SellableNodeId
    {
        get { return this.m_SellableNodeId; }
        set { this.m_SellableNodeId = value; }
    }

    /// <summary>
    /// SmartPricingModelId
    /// </summary>
    public Int32? SmartPricingModelId
    {
        get { return this.m_SmartPricingModelId; }
        set { this.m_SmartPricingModelId = value; }
    }

    /// <summary>
    /// { IsObsolete = true; ObsoleteMessage = "Use PageView.SmartPricingModelId" };
    /// </summary>
    public String SmartPricingRuleId
    {
        get { return this.m_SmartPricingRuleId; }
        set { this.m_SmartPricingRuleId = value; }
    }

    /// <summary>
    /// { IsObsolete = true; ObsoleteMessage = "Use PageView.SmartPricingRuleId" };
    /// </summary>
    public String TokenRatioString
    {
        get { return this.m_TokenRatioString; }
        set { this.m_TokenRatioString = value; }
    }

    /// <summary>
    /// WinningSegmentId
    /// </summary>
    public Int32? WinningSegmentId
    {
        get { return this.m_WinningSegmentId; }
        set { this.m_WinningSegmentId = value; }
    }

    /// <summary>
    /// TargetedLocationType
    /// </summary>
    public Byte? TargetedLocationType
    {
        get { return this.m_TargetedLocationType; }
        set { this.m_TargetedLocationType = value; }
    }

    /// <summary>
    /// RenderedLayoutId
    /// </summary>
    public UInt16 RenderedLayoutId
    {
        get { return this.m_RenderedLayoutId; }
        set { this.m_RenderedLayoutId = value; }
    }

    /// <summary>
    /// End of Ad impression Data Click Data
    /// </summary>
    public Int32? ExchangeRateDayId
    {
        get { return this.m_ExchangeRateDayId; }
        set { this.m_ExchangeRateDayId = value; }
    }

    /// <summary>
    /// AdExtensionId
    /// </summary>
    public Int64? AdExtensionId
    {
        get { return this.m_AdExtensionId; }
        set { this.m_AdExtensionId = value; }
    }

    /// <summary>
    /// AdExtensionItemId
    /// </summary>
    public Int64? AdExtensionItemId
    {
        get { return this.m_AdExtensionItemId; }
        set { this.m_AdExtensionItemId = value; }
    }

    /// <summary>
    /// AdExtensionItemRenderedLayoutId
    /// </summary>
    public UInt16? AdExtensionItemRenderedLayoutId
    {
        get { return this.m_AdExtensionItemRenderedLayoutId; }
        set { this.m_AdExtensionItemRenderedLayoutId = value; }
    }

    /// <summary>
    /// AdExtensionVersionId
    /// </summary>
    public Int16 AdExtensionVersionId
    {
        get { return this.m_AdExtensionVersionId; }
        set { this.m_AdExtensionVersionId = value; }
    }

    /// <summary>
    /// AdExtensionTypeId
    /// </summary>
    public Int16? AdExtensionTypeId
    {
        get { return this.m_AdExtensionTypeId; }
        set { this.m_AdExtensionTypeId = value; }
    }

    /// <summary>
    /// AdExtensionRenderedLayoutId
    /// </summary>
    public UInt16? AdExtensionRenderedLayoutId
    {
        get { return this.m_AdExtensionRenderedLayoutId; }
        set { this.m_AdExtensionRenderedLayoutId = value; }
    }

    /// <summary>
    /// Click_ClientIP
    /// </summary>
    public String Click_ClientIP
    {
        get { return this.m_Click_ClientIP; }
        set { this.m_Click_ClientIP = value; }
    }

    /// <summary>
    /// Click_DateTime
    /// </summary>
    public Int64? Click_DateTime
    {
        get { return this.m_Click_DateTime; }
        set { this.m_Click_DateTime = value; }
    }

    /// <summary>
    /// ElementName
    /// </summary>
    public String ElementName
    {
        get { return this.m_ElementName; }
        set { this.m_ElementName = value; }
    }

    /// <summary>
    /// IsMR
    /// </summary>
    public Boolean IsMR
    {
        get { return this.m_IsMR; }
        set { this.m_IsMR = value; }
    }

    /// <summary>
    /// LocationIds
    /// </summary>
    public List<Int32> LocationIds
    {
        get { return this.m_LocationIds; }
        set { this.m_LocationIds = value; }
    }

    /// <summary>
    /// { Length = 5 };
    /// </summary>
    public SByte? ListingTypeId
    {
        get { return this.m_ListingTypeId; }
        set { this.m_ListingTypeId = value; }
    }

    /// <summary>
    /// ClickId
    /// </summary>
    public String ClickId
    {
        get { return this.m_ClickId; }
        set { this.m_ClickId = value; }
    }

    /// <summary>
    /// Fraud info
    /// </summary>
    public Int32 FraudModelId
    {
        get { return this.m_FraudModelId; }
        set { this.m_FraudModelId = value; }
    }

    /// <summary>
    /// FraudQualityBand
    /// </summary>
    public SByte FraudQualityBand
    {
        get { return this.m_FraudQualityBand; }
        set { this.m_FraudQualityBand = value; }
    }

    /// <summary>
    /// FraudQualityBand_test
    /// </summary>
    public String FraudQualityBand_test
    {
        get { return this.m_FraudQualityBand_test; }
        set { this.m_FraudQualityBand_test = value; }
    }

    /// <summary>
    /// FraudQualityType
    /// </summary>
    public Int16 FraudQualityType
    {
        get { return this.m_FraudQualityType; }
        set { this.m_FraudQualityType = value; }
    }

    /// <summary>
    /// FraudReason
    /// </summary>
    public List<Byte> FraudReason
    {
        get { return this.m_FraudReason; }
        set { this.m_FraudReason = value; }
    }

    /// <summary>
    /// FraudRuleId
    /// </summary>
    public String FraudRuleId
    {
        get { return this.m_FraudRuleId; }
        set { this.m_FraudRuleId = value; }
    }

    /// <summary>
    /// FraudScore
    /// </summary>
    public Double FraudScore
    {
        get { return this.m_FraudScore; }
        set { this.m_FraudScore = value; }
    }

    /// <summary>
    /// Page View details
    /// </summary>
    public Int64? LogDelta
    {
        get { return this.m_LogDelta; }
        set { this.m_LogDelta = value; }
    }

    /// <summary>
    /// RGUID
    /// </summary>
    public global::Microsoft.Bond.GUID RGUID
    {
        get { return this.m_RGUID; }
        set { this.m_RGUID = value; }
    }

    /// <summary>
    /// PSCFRClickData
    /// </summary>
    public global::SparkSchema.PSCFRSpark PSCFRClickData
    {
        get { return this.m_PSCFRClickData; }
        set { this.m_PSCFRClickData = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata ABTestingTypes_meta = new Metadata();
        public static readonly Metadata ABTestName_meta = new Metadata();
        public static readonly Metadata ActualImpRange_meta = new Metadata();
        public static readonly Metadata ActualMLImpRange_meta = new Metadata();
        public static readonly Metadata AdLanguage_meta = new Metadata();
        public static readonly Metadata AdServerStatusId_meta = new Metadata();
        public static readonly Metadata AdUnitId_meta = new Metadata();
        public static readonly Metadata AdUnitTypeId_meta = new Metadata();
        public static readonly Metadata AlgorithmFilterId_meta = new Metadata();
        public static readonly Metadata AlgorithmId_meta = new Metadata();
        public static readonly Metadata Click_OrderItemId_meta = new Metadata();
        public static readonly Metadata AskedAdCnt_meta = new Metadata();
        public static readonly Metadata BaseImpRange_meta = new Metadata();
        public static readonly Metadata BidDensity_meta = new Metadata();
        public static readonly Metadata BingVertical_meta = new Metadata();
        public static readonly Metadata BucketId_meta = new Metadata();
        public static readonly Metadata CategoryId_meta = new Metadata();
        public static readonly Metadata ChannelIds_meta = new Metadata();
        public static readonly Metadata CID_meta = new Metadata();
        public static readonly Metadata PageView_ClientIP_meta = new Metadata();
        public static readonly Metadata ClientTimeZoneId_meta = new Metadata();
        public static readonly Metadata CodePage_meta = new Metadata();
        public static readonly Metadata DateTime_meta = new Metadata();
        public static readonly Metadata DeviceId_meta = new Metadata();
        public static readonly Metadata DeviceOSId_meta = new Metadata();
        public static readonly Metadata DeviceOSName_meta = new Metadata();
        public static readonly Metadata DeviceOSVersion_meta = new Metadata();
        public static readonly Metadata DeviceTypeId_meta = new Metadata();
        public static readonly Metadata DisputedFlag_meta = new Metadata();
        public static readonly Metadata DistributionChannelId_meta = new Metadata();
        public static readonly Metadata DumpId_meta = new Metadata();
        public static readonly Metadata DynamicParamNormalizedURL_meta = new Metadata();
        public static readonly Metadata ECPIThresholdValue_meta = new Metadata();
        public static readonly Metadata ExperimentId_meta = new Metadata();
        public static readonly Metadata FlowId_meta = new Metadata();
        public static readonly Metadata FormCode_meta = new Metadata();
        public static readonly Metadata GleamedAdRange_meta = new Metadata();
        public static readonly Metadata IsMI_meta = new Metadata();
        public static readonly Metadata LogSequence_meta = new Metadata();
        public static readonly Metadata LogServerName_meta = new Metadata();
        public static readonly Metadata MakeId_meta = new Metadata();
        public static readonly Metadata MarketplaceClassificationId_meta = new Metadata();
        public static readonly Metadata MediumId_meta = new Metadata();
        public static readonly Metadata MIMUID_meta = new Metadata();
        public static readonly Metadata MTID_meta = new Metadata();
        public static readonly Metadata NetworkId_meta = new Metadata();
        public static readonly Metadata NonNormalizedQueryString_meta = new Metadata();
        public static readonly Metadata NumNonPforP_meta = new Metadata();
        public static readonly Metadata OriginalAdUnitId_meta = new Metadata();
        public static readonly Metadata OriginalPropertyId_meta = new Metadata();
        public static readonly Metadata OriginalPublisherId_meta = new Metadata();
        public static readonly Metadata OSId_meta = new Metadata();
        public static readonly Metadata WebsiteCountry_meta = new Metadata();
        public static readonly Metadata PageNumber_meta = new Metadata();
        public static readonly Metadata PageSectionId_meta = new Metadata();
        public static readonly Metadata PageType_meta = new Metadata();
        public static readonly Metadata PartnerCode_meta = new Metadata();
        public static readonly Metadata PassportAgeGroupId_meta = new Metadata();
        public static readonly Metadata PassportBDay_meta = new Metadata();
        public static readonly Metadata PassportFlags_meta = new Metadata();
        public static readonly Metadata PassportGenderId_meta = new Metadata();
        public static readonly Metadata PassportRegion_meta = new Metadata();
        public static readonly Metadata PassportZipCode_meta = new Metadata();
        public static readonly Metadata PCPB_meta = new Metadata();
        public static readonly Metadata PropertyId_meta = new Metadata();
        public static readonly Metadata PubConfigGroupId_meta = new Metadata();
        public static readonly Metadata PublisherAccountId_meta = new Metadata();
        public static readonly Metadata QueryLocationIds_meta = new Metadata();
        public static readonly Metadata PublisherAccountTimeZone_meta = new Metadata();
        public static readonly Metadata PublisherCurrencyId_meta = new Metadata();
        public static readonly Metadata PublisherId_meta = new Metadata();
        public static readonly Metadata PublisherOwnerId_meta = new Metadata();
        public static readonly Metadata QueryPhrase_meta = new Metadata();
        public static readonly Metadata ReasonCode_meta = new Metadata();
        public static readonly Metadata RelatedToAccountId_meta = new Metadata();
        public static readonly Metadata RelationshipId_meta = new Metadata();
        public static readonly Metadata IncomingPublisherWebSiteCountry_meta = new Metadata();
        public static readonly Metadata ReturnedAdCnt_meta = new Metadata();
        public static readonly Metadata RSNId_meta = new Metadata();
        public static readonly Metadata SearchFormId_meta = new Metadata();
        public static readonly Metadata SearchSiteVersionId_meta = new Metadata();
        public static readonly Metadata SmartPricing_meta = new Metadata();
        public static readonly Metadata SmartPricingDiscountAlgoId_meta = new Metadata();
        public static readonly Metadata SmartPricingDiscountVersion_meta = new Metadata();
        public static readonly Metadata SmartPricingQueryCategoryAlgoId_meta = new Metadata();
        public static readonly Metadata SmartPricingQueryCategoryId_meta = new Metadata();
        public static readonly Metadata StartPosition_meta = new Metadata();
        public static readonly Metadata SubCategoryId_meta = new Metadata();
        public static readonly Metadata TerminalNodeId_meta = new Metadata();
        public static readonly Metadata TPAdUId_meta = new Metadata();
        public static readonly Metadata TrafficPartitionCode_meta = new Metadata();
        public static readonly Metadata TypeTag_meta = new Metadata();
        public static readonly Metadata DeviceOSId2_meta = new Metadata();
        public static readonly Metadata AbsPosition_meta = new Metadata();
        public static readonly Metadata ActualBid_meta = new Metadata();
        public static readonly Metadata AdDisplayTypeId_meta = new Metadata();
        public static readonly Metadata AdjustedRank_meta = new Metadata();
        public static readonly Metadata AdLayoutId_meta = new Metadata();
        public static readonly Metadata AdvertiserAccountId_meta = new Metadata();
        public static readonly Metadata AdvertiserAccountPreferredCurrencyId_meta = new Metadata();
        public static readonly Metadata AdvertiserNetAmountInPublisherCurrency_meta = new Metadata();
        public static readonly Metadata AdvertiserOwnerId_meta = new Metadata();
        public static readonly Metadata AmountChargedAdvertiserCurrency_meta = new Metadata();
        public static readonly Metadata AmountChargedAuctionCurrency_meta = new Metadata();
        public static readonly Metadata AmountChargedAuctionCurrencyUnadjusted_meta = new Metadata();
        public static readonly Metadata AmountChargedConstantUSDExchangeRt_meta = new Metadata();
        public static readonly Metadata AmountChargedInPublisherCurrency_meta = new Metadata();
        public static readonly Metadata AmountChargedLanguageCurrency_meta = new Metadata();
        public static readonly Metadata AmountChargedUSDMonthlyExchangeRt_meta = new Metadata();
        public static readonly Metadata BiddedKeyword_meta = new Metadata();
        public static readonly Metadata BiddedKeywordId_meta = new Metadata();
        public static readonly Metadata BiddedMatchTypeId_meta = new Metadata();
        public static readonly Metadata BusinessLocationId_meta = new Metadata();
        public static readonly Metadata CampaignId_meta = new Metadata();
        public static readonly Metadata CampaignTimeZoneId_meta = new Metadata();
        public static readonly Metadata CampaignTZDayId_meta = new Metadata();
        public static readonly Metadata CampaignTZHourNum_meta = new Metadata();
        public static readonly Metadata CleanKeywordHash_meta = new Metadata();
        public static readonly Metadata CurrencyId_meta = new Metadata();
        public static readonly Metadata CustomerId_meta = new Metadata();
        public static readonly Metadata DeliveryEngineRank_meta = new Metadata();
        public static readonly Metadata EstimatedPagePosition_meta = new Metadata();
        public static readonly Metadata ExtendedMatchTypeId_meta = new Metadata();
        public static readonly Metadata GleamedAdDelivered_meta = new Metadata();
        public static readonly Metadata KeywordScore_meta = new Metadata();
        public static readonly Metadata KeywordSourceBitmap_meta = new Metadata();
        public static readonly Metadata vectoringTypeId_meta = new Metadata();
        public static readonly Metadata OnlineFraudQualityBand_meta = new Metadata();
        public static readonly Metadata MatchScore_meta = new Metadata();
        public static readonly Metadata MatchTypeId_meta = new Metadata();
        public static readonly Metadata MSRevenueAdvertiserCurrency_meta = new Metadata();
        public static readonly Metadata MSRevenueUSD_meta = new Metadata();
        public static readonly Metadata OperationalCostAllowanceAdvertiserCurrency_meta = new Metadata();
        public static readonly Metadata OperationalCostAllowanceUSD_meta = new Metadata();
        public static readonly Metadata OrderId_meta = new Metadata();
        public static readonly Metadata PagePosition_meta = new Metadata();
        public static readonly Metadata PricingModelId_meta = new Metadata();
        public static readonly Metadata ProbabilityOfClick_meta = new Metadata();
        public static readonly Metadata ProductId_meta = new Metadata();
        public static readonly Metadata PublisherEarningsAdvertiserCurrency_meta = new Metadata();
        public static readonly Metadata PublisherEarningsPublisherCurrency_meta = new Metadata();
        public static readonly Metadata PublisherEarningsUSD_meta = new Metadata();
        public static readonly Metadata RankScore_meta = new Metadata();
        public static readonly Metadata RelativePosition_meta = new Metadata();
        public static readonly Metadata SellableNodeId_meta = new Metadata();
        public static readonly Metadata SmartPricingModelId_meta = new Metadata();
        public static readonly Metadata SmartPricingRuleId_meta = new Metadata();
        public static readonly Metadata TokenRatioString_meta = new Metadata();
        public static readonly Metadata WinningSegmentId_meta = new Metadata();
        public static readonly Metadata TargetedLocationType_meta = new Metadata();
        public static readonly Metadata RenderedLayoutId_meta = new Metadata();
        public static readonly Metadata ExchangeRateDayId_meta = new Metadata();
        public static readonly Metadata AdExtensionId_meta = new Metadata();
        public static readonly Metadata AdExtensionItemId_meta = new Metadata();
        public static readonly Metadata AdExtensionItemRenderedLayoutId_meta = new Metadata();
        public static readonly Metadata AdExtensionVersionId_meta = new Metadata();
        public static readonly Metadata AdExtensionTypeId_meta = new Metadata();
        public static readonly Metadata AdExtensionRenderedLayoutId_meta = new Metadata();
        public static readonly Metadata Click_ClientIP_meta = new Metadata();
        public static readonly Metadata Click_DateTime_meta = new Metadata();
        public static readonly Metadata ElementName_meta = new Metadata();
        public static readonly Metadata IsMR_meta = new Metadata();
        public static readonly Metadata LocationIds_meta = new Metadata();
        public static readonly Metadata ListingTypeId_meta = new Metadata();
        public static readonly Metadata ClickId_meta = new Metadata();
        public static readonly Metadata FraudModelId_meta = new Metadata();
        public static readonly Metadata FraudQualityBand_meta = new Metadata();
        public static readonly Metadata FraudQualityBand_test_meta = new Metadata();
        public static readonly Metadata FraudQualityType_meta = new Metadata();
        public static readonly Metadata FraudReason_meta = new Metadata();
        public static readonly Metadata FraudRuleId_meta = new Metadata();
        public static readonly Metadata FraudScore_meta = new Metadata();
        public static readonly Metadata LogDelta_meta = new Metadata();
        public static readonly Metadata RGUID_meta = new Metadata();
        public static readonly Metadata PSCFRClickData_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("SearchClickDetailSpark");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "SparkSchema." + meta.name;


            // ABTestingTypes
            ABTestingTypes_meta.name = "ABTestingTypes";
            ABTestingTypes_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ABTestName
            ABTestName_meta.name = "ABTestName";
            ABTestName_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ActualImpRange
            ActualImpRange_meta.name = "ActualImpRange";
            ActualImpRange_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ActualMLImpRange
            ActualMLImpRange_meta.name = "ActualMLImpRange";
            ActualMLImpRange_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdLanguage
            AdLanguage_meta.name = "AdLanguage";
            AdLanguage_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdServerStatusId
            AdServerStatusId_meta.name = "AdServerStatusId";
            AdServerStatusId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdUnitId
            AdUnitId_meta.name = "AdUnitId";
            AdUnitId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            AdUnitId_meta.default_value.int_value = 0;

            // AdUnitTypeId
            AdUnitTypeId_meta.name = "AdUnitTypeId";
            AdUnitTypeId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            AdUnitTypeId_meta.default_value.int_value = 0;

            // AlgorithmFilterId
            AlgorithmFilterId_meta.name = "AlgorithmFilterId";
            AlgorithmFilterId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AlgorithmId
            AlgorithmId_meta.name = "AlgorithmId";
            AlgorithmId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Click_OrderItemId
            Click_OrderItemId_meta.name = "Click_OrderItemId";
            Click_OrderItemId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AskedAdCnt
            AskedAdCnt_meta.name = "AskedAdCnt";
            AskedAdCnt_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // BaseImpRange
            BaseImpRange_meta.name = "BaseImpRange";
            BaseImpRange_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // BidDensity
            BidDensity_meta.name = "BidDensity";
            BidDensity_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // BingVertical
            BingVertical_meta.name = "BingVertical";
            BingVertical_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // BucketId
            BucketId_meta.name = "BucketId";
            BucketId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // CategoryId
            CategoryId_meta.name = "CategoryId";
            CategoryId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ChannelIds
            ChannelIds_meta.name = "ChannelIds";
            ChannelIds_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // CID
            CID_meta.name = "CID";
            CID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PageView_ClientIP
            PageView_ClientIP_meta.name = "PageView_ClientIP";
            PageView_ClientIP_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ClientTimeZoneId
            ClientTimeZoneId_meta.name = "ClientTimeZoneId";
            ClientTimeZoneId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // CodePage
            CodePage_meta.name = "CodePage";
            CodePage_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // DateTime
            DateTime_meta.name = "DateTime";
            DateTime_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // DeviceId
            DeviceId_meta.name = "DeviceId";
            DeviceId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // DeviceOSId
            DeviceOSId_meta.name = "DeviceOSId";
            DeviceOSId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // DeviceOSName
            DeviceOSName_meta.name = "DeviceOSName";
            DeviceOSName_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // DeviceOSVersion
            DeviceOSVersion_meta.name = "DeviceOSVersion";
            DeviceOSVersion_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // DeviceTypeId
            DeviceTypeId_meta.name = "DeviceTypeId";
            DeviceTypeId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // DisputedFlag
            DisputedFlag_meta.name = "DisputedFlag";
            DisputedFlag_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // DistributionChannelId
            DistributionChannelId_meta.name = "DistributionChannelId";
            DistributionChannelId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // DumpId
            DumpId_meta.name = "DumpId";
            DumpId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // DynamicParamNormalizedURL
            DynamicParamNormalizedURL_meta.name = "DynamicParamNormalizedURL";
            DynamicParamNormalizedURL_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ECPIThresholdValue
            ECPIThresholdValue_meta.name = "ECPIThresholdValue";
            ECPIThresholdValue_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ExperimentId
            ExperimentId_meta.name = "ExperimentId";
            ExperimentId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // FlowId
            FlowId_meta.name = "FlowId";
            FlowId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // FormCode
            FormCode_meta.name = "FormCode";
            FormCode_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // GleamedAdRange
            GleamedAdRange_meta.name = "GleamedAdRange";
            GleamedAdRange_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // IsMI
            IsMI_meta.name = "IsMI";
            IsMI_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            IsMI_meta.default_value.uint_value = 0;

            // LogSequence
            LogSequence_meta.name = "LogSequence";
            LogSequence_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // LogServerName
            LogServerName_meta.name = "LogServerName";
            LogServerName_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // MakeId
            MakeId_meta.name = "MakeId";
            MakeId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // MarketplaceClassificationId
            MarketplaceClassificationId_meta.name = "MarketplaceClassificationId";
            MarketplaceClassificationId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            MarketplaceClassificationId_meta.default_value.uint_value = 2;

            // MediumId
            MediumId_meta.name = "MediumId";
            MediumId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // MIMUID
            MIMUID_meta.name = "MIMUID";
            MIMUID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // MTID
            MTID_meta.name = "MTID";
            MTID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // NetworkId
            NetworkId_meta.name = "NetworkId";
            NetworkId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            NetworkId_meta.default_value.int_value = 0;

            // NonNormalizedQueryString
            NonNormalizedQueryString_meta.name = "NonNormalizedQueryString";
            NonNormalizedQueryString_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // NumNonPforP
            NumNonPforP_meta.name = "NumNonPforP";
            NumNonPforP_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // OriginalAdUnitId
            OriginalAdUnitId_meta.name = "OriginalAdUnitId";
            OriginalAdUnitId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // OriginalPropertyId
            OriginalPropertyId_meta.name = "OriginalPropertyId";
            OriginalPropertyId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // OriginalPublisherId
            OriginalPublisherId_meta.name = "OriginalPublisherId";
            OriginalPublisherId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // OSId
            OSId_meta.name = "OSId";
            OSId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // WebsiteCountry
            WebsiteCountry_meta.name = "WebsiteCountry";
            WebsiteCountry_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PageNumber
            PageNumber_meta.name = "PageNumber";
            PageNumber_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PageSectionId
            PageSectionId_meta.name = "PageSectionId";
            PageSectionId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PageType
            PageType_meta.name = "PageType";
            PageType_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PartnerCode
            PartnerCode_meta.name = "PartnerCode";
            PartnerCode_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PassportAgeGroupId
            PassportAgeGroupId_meta.name = "PassportAgeGroupId";
            PassportAgeGroupId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PassportBDay
            PassportBDay_meta.name = "PassportBDay";
            PassportBDay_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PassportFlags
            PassportFlags_meta.name = "PassportFlags";
            PassportFlags_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PassportGenderId
            PassportGenderId_meta.name = "PassportGenderId";
            PassportGenderId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PassportRegion
            PassportRegion_meta.name = "PassportRegion";
            PassportRegion_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PassportZipCode
            PassportZipCode_meta.name = "PassportZipCode";
            PassportZipCode_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PCPB
            PCPB_meta.name = "PCPB";
            PCPB_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PropertyId
            PropertyId_meta.name = "PropertyId";
            PropertyId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PubConfigGroupId
            PubConfigGroupId_meta.name = "PubConfigGroupId";
            PubConfigGroupId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PublisherAccountId
            PublisherAccountId_meta.name = "PublisherAccountId";
            PublisherAccountId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // QueryLocationIds
            QueryLocationIds_meta.name = "QueryLocationIds";
            QueryLocationIds_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PublisherAccountTimeZone
            PublisherAccountTimeZone_meta.name = "PublisherAccountTimeZone";
            PublisherAccountTimeZone_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            PublisherAccountTimeZone_meta.default_value.int_value = 0;

            // PublisherCurrencyId
            PublisherCurrencyId_meta.name = "PublisherCurrencyId";
            PublisherCurrencyId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PublisherId
            PublisherId_meta.name = "PublisherId";
            PublisherId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PublisherOwnerId
            PublisherOwnerId_meta.name = "PublisherOwnerId";
            PublisherOwnerId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // QueryPhrase
            QueryPhrase_meta.name = "QueryPhrase";
            QueryPhrase_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ReasonCode
            ReasonCode_meta.name = "ReasonCode";
            ReasonCode_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // RelatedToAccountId
            RelatedToAccountId_meta.name = "RelatedToAccountId";
            RelatedToAccountId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            RelatedToAccountId_meta.default_value.int_value = 0;

            // RelationshipId
            RelationshipId_meta.name = "RelationshipId";
            RelationshipId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            RelationshipId_meta.default_value.int_value = 0;

            // IncomingPublisherWebSiteCountry
            IncomingPublisherWebSiteCountry_meta.name = "IncomingPublisherWebSiteCountry";
            IncomingPublisherWebSiteCountry_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ReturnedAdCnt
            ReturnedAdCnt_meta.name = "ReturnedAdCnt";
            ReturnedAdCnt_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // RSNId
            RSNId_meta.name = "RSNId";
            RSNId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // SearchFormId
            SearchFormId_meta.name = "SearchFormId";
            SearchFormId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // SearchSiteVersionId
            SearchSiteVersionId_meta.name = "SearchSiteVersionId";
            SearchSiteVersionId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // SmartPricing
            SmartPricing_meta.name = "SmartPricing";
            SmartPricing_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // SmartPricingDiscountAlgoId
            SmartPricingDiscountAlgoId_meta.name = "SmartPricingDiscountAlgoId";
            SmartPricingDiscountAlgoId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // SmartPricingDiscountVersion
            SmartPricingDiscountVersion_meta.name = "SmartPricingDiscountVersion";
            SmartPricingDiscountVersion_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // SmartPricingQueryCategoryAlgoId
            SmartPricingQueryCategoryAlgoId_meta.name = "SmartPricingQueryCategoryAlgoId";
            SmartPricingQueryCategoryAlgoId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // SmartPricingQueryCategoryId
            SmartPricingQueryCategoryId_meta.name = "SmartPricingQueryCategoryId";
            SmartPricingQueryCategoryId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // StartPosition
            StartPosition_meta.name = "StartPosition";
            StartPosition_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // SubCategoryId
            SubCategoryId_meta.name = "SubCategoryId";
            SubCategoryId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // TerminalNodeId
            TerminalNodeId_meta.name = "TerminalNodeId";
            TerminalNodeId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            TerminalNodeId_meta.default_value.int_value = 0;

            // TPAdUId
            TPAdUId_meta.name = "TPAdUId";
            TPAdUId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            TPAdUId_meta.default_value.int_value = 0;

            // TrafficPartitionCode
            TrafficPartitionCode_meta.name = "TrafficPartitionCode";
            TrafficPartitionCode_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // TypeTag
            TypeTag_meta.name = "TypeTag";
            TypeTag_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // DeviceOSId2
            DeviceOSId2_meta.name = "DeviceOSId2";
            DeviceOSId2_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AbsPosition
            AbsPosition_meta.name = "AbsPosition";
            AbsPosition_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ActualBid
            ActualBid_meta.name = "ActualBid";
            ActualBid_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdDisplayTypeId
            AdDisplayTypeId_meta.name = "AdDisplayTypeId";
            AdDisplayTypeId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdjustedRank
            AdjustedRank_meta.name = "AdjustedRank";
            AdjustedRank_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdLayoutId
            AdLayoutId_meta.name = "AdLayoutId";
            AdLayoutId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdvertiserAccountId
            AdvertiserAccountId_meta.name = "AdvertiserAccountId";
            AdvertiserAccountId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdvertiserAccountPreferredCurrencyId
            AdvertiserAccountPreferredCurrencyId_meta.name = "AdvertiserAccountPreferredCurrencyId";
            AdvertiserAccountPreferredCurrencyId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdvertiserNetAmountInPublisherCurrency
            AdvertiserNetAmountInPublisherCurrency_meta.name = "AdvertiserNetAmountInPublisherCurrency";
            AdvertiserNetAmountInPublisherCurrency_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdvertiserOwnerId
            AdvertiserOwnerId_meta.name = "AdvertiserOwnerId";
            AdvertiserOwnerId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AmountChargedAdvertiserCurrency
            AmountChargedAdvertiserCurrency_meta.name = "AmountChargedAdvertiserCurrency";
            AmountChargedAdvertiserCurrency_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AmountChargedAuctionCurrency
            AmountChargedAuctionCurrency_meta.name = "AmountChargedAuctionCurrency";
            AmountChargedAuctionCurrency_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AmountChargedAuctionCurrencyUnadjusted
            AmountChargedAuctionCurrencyUnadjusted_meta.name = "AmountChargedAuctionCurrencyUnadjusted";
            AmountChargedAuctionCurrencyUnadjusted_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AmountChargedConstantUSDExchangeRt
            AmountChargedConstantUSDExchangeRt_meta.name = "AmountChargedConstantUSDExchangeRt";
            AmountChargedConstantUSDExchangeRt_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AmountChargedInPublisherCurrency
            AmountChargedInPublisherCurrency_meta.name = "AmountChargedInPublisherCurrency";
            AmountChargedInPublisherCurrency_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AmountChargedLanguageCurrency
            AmountChargedLanguageCurrency_meta.name = "AmountChargedLanguageCurrency";
            AmountChargedLanguageCurrency_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AmountChargedUSDMonthlyExchangeRt
            AmountChargedUSDMonthlyExchangeRt_meta.name = "AmountChargedUSDMonthlyExchangeRt";
            AmountChargedUSDMonthlyExchangeRt_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // BiddedKeyword
            BiddedKeyword_meta.name = "BiddedKeyword";
            BiddedKeyword_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // BiddedKeywordId
            BiddedKeywordId_meta.name = "BiddedKeywordId";
            BiddedKeywordId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // BiddedMatchTypeId
            BiddedMatchTypeId_meta.name = "BiddedMatchTypeId";
            BiddedMatchTypeId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // BusinessLocationId
            BusinessLocationId_meta.name = "BusinessLocationId";
            BusinessLocationId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // CampaignId
            CampaignId_meta.name = "CampaignId";
            CampaignId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // CampaignTimeZoneId
            CampaignTimeZoneId_meta.name = "CampaignTimeZoneId";
            CampaignTimeZoneId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // CampaignTZDayId
            CampaignTZDayId_meta.name = "CampaignTZDayId";
            CampaignTZDayId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // CampaignTZHourNum
            CampaignTZHourNum_meta.name = "CampaignTZHourNum";
            CampaignTZHourNum_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // CleanKeywordHash
            CleanKeywordHash_meta.name = "CleanKeywordHash";
            CleanKeywordHash_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // CurrencyId
            CurrencyId_meta.name = "CurrencyId";
            CurrencyId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // CustomerId
            CustomerId_meta.name = "CustomerId";
            CustomerId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // DeliveryEngineRank
            DeliveryEngineRank_meta.name = "DeliveryEngineRank";
            DeliveryEngineRank_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // EstimatedPagePosition
            EstimatedPagePosition_meta.name = "EstimatedPagePosition";
            EstimatedPagePosition_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ExtendedMatchTypeId
            ExtendedMatchTypeId_meta.name = "ExtendedMatchTypeId";
            ExtendedMatchTypeId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // GleamedAdDelivered
            GleamedAdDelivered_meta.name = "GleamedAdDelivered";
            GleamedAdDelivered_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // KeywordScore
            KeywordScore_meta.name = "KeywordScore";
            KeywordScore_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // KeywordSourceBitmap
            KeywordSourceBitmap_meta.name = "KeywordSourceBitmap";
            KeywordSourceBitmap_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // vectoringTypeId
            vectoringTypeId_meta.name = "vectoringTypeId";
            vectoringTypeId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // OnlineFraudQualityBand
            OnlineFraudQualityBand_meta.name = "OnlineFraudQualityBand";
            OnlineFraudQualityBand_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // MatchScore
            MatchScore_meta.name = "MatchScore";
            MatchScore_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // MatchTypeId
            MatchTypeId_meta.name = "MatchTypeId";
            MatchTypeId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // MSRevenueAdvertiserCurrency
            MSRevenueAdvertiserCurrency_meta.name = "MSRevenueAdvertiserCurrency";
            MSRevenueAdvertiserCurrency_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // MSRevenueUSD
            MSRevenueUSD_meta.name = "MSRevenueUSD";
            MSRevenueUSD_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // OperationalCostAllowanceAdvertiserCurrency
            OperationalCostAllowanceAdvertiserCurrency_meta.name = "OperationalCostAllowanceAdvertiserCurrency";
            OperationalCostAllowanceAdvertiserCurrency_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // OperationalCostAllowanceUSD
            OperationalCostAllowanceUSD_meta.name = "OperationalCostAllowanceUSD";
            OperationalCostAllowanceUSD_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // OrderId
            OrderId_meta.name = "OrderId";
            OrderId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PagePosition
            PagePosition_meta.name = "PagePosition";
            PagePosition_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PricingModelId
            PricingModelId_meta.name = "PricingModelId";
            PricingModelId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ProbabilityOfClick
            ProbabilityOfClick_meta.name = "ProbabilityOfClick";
            ProbabilityOfClick_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ProductId
            ProductId_meta.name = "ProductId";
            ProductId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PublisherEarningsAdvertiserCurrency
            PublisherEarningsAdvertiserCurrency_meta.name = "PublisherEarningsAdvertiserCurrency";
            PublisherEarningsAdvertiserCurrency_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PublisherEarningsPublisherCurrency
            PublisherEarningsPublisherCurrency_meta.name = "PublisherEarningsPublisherCurrency";
            PublisherEarningsPublisherCurrency_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PublisherEarningsUSD
            PublisherEarningsUSD_meta.name = "PublisherEarningsUSD";
            PublisherEarningsUSD_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // RankScore
            RankScore_meta.name = "RankScore";
            RankScore_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // RelativePosition
            RelativePosition_meta.name = "RelativePosition";
            RelativePosition_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // SellableNodeId
            SellableNodeId_meta.name = "SellableNodeId";
            SellableNodeId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // SmartPricingModelId
            SmartPricingModelId_meta.name = "SmartPricingModelId";
            SmartPricingModelId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // SmartPricingRuleId
            SmartPricingRuleId_meta.name = "SmartPricingRuleId";
            SmartPricingRuleId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // TokenRatioString
            TokenRatioString_meta.name = "TokenRatioString";
            TokenRatioString_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // WinningSegmentId
            WinningSegmentId_meta.name = "WinningSegmentId";
            WinningSegmentId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // TargetedLocationType
            TargetedLocationType_meta.name = "TargetedLocationType";
            TargetedLocationType_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // RenderedLayoutId
            RenderedLayoutId_meta.name = "RenderedLayoutId";
            RenderedLayoutId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            RenderedLayoutId_meta.default_value.uint_value = 0;

            // ExchangeRateDayId
            ExchangeRateDayId_meta.name = "ExchangeRateDayId";
            ExchangeRateDayId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdExtensionId
            AdExtensionId_meta.name = "AdExtensionId";
            AdExtensionId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdExtensionItemId
            AdExtensionItemId_meta.name = "AdExtensionItemId";
            AdExtensionItemId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdExtensionItemRenderedLayoutId
            AdExtensionItemRenderedLayoutId_meta.name = "AdExtensionItemRenderedLayoutId";
            AdExtensionItemRenderedLayoutId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdExtensionVersionId
            AdExtensionVersionId_meta.name = "AdExtensionVersionId";
            AdExtensionVersionId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            AdExtensionVersionId_meta.default_value.int_value = 0;

            // AdExtensionTypeId
            AdExtensionTypeId_meta.name = "AdExtensionTypeId";
            AdExtensionTypeId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdExtensionRenderedLayoutId
            AdExtensionRenderedLayoutId_meta.name = "AdExtensionRenderedLayoutId";
            AdExtensionRenderedLayoutId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Click_ClientIP
            Click_ClientIP_meta.name = "Click_ClientIP";
            Click_ClientIP_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Click_DateTime
            Click_DateTime_meta.name = "Click_DateTime";
            Click_DateTime_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ElementName
            ElementName_meta.name = "ElementName";
            ElementName_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // IsMR
            IsMR_meta.name = "IsMR";
            IsMR_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            IsMR_meta.default_value.uint_value = 0;

            // LocationIds
            LocationIds_meta.name = "LocationIds";
            LocationIds_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ListingTypeId
            ListingTypeId_meta.name = "ListingTypeId";
            ListingTypeId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ClickId
            ClickId_meta.name = "ClickId";
            ClickId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // FraudModelId
            FraudModelId_meta.name = "FraudModelId";
            FraudModelId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            FraudModelId_meta.default_value.int_value = 0;

            // FraudQualityBand
            FraudQualityBand_meta.name = "FraudQualityBand";
            FraudQualityBand_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            FraudQualityBand_meta.default_value.int_value = 0;

            // FraudQualityBand_test
            FraudQualityBand_test_meta.name = "FraudQualityBand_test";
            FraudQualityBand_test_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // FraudQualityType
            FraudQualityType_meta.name = "FraudQualityType";
            FraudQualityType_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            FraudQualityType_meta.default_value.int_value = 0;

            // FraudReason
            FraudReason_meta.name = "FraudReason";
            FraudReason_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // FraudRuleId
            FraudRuleId_meta.name = "FraudRuleId";
            FraudRuleId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // FraudScore
            FraudScore_meta.name = "FraudScore";
            FraudScore_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            FraudScore_meta.default_value.double_value = 0;

            // LogDelta
            LogDelta_meta.name = "LogDelta";
            LogDelta_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // RGUID
            RGUID_meta.name = "RGUID";
            RGUID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // PSCFRClickData
            PSCFRClickData_meta.name = "PSCFRClickData";
            PSCFRClickData_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int ABTestingTypes = 1;
        public const int ABTestName = 2;
        public const int ActualImpRange = 3;
        public const int ActualMLImpRange = 4;
        public const int AdLanguage = 5;
        public const int AdServerStatusId = 6;
        public const int AdUnitId = 7;
        public const int AdUnitTypeId = 8;
        public const int AlgorithmFilterId = 9;
        public const int AlgorithmId = 10;
        public const int Click_OrderItemId = 11;
        public const int AskedAdCnt = 12;
        public const int BaseImpRange = 13;
        public const int BidDensity = 14;
        public const int BingVertical = 15;
        public const int BucketId = 16;
        public const int CategoryId = 17;
        public const int ChannelIds = 18;
        public const int CID = 19;
        public const int PageView_ClientIP = 20;
        public const int ClientTimeZoneId = 21;
        public const int CodePage = 22;
        public const int DateTime = 23;
        public const int DeviceId = 24;
        public const int DeviceOSId = 25;
        public const int DeviceOSName = 26;
        public const int DeviceOSVersion = 27;
        public const int DeviceTypeId = 28;
        public const int DisputedFlag = 29;
        public const int DistributionChannelId = 30;
        public const int DumpId = 31;
        public const int DynamicParamNormalizedURL = 32;
        public const int ECPIThresholdValue = 33;
        public const int ExperimentId = 34;
        public const int FlowId = 35;
        public const int FormCode = 36;
        public const int GleamedAdRange = 37;
        public const int IsMI = 38;
        public const int LogSequence = 39;
        public const int LogServerName = 40;
        public const int MakeId = 41;
        public const int MarketplaceClassificationId = 42;
        public const int MediumId = 43;
        public const int MIMUID = 44;
        public const int MTID = 45;
        public const int NetworkId = 46;
        public const int NonNormalizedQueryString = 47;
        public const int NumNonPforP = 48;
        public const int OriginalAdUnitId = 49;
        public const int OriginalPropertyId = 50;
        public const int OriginalPublisherId = 51;
        public const int OSId = 52;
        public const int WebsiteCountry = 53;
        public const int PageNumber = 54;
        public const int PageSectionId = 55;
        public const int PageType = 56;
        public const int PartnerCode = 57;
        public const int PassportAgeGroupId = 58;
        public const int PassportBDay = 59;
        public const int PassportFlags = 60;
        public const int PassportGenderId = 61;
        public const int PassportRegion = 62;
        public const int PassportZipCode = 63;
        public const int PCPB = 64;
        public const int PropertyId = 65;
        public const int PubConfigGroupId = 66;
        public const int PublisherAccountId = 67;
        public const int QueryLocationIds = 68;
        public const int PublisherAccountTimeZone = 69;
        public const int PublisherCurrencyId = 70;
        public const int PublisherId = 71;
        public const int PublisherOwnerId = 72;
        public const int QueryPhrase = 73;
        public const int ReasonCode = 74;
        public const int RelatedToAccountId = 75;
        public const int RelationshipId = 76;
        public const int IncomingPublisherWebSiteCountry = 77;
        public const int ReturnedAdCnt = 78;
        public const int RSNId = 79;
        public const int SearchFormId = 80;
        public const int SearchSiteVersionId = 81;
        public const int SmartPricing = 82;
        public const int SmartPricingDiscountAlgoId = 83;
        public const int SmartPricingDiscountVersion = 84;
        public const int SmartPricingQueryCategoryAlgoId = 85;
        public const int SmartPricingQueryCategoryId = 86;
        public const int StartPosition = 87;
        public const int SubCategoryId = 88;
        public const int TerminalNodeId = 89;
        public const int TPAdUId = 90;
        public const int TrafficPartitionCode = 91;
        public const int TypeTag = 92;
        public const int DeviceOSId2 = 93;
        public const int AbsPosition = 94;
        public const int ActualBid = 95;
        public const int AdDisplayTypeId = 96;
        public const int AdjustedRank = 97;
        public const int AdLayoutId = 98;
        public const int AdvertiserAccountId = 100;
        public const int AdvertiserAccountPreferredCurrencyId = 101;
        public const int AdvertiserNetAmountInPublisherCurrency = 102;
        public const int AdvertiserOwnerId = 103;
        public const int AmountChargedAdvertiserCurrency = 104;
        public const int AmountChargedAuctionCurrency = 105;
        public const int AmountChargedAuctionCurrencyUnadjusted = 106;
        public const int AmountChargedConstantUSDExchangeRt = 107;
        public const int AmountChargedInPublisherCurrency = 108;
        public const int AmountChargedLanguageCurrency = 109;
        public const int AmountChargedUSDMonthlyExchangeRt = 110;
        public const int BiddedKeyword = 111;
        public const int BiddedKeywordId = 112;
        public const int BiddedMatchTypeId = 113;
        public const int BusinessLocationId = 114;
        public const int CampaignId = 115;
        public const int CampaignTimeZoneId = 116;
        public const int CampaignTZDayId = 117;
        public const int CampaignTZHourNum = 118;
        public const int CleanKeywordHash = 119;
        public const int CurrencyId = 120;
        public const int CustomerId = 121;
        public const int DeliveryEngineRank = 122;
        public const int EstimatedPagePosition = 123;
        public const int ExtendedMatchTypeId = 124;
        public const int GleamedAdDelivered = 125;
        public const int KeywordScore = 126;
        public const int KeywordSourceBitmap = 127;
        public const int vectoringTypeId = 128;
        public const int OnlineFraudQualityBand = 129;
        public const int MatchScore = 130;
        public const int MatchTypeId = 131;
        public const int MSRevenueAdvertiserCurrency = 132;
        public const int MSRevenueUSD = 133;
        public const int OperationalCostAllowanceAdvertiserCurrency = 134;
        public const int OperationalCostAllowanceUSD = 135;
        public const int OrderId = 136;
        public const int PagePosition = 137;
        public const int PricingModelId = 138;
        public const int ProbabilityOfClick = 139;
        public const int ProductId = 140;
        public const int PublisherEarningsAdvertiserCurrency = 141;
        public const int PublisherEarningsPublisherCurrency = 142;
        public const int PublisherEarningsUSD = 143;
        public const int RankScore = 144;
        public const int RelativePosition = 145;
        public const int SellableNodeId = 146;
        public const int SmartPricingModelId = 147;
        public const int SmartPricingRuleId = 148;
        public const int TokenRatioString = 149;
        public const int WinningSegmentId = 150;
        public const int TargetedLocationType = 151;
        public const int RenderedLayoutId = 152;
        public const int ExchangeRateDayId = 153;
        public const int AdExtensionId = 154;
        public const int AdExtensionItemId = 155;
        public const int AdExtensionItemRenderedLayoutId = 156;
        public const int AdExtensionVersionId = 157;
        public const int AdExtensionTypeId = 158;
        public const int AdExtensionRenderedLayoutId = 159;
        public const int Click_ClientIP = 160;
        public const int Click_DateTime = 161;
        public const int ElementName = 162;
        public const int IsMR = 163;
        public const int LocationIds = 164;
        public const int ListingTypeId = 165;
        public const int ClickId = 166;
        public const int FraudModelId = 167;
        public const int FraudQualityBand = 168;
        public const int FraudQualityBand_test = 169;
        public const int FraudQualityType = 170;
        public const int FraudReason = 171;
        public const int FraudRuleId = 172;
        public const int FraudScore = 173;
        public const int LogDelta = 174;
        public const int RGUID = 175;
        public const int PSCFRClickData = 176;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_ABTestingTypes = "ABTestingTypes";
        public const String s_ABTestName = "ABTestName";
        public const String s_ActualImpRange = "ActualImpRange";
        public const String s_ActualMLImpRange = "ActualMLImpRange";
        public const String s_AdLanguage = "AdLanguage";
        public const String s_AdServerStatusId = "AdServerStatusId";
        public const String s_AdUnitId = "AdUnitId";
        public const String s_AdUnitTypeId = "AdUnitTypeId";
        public const String s_AlgorithmFilterId = "AlgorithmFilterId";
        public const String s_AlgorithmId = "AlgorithmId";
        public const String s_Click_OrderItemId = "Click_OrderItemId";
        public const String s_AskedAdCnt = "AskedAdCnt";
        public const String s_BaseImpRange = "BaseImpRange";
        public const String s_BidDensity = "BidDensity";
        public const String s_BingVertical = "BingVertical";
        public const String s_BucketId = "BucketId";
        public const String s_CategoryId = "CategoryId";
        public const String s_ChannelIds = "ChannelIds";
        public const String s_CID = "CID";
        public const String s_PageView_ClientIP = "PageView_ClientIP";
        public const String s_ClientTimeZoneId = "ClientTimeZoneId";
        public const String s_CodePage = "CodePage";
        public const String s_DateTime = "DateTime";
        public const String s_DeviceId = "DeviceId";
        public const String s_DeviceOSId = "DeviceOSId";
        public const String s_DeviceOSName = "DeviceOSName";
        public const String s_DeviceOSVersion = "DeviceOSVersion";
        public const String s_DeviceTypeId = "DeviceTypeId";
        public const String s_DisputedFlag = "DisputedFlag";
        public const String s_DistributionChannelId = "DistributionChannelId";
        public const String s_DumpId = "DumpId";
        public const String s_DynamicParamNormalizedURL = "DynamicParamNormalizedURL";
        public const String s_ECPIThresholdValue = "ECPIThresholdValue";
        public const String s_ExperimentId = "ExperimentId";
        public const String s_FlowId = "FlowId";
        public const String s_FormCode = "FormCode";
        public const String s_GleamedAdRange = "GleamedAdRange";
        public const String s_IsMI = "IsMI";
        public const String s_LogSequence = "LogSequence";
        public const String s_LogServerName = "LogServerName";
        public const String s_MakeId = "MakeId";
        public const String s_MarketplaceClassificationId = "MarketplaceClassificationId";
        public const String s_MediumId = "MediumId";
        public const String s_MIMUID = "MIMUID";
        public const String s_MTID = "MTID";
        public const String s_NetworkId = "NetworkId";
        public const String s_NonNormalizedQueryString = "NonNormalizedQueryString";
        public const String s_NumNonPforP = "NumNonPforP";
        public const String s_OriginalAdUnitId = "OriginalAdUnitId";
        public const String s_OriginalPropertyId = "OriginalPropertyId";
        public const String s_OriginalPublisherId = "OriginalPublisherId";
        public const String s_OSId = "OSId";
        public const String s_WebsiteCountry = "WebsiteCountry";
        public const String s_PageNumber = "PageNumber";
        public const String s_PageSectionId = "PageSectionId";
        public const String s_PageType = "PageType";
        public const String s_PartnerCode = "PartnerCode";
        public const String s_PassportAgeGroupId = "PassportAgeGroupId";
        public const String s_PassportBDay = "PassportBDay";
        public const String s_PassportFlags = "PassportFlags";
        public const String s_PassportGenderId = "PassportGenderId";
        public const String s_PassportRegion = "PassportRegion";
        public const String s_PassportZipCode = "PassportZipCode";
        public const String s_PCPB = "PCPB";
        public const String s_PropertyId = "PropertyId";
        public const String s_PubConfigGroupId = "PubConfigGroupId";
        public const String s_PublisherAccountId = "PublisherAccountId";
        public const String s_QueryLocationIds = "QueryLocationIds";
        public const String s_PublisherAccountTimeZone = "PublisherAccountTimeZone";
        public const String s_PublisherCurrencyId = "PublisherCurrencyId";
        public const String s_PublisherId = "PublisherId";
        public const String s_PublisherOwnerId = "PublisherOwnerId";
        public const String s_QueryPhrase = "QueryPhrase";
        public const String s_ReasonCode = "ReasonCode";
        public const String s_RelatedToAccountId = "RelatedToAccountId";
        public const String s_RelationshipId = "RelationshipId";
        public const String s_IncomingPublisherWebSiteCountry = "IncomingPublisherWebSiteCountry";
        public const String s_ReturnedAdCnt = "ReturnedAdCnt";
        public const String s_RSNId = "RSNId";
        public const String s_SearchFormId = "SearchFormId";
        public const String s_SearchSiteVersionId = "SearchSiteVersionId";
        public const String s_SmartPricing = "SmartPricing";
        public const String s_SmartPricingDiscountAlgoId = "SmartPricingDiscountAlgoId";
        public const String s_SmartPricingDiscountVersion = "SmartPricingDiscountVersion";
        public const String s_SmartPricingQueryCategoryAlgoId = "SmartPricingQueryCategoryAlgoId";
        public const String s_SmartPricingQueryCategoryId = "SmartPricingQueryCategoryId";
        public const String s_StartPosition = "StartPosition";
        public const String s_SubCategoryId = "SubCategoryId";
        public const String s_TerminalNodeId = "TerminalNodeId";
        public const String s_TPAdUId = "TPAdUId";
        public const String s_TrafficPartitionCode = "TrafficPartitionCode";
        public const String s_TypeTag = "TypeTag";
        public const String s_DeviceOSId2 = "DeviceOSId2";
        public const String s_AbsPosition = "AbsPosition";
        public const String s_ActualBid = "ActualBid";
        public const String s_AdDisplayTypeId = "AdDisplayTypeId";
        public const String s_AdjustedRank = "AdjustedRank";
        public const String s_AdLayoutId = "AdLayoutId";
        public const String s_AdvertiserAccountId = "AdvertiserAccountId";
        public const String s_AdvertiserAccountPreferredCurrencyId = "AdvertiserAccountPreferredCurrencyId";
        public const String s_AdvertiserNetAmountInPublisherCurrency = "AdvertiserNetAmountInPublisherCurrency";
        public const String s_AdvertiserOwnerId = "AdvertiserOwnerId";
        public const String s_AmountChargedAdvertiserCurrency = "AmountChargedAdvertiserCurrency";
        public const String s_AmountChargedAuctionCurrency = "AmountChargedAuctionCurrency";
        public const String s_AmountChargedAuctionCurrencyUnadjusted = "AmountChargedAuctionCurrencyUnadjusted";
        public const String s_AmountChargedConstantUSDExchangeRt = "AmountChargedConstantUSDExchangeRt";
        public const String s_AmountChargedInPublisherCurrency = "AmountChargedInPublisherCurrency";
        public const String s_AmountChargedLanguageCurrency = "AmountChargedLanguageCurrency";
        public const String s_AmountChargedUSDMonthlyExchangeRt = "AmountChargedUSDMonthlyExchangeRt";
        public const String s_BiddedKeyword = "BiddedKeyword";
        public const String s_BiddedKeywordId = "BiddedKeywordId";
        public const String s_BiddedMatchTypeId = "BiddedMatchTypeId";
        public const String s_BusinessLocationId = "BusinessLocationId";
        public const String s_CampaignId = "CampaignId";
        public const String s_CampaignTimeZoneId = "CampaignTimeZoneId";
        public const String s_CampaignTZDayId = "CampaignTZDayId";
        public const String s_CampaignTZHourNum = "CampaignTZHourNum";
        public const String s_CleanKeywordHash = "CleanKeywordHash";
        public const String s_CurrencyId = "CurrencyId";
        public const String s_CustomerId = "CustomerId";
        public const String s_DeliveryEngineRank = "DeliveryEngineRank";
        public const String s_EstimatedPagePosition = "EstimatedPagePosition";
        public const String s_ExtendedMatchTypeId = "ExtendedMatchTypeId";
        public const String s_GleamedAdDelivered = "GleamedAdDelivered";
        public const String s_KeywordScore = "KeywordScore";
        public const String s_KeywordSourceBitmap = "KeywordSourceBitmap";
        public const String s_vectoringTypeId = "vectoringTypeId";
        public const String s_OnlineFraudQualityBand = "OnlineFraudQualityBand";
        public const String s_MatchScore = "MatchScore";
        public const String s_MatchTypeId = "MatchTypeId";
        public const String s_MSRevenueAdvertiserCurrency = "MSRevenueAdvertiserCurrency";
        public const String s_MSRevenueUSD = "MSRevenueUSD";
        public const String s_OperationalCostAllowanceAdvertiserCurrency = "OperationalCostAllowanceAdvertiserCurrency";
        public const String s_OperationalCostAllowanceUSD = "OperationalCostAllowanceUSD";
        public const String s_OrderId = "OrderId";
        public const String s_PagePosition = "PagePosition";
        public const String s_PricingModelId = "PricingModelId";
        public const String s_ProbabilityOfClick = "ProbabilityOfClick";
        public const String s_ProductId = "ProductId";
        public const String s_PublisherEarningsAdvertiserCurrency = "PublisherEarningsAdvertiserCurrency";
        public const String s_PublisherEarningsPublisherCurrency = "PublisherEarningsPublisherCurrency";
        public const String s_PublisherEarningsUSD = "PublisherEarningsUSD";
        public const String s_RankScore = "RankScore";
        public const String s_RelativePosition = "RelativePosition";
        public const String s_SellableNodeId = "SellableNodeId";
        public const String s_SmartPricingModelId = "SmartPricingModelId";
        public const String s_SmartPricingRuleId = "SmartPricingRuleId";
        public const String s_TokenRatioString = "TokenRatioString";
        public const String s_WinningSegmentId = "WinningSegmentId";
        public const String s_TargetedLocationType = "TargetedLocationType";
        public const String s_RenderedLayoutId = "RenderedLayoutId";
        public const String s_ExchangeRateDayId = "ExchangeRateDayId";
        public const String s_AdExtensionId = "AdExtensionId";
        public const String s_AdExtensionItemId = "AdExtensionItemId";
        public const String s_AdExtensionItemRenderedLayoutId = "AdExtensionItemRenderedLayoutId";
        public const String s_AdExtensionVersionId = "AdExtensionVersionId";
        public const String s_AdExtensionTypeId = "AdExtensionTypeId";
        public const String s_AdExtensionRenderedLayoutId = "AdExtensionRenderedLayoutId";
        public const String s_Click_ClientIP = "Click_ClientIP";
        public const String s_Click_DateTime = "Click_DateTime";
        public const String s_ElementName = "ElementName";
        public const String s_IsMR = "IsMR";
        public const String s_LocationIds = "LocationIds";
        public const String s_ListingTypeId = "ListingTypeId";
        public const String s_ClickId = "ClickId";
        public const String s_FraudModelId = "FraudModelId";
        public const String s_FraudQualityBand = "FraudQualityBand";
        public const String s_FraudQualityBand_test = "FraudQualityBand_test";
        public const String s_FraudQualityType = "FraudQualityType";
        public const String s_FraudReason = "FraudReason";
        public const String s_FraudRuleId = "FraudRuleId";
        public const String s_FraudScore = "FraudScore";
        public const String s_LogDelta = "LogDelta";
        public const String s_RGUID = "RGUID";
        public const String s_PSCFRClickData = "PSCFRClickData";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public SearchClickDetailSpark()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_ABTestingTypes = default(Int16?);
        m_ABTestName = string.Empty;
        m_ActualImpRange = default(SByte?);
        m_ActualMLImpRange = default(SByte?);
        m_AdLanguage = string.Empty;
        m_AdServerStatusId = default(Byte?);
        m_AdUnitId = 0;
        m_AdUnitTypeId = 0;
        m_AlgorithmFilterId = default(Int32?);
        m_AlgorithmId = default(Int32?);
        m_Click_OrderItemId = default(Int64?);
        m_AskedAdCnt = default(Int16?);
        m_BaseImpRange = default(SByte?);
        m_BidDensity = default(Double?);
        m_BingVertical = string.Empty;
        m_BucketId = string.Empty;
        m_CategoryId = default(Int16?);
        if (m_ChannelIds == null)
        {
            m_ChannelIds = new List<Int32>();
        }
        else
        {
            m_ChannelIds.Clear();
        }
        m_CID = string.Empty;
        m_PageView_ClientIP = string.Empty;
        m_ClientTimeZoneId = default(Int16?);
        m_CodePage = default(Int32?);
        m_DateTime = default(Int64?);
        m_DeviceId = default(Int32?);
        m_DeviceOSId = default(Int32?);
        m_DeviceOSName = string.Empty;
        m_DeviceOSVersion = string.Empty;
        m_DeviceTypeId = default(SByte?);
        m_DisputedFlag = default(Boolean?);
        m_DistributionChannelId = default(Int16?);
        m_DumpId = default(Int32?);
        m_DynamicParamNormalizedURL = string.Empty;
        m_ECPIThresholdValue = default(Int32?);
        m_ExperimentId = default(Int32?);
        m_FlowId = default(Int16?);
        m_FormCode = string.Empty;
        m_GleamedAdRange = default(SByte?);
        m_IsMI = false;
        m_LogSequence = default(SByte?);
        m_LogServerName = string.Empty;
        m_MakeId = default(Int32?);
        m_MarketplaceClassificationId = 2;
        m_MediumId = default(Int16?);
        m_MIMUID = string.Empty;
        m_MTID = default(Int32?);
        m_NetworkId = 0;
        m_NonNormalizedQueryString = string.Empty;
        m_NumNonPforP = default(Int32?);
        m_OriginalAdUnitId = default(Int32?);
        m_OriginalPropertyId = default(Int32?);
        m_OriginalPublisherId = default(Int32?);
        m_OSId = default(Int32?);
        m_WebsiteCountry = string.Empty;
        m_PageNumber = default(SByte?);
        m_PageSectionId = default(SByte?);
        m_PageType = default(Int16?);
        m_PartnerCode = string.Empty;
        m_PassportAgeGroupId = string.Empty;
        m_PassportBDay = string.Empty;
        m_PassportFlags = string.Empty;
        m_PassportGenderId = string.Empty;
        m_PassportRegion = string.Empty;
        m_PassportZipCode = string.Empty;
        m_PCPB = string.Empty;
        m_PropertyId = default(Int32?);
        m_PubConfigGroupId = default(UInt32?);
        m_PublisherAccountId = default(Int32?);
        if (m_QueryLocationIds == null)
        {
            m_QueryLocationIds = new List<Int32>();
        }
        else
        {
            m_QueryLocationIds.Clear();
        }
        m_PublisherAccountTimeZone = 0;
        m_PublisherCurrencyId = default(Int16?);
        m_PublisherId = default(Int32?);
        m_PublisherOwnerId = default(Byte?);
        m_QueryPhrase = string.Empty;
        m_ReasonCode = default(Int32?);
        m_RelatedToAccountId = 0;
        m_RelationshipId = 0;
        m_IncomingPublisherWebSiteCountry = string.Empty;
        m_ReturnedAdCnt = default(Int16?);
        m_RSNId = default(Int32?);
        m_SearchFormId = default(Int32?);
        m_SearchSiteVersionId = default(Int16?);
        m_SmartPricing = string.Empty;
        m_SmartPricingDiscountAlgoId = default(UInt16?);
        m_SmartPricingDiscountVersion = default(UInt32?);
        m_SmartPricingQueryCategoryAlgoId = default(UInt16?);
        m_SmartPricingQueryCategoryId = default(Int32?);
        m_StartPosition = default(Int32?);
        m_SubCategoryId = default(Int16?);
        m_TerminalNodeId = 0;
        m_TPAdUId = 0;
        m_TrafficPartitionCode = string.Empty;
        m_TypeTag = string.Empty;
        m_DeviceOSId2 = default(Int32?);
        m_AbsPosition = default(Int32?);
        m_ActualBid = default(Int32?);
        m_AdDisplayTypeId = default(Int32?);
        m_AdjustedRank = default(Int32?);
        m_AdLayoutId = default(SByte?);
        m_AdvertiserAccountId = default(Int32?);
        m_AdvertiserAccountPreferredCurrencyId = default(Int16?);
        m_AdvertiserNetAmountInPublisherCurrency = default(Double?);
        m_AdvertiserOwnerId = default(Byte?);
        m_AmountChargedAdvertiserCurrency = default(Double?);
        m_AmountChargedAuctionCurrency = default(Double?);
        m_AmountChargedAuctionCurrencyUnadjusted = default(Double?);
        m_AmountChargedConstantUSDExchangeRt = default(Double?);
        m_AmountChargedInPublisherCurrency = default(Double?);
        m_AmountChargedLanguageCurrency = default(Int32?);
        m_AmountChargedUSDMonthlyExchangeRt = default(Double?);
        m_BiddedKeyword = string.Empty;
        m_BiddedKeywordId = default(Int32?);
        m_BiddedMatchTypeId = default(SByte?);
        m_BusinessLocationId = default(Int32?);
        m_CampaignId = default(UInt64?);
        m_CampaignTimeZoneId = default(Int32?);
        m_CampaignTZDayId = default(Int16?);
        m_CampaignTZHourNum = default(SByte?);
        m_CleanKeywordHash = string.Empty;
        m_CurrencyId = default(Int16?);
        m_CustomerId = default(Int32?);
        m_DeliveryEngineRank = default(Int16?);
        m_EstimatedPagePosition = string.Empty;
        m_ExtendedMatchTypeId = default(SByte?);
        m_GleamedAdDelivered = default(SByte?);
        m_KeywordScore = default(Int16?);
        m_KeywordSourceBitmap = default(Int32?);
        m_vectoringTypeId = default(SByte?);
        m_OnlineFraudQualityBand = default(SByte?);
        m_MatchScore = default(Int32?);
        m_MatchTypeId = default(Int32?);
        m_MSRevenueAdvertiserCurrency = default(Double?);
        m_MSRevenueUSD = default(Double?);
        m_OperationalCostAllowanceAdvertiserCurrency = default(Double?);
        m_OperationalCostAllowanceUSD = default(Double?);
        m_OrderId = default(UInt64?);
        m_PagePosition = string.Empty;
        m_PricingModelId = default(Int16?);
        m_ProbabilityOfClick = default(Int16?);
        m_ProductId = default(Int32?);
        m_PublisherEarningsAdvertiserCurrency = default(Double?);
        m_PublisherEarningsPublisherCurrency = default(Double?);
        m_PublisherEarningsUSD = default(Double?);
        m_RankScore = default(UInt32?);
        m_RelativePosition = default(SByte?);
        m_SellableNodeId = default(Int32?);
        m_SmartPricingModelId = default(Int32?);
        m_SmartPricingRuleId = string.Empty;
        m_TokenRatioString = string.Empty;
        m_WinningSegmentId = default(Int32?);
        m_TargetedLocationType = default(Byte?);
        m_RenderedLayoutId = 0;
        m_ExchangeRateDayId = default(Int32?);
        m_AdExtensionId = default(Int64?);
        m_AdExtensionItemId = default(Int64?);
        m_AdExtensionItemRenderedLayoutId = default(UInt16?);
        m_AdExtensionVersionId = 0;
        m_AdExtensionTypeId = default(Int16?);
        m_AdExtensionRenderedLayoutId = default(UInt16?);
        m_Click_ClientIP = string.Empty;
        m_Click_DateTime = default(Int64?);
        m_ElementName = string.Empty;
        m_IsMR = false;
        if (m_LocationIds == null)
        {
            m_LocationIds = new List<Int32>();
        }
        else
        {
            m_LocationIds.Clear();
        }
        m_ListingTypeId = default(SByte?);
        m_ClickId = string.Empty;
        m_FraudModelId = 0;
        m_FraudQualityBand = 0;
        m_FraudQualityBand_test = string.Empty;
        m_FraudQualityType = 0;
        if (m_FraudReason == null)
        {
            m_FraudReason = new List<Byte>();
        }
        else
        {
            m_FraudReason.Clear();
        }
        m_FraudRuleId = string.Empty;
        m_FraudScore = 0;
        m_LogDelta = default(Int64?);
        m_RGUID = new global::Microsoft.Bond.GUID();
        m_PSCFRClickData = new global::SparkSchema.PSCFRSpark();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::SparkSchema.SearchClickDetailSpark cloned = new global::SparkSchema.SearchClickDetailSpark();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::SparkSchema.SearchClickDetailSpark that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: nullable<int16> ABTestingTypes
        that.ABTestingTypes = this.ABTestingTypes;
        // 2: string ABTestName
        that.ABTestName = this.ABTestName;
        // 3: nullable<int8> ActualImpRange
        that.ActualImpRange = this.ActualImpRange;
        // 4: nullable<int8> ActualMLImpRange
        that.ActualMLImpRange = this.ActualMLImpRange;
        // 5: string AdLanguage
        that.AdLanguage = this.AdLanguage;
        // 6: nullable<uint8> AdServerStatusId
        that.AdServerStatusId = this.AdServerStatusId;
        // 7: int32 AdUnitId
        that.AdUnitId = this.AdUnitId;
        // 8: int8 AdUnitTypeId
        that.AdUnitTypeId = this.AdUnitTypeId;
        // 9: nullable<int32> AlgorithmFilterId
        that.AlgorithmFilterId = this.AlgorithmFilterId;
        // 10: nullable<int32> AlgorithmId
        that.AlgorithmId = this.AlgorithmId;
        // 11: nullable<int64> Click_OrderItemId
        that.Click_OrderItemId = this.Click_OrderItemId;
        // 12: nullable<int16> AskedAdCnt
        that.AskedAdCnt = this.AskedAdCnt;
        // 13: nullable<int8> BaseImpRange
        that.BaseImpRange = this.BaseImpRange;
        // 14: nullable<double> BidDensity
        that.BidDensity = this.BidDensity;
        // 15: string BingVertical
        that.BingVertical = this.BingVertical;
        // 16: string BucketId
        that.BucketId = this.BucketId;
        // 17: nullable<int16> CategoryId
        that.CategoryId = this.CategoryId;
        // 18: vector<int32> ChannelIds
        if (this.ChannelIds != null)
        {
            if (that.ChannelIds == null)
            {
                that.ChannelIds = new List<Int32>();
            }
            else
            {
                that.ChannelIds.Clear();
            }
            foreach (var iter1 in this.ChannelIds)
            {
                Int32 tmpItem2 = default(Int32);
                tmpItem2 = iter1;
                that.ChannelIds.Add(tmpItem2);
            }
        }
        else
        {
            that.ChannelIds = null;
        }
        // 19: string CID
        that.CID = this.CID;
        // 20: string PageView_ClientIP
        that.PageView_ClientIP = this.PageView_ClientIP;
        // 21: nullable<int16> ClientTimeZoneId
        that.ClientTimeZoneId = this.ClientTimeZoneId;
        // 22: nullable<int32> CodePage
        that.CodePage = this.CodePage;
        // 23: nullable<int64> DateTime
        that.DateTime = this.DateTime;
        // 24: nullable<int32> DeviceId
        that.DeviceId = this.DeviceId;
        // 25: nullable<int32> DeviceOSId
        that.DeviceOSId = this.DeviceOSId;
        // 26: string DeviceOSName
        that.DeviceOSName = this.DeviceOSName;
        // 27: string DeviceOSVersion
        that.DeviceOSVersion = this.DeviceOSVersion;
        // 28: nullable<int8> DeviceTypeId
        that.DeviceTypeId = this.DeviceTypeId;
        // 29: nullable<bool> DisputedFlag
        that.DisputedFlag = this.DisputedFlag;
        // 30: nullable<int16> DistributionChannelId
        that.DistributionChannelId = this.DistributionChannelId;
        // 31: nullable<int32> DumpId
        that.DumpId = this.DumpId;
        // 32: string DynamicParamNormalizedURL
        that.DynamicParamNormalizedURL = this.DynamicParamNormalizedURL;
        // 33: nullable<int32> ECPIThresholdValue
        that.ECPIThresholdValue = this.ECPIThresholdValue;
        // 34: nullable<int32> ExperimentId
        that.ExperimentId = this.ExperimentId;
        // 35: nullable<int16> FlowId
        that.FlowId = this.FlowId;
        // 36: string FormCode
        that.FormCode = this.FormCode;
        // 37: nullable<int8> GleamedAdRange
        that.GleamedAdRange = this.GleamedAdRange;
        // 38: bool IsMI
        that.IsMI = this.IsMI;
        // 39: nullable<int8> LogSequence
        that.LogSequence = this.LogSequence;
        // 40: string LogServerName
        that.LogServerName = this.LogServerName;
        // 41: nullable<int32> MakeId
        that.MakeId = this.MakeId;
        // 42: uint8 MarketplaceClassificationId
        that.MarketplaceClassificationId = this.MarketplaceClassificationId;
        // 43: nullable<int16> MediumId
        that.MediumId = this.MediumId;
        // 44: string MIMUID
        that.MIMUID = this.MIMUID;
        // 45: nullable<int32> MTID
        that.MTID = this.MTID;
        // 46: int32 NetworkId
        that.NetworkId = this.NetworkId;
        // 47: string NonNormalizedQueryString
        that.NonNormalizedQueryString = this.NonNormalizedQueryString;
        // 48: nullable<int32> NumNonPforP
        that.NumNonPforP = this.NumNonPforP;
        // 49: nullable<int32> OriginalAdUnitId
        that.OriginalAdUnitId = this.OriginalAdUnitId;
        // 50: nullable<int32> OriginalPropertyId
        that.OriginalPropertyId = this.OriginalPropertyId;
        // 51: nullable<int32> OriginalPublisherId
        that.OriginalPublisherId = this.OriginalPublisherId;
        // 52: nullable<int32> OSId
        that.OSId = this.OSId;
        // 53: string WebsiteCountry
        that.WebsiteCountry = this.WebsiteCountry;
        // 54: nullable<int8> PageNumber
        that.PageNumber = this.PageNumber;
        // 55: nullable<int8> PageSectionId
        that.PageSectionId = this.PageSectionId;
        // 56: nullable<int16> PageType
        that.PageType = this.PageType;
        // 57: string PartnerCode
        that.PartnerCode = this.PartnerCode;
        // 58: string PassportAgeGroupId
        that.PassportAgeGroupId = this.PassportAgeGroupId;
        // 59: string PassportBDay
        that.PassportBDay = this.PassportBDay;
        // 60: string PassportFlags
        that.PassportFlags = this.PassportFlags;
        // 61: string PassportGenderId
        that.PassportGenderId = this.PassportGenderId;
        // 62: string PassportRegion
        that.PassportRegion = this.PassportRegion;
        // 63: string PassportZipCode
        that.PassportZipCode = this.PassportZipCode;
        // 64: string PCPB
        that.PCPB = this.PCPB;
        // 65: nullable<int32> PropertyId
        that.PropertyId = this.PropertyId;
        // 66: nullable<uint32> PubConfigGroupId
        that.PubConfigGroupId = this.PubConfigGroupId;
        // 67: nullable<int32> PublisherAccountId
        that.PublisherAccountId = this.PublisherAccountId;
        // 68: vector<int32> QueryLocationIds
        if (this.QueryLocationIds != null)
        {
            if (that.QueryLocationIds == null)
            {
                that.QueryLocationIds = new List<Int32>();
            }
            else
            {
                that.QueryLocationIds.Clear();
            }
            foreach (var iter3 in this.QueryLocationIds)
            {
                Int32 tmpItem4 = default(Int32);
                tmpItem4 = iter3;
                that.QueryLocationIds.Add(tmpItem4);
            }
        }
        else
        {
            that.QueryLocationIds = null;
        }
        // 69: int32 PublisherAccountTimeZone
        that.PublisherAccountTimeZone = this.PublisherAccountTimeZone;
        // 70: nullable<int16> PublisherCurrencyId
        that.PublisherCurrencyId = this.PublisherCurrencyId;
        // 71: nullable<int32> PublisherId
        that.PublisherId = this.PublisherId;
        // 72: nullable<uint8> PublisherOwnerId
        that.PublisherOwnerId = this.PublisherOwnerId;
        // 73: string QueryPhrase
        that.QueryPhrase = this.QueryPhrase;
        // 74: nullable<int32> ReasonCode
        that.ReasonCode = this.ReasonCode;
        // 75: int32 RelatedToAccountId
        that.RelatedToAccountId = this.RelatedToAccountId;
        // 76: int8 RelationshipId
        that.RelationshipId = this.RelationshipId;
        // 77: string IncomingPublisherWebSiteCountry
        that.IncomingPublisherWebSiteCountry = this.IncomingPublisherWebSiteCountry;
        // 78: nullable<int16> ReturnedAdCnt
        that.ReturnedAdCnt = this.ReturnedAdCnt;
        // 79: nullable<int32> RSNId
        that.RSNId = this.RSNId;
        // 80: nullable<int32> SearchFormId
        that.SearchFormId = this.SearchFormId;
        // 81: nullable<int16> SearchSiteVersionId
        that.SearchSiteVersionId = this.SearchSiteVersionId;
        // 82: string SmartPricing
        that.SmartPricing = this.SmartPricing;
        // 83: nullable<uint16> SmartPricingDiscountAlgoId
        that.SmartPricingDiscountAlgoId = this.SmartPricingDiscountAlgoId;
        // 84: nullable<uint32> SmartPricingDiscountVersion
        that.SmartPricingDiscountVersion = this.SmartPricingDiscountVersion;
        // 85: nullable<uint16> SmartPricingQueryCategoryAlgoId
        that.SmartPricingQueryCategoryAlgoId = this.SmartPricingQueryCategoryAlgoId;
        // 86: nullable<int32> SmartPricingQueryCategoryId
        that.SmartPricingQueryCategoryId = this.SmartPricingQueryCategoryId;
        // 87: nullable<int32> StartPosition
        that.StartPosition = this.StartPosition;
        // 88: nullable<int16> SubCategoryId
        that.SubCategoryId = this.SubCategoryId;
        // 89: int32 TerminalNodeId
        that.TerminalNodeId = this.TerminalNodeId;
        // 90: int32 TPAdUId
        that.TPAdUId = this.TPAdUId;
        // 91: string TrafficPartitionCode
        that.TrafficPartitionCode = this.TrafficPartitionCode;
        // 92: string TypeTag
        that.TypeTag = this.TypeTag;
        // 93: nullable<int32> DeviceOSId2
        that.DeviceOSId2 = this.DeviceOSId2;
        // 94: nullable<int32> AbsPosition
        that.AbsPosition = this.AbsPosition;
        // 95: nullable<int32> ActualBid
        that.ActualBid = this.ActualBid;
        // 96: nullable<int32> AdDisplayTypeId
        that.AdDisplayTypeId = this.AdDisplayTypeId;
        // 97: nullable<int32> AdjustedRank
        that.AdjustedRank = this.AdjustedRank;
        // 98: nullable<int8> AdLayoutId
        that.AdLayoutId = this.AdLayoutId;
        // 100: nullable<int32> AdvertiserAccountId
        that.AdvertiserAccountId = this.AdvertiserAccountId;
        // 101: nullable<int16> AdvertiserAccountPreferredCurrencyId
        that.AdvertiserAccountPreferredCurrencyId = this.AdvertiserAccountPreferredCurrencyId;
        // 102: nullable<double> AdvertiserNetAmountInPublisherCurrency
        that.AdvertiserNetAmountInPublisherCurrency = this.AdvertiserNetAmountInPublisherCurrency;
        // 103: nullable<uint8> AdvertiserOwnerId
        that.AdvertiserOwnerId = this.AdvertiserOwnerId;
        // 104: nullable<double> AmountChargedAdvertiserCurrency
        that.AmountChargedAdvertiserCurrency = this.AmountChargedAdvertiserCurrency;
        // 105: nullable<double> AmountChargedAuctionCurrency
        that.AmountChargedAuctionCurrency = this.AmountChargedAuctionCurrency;
        // 106: nullable<double> AmountChargedAuctionCurrencyUnadjusted
        that.AmountChargedAuctionCurrencyUnadjusted = this.AmountChargedAuctionCurrencyUnadjusted;
        // 107: nullable<double> AmountChargedConstantUSDExchangeRt
        that.AmountChargedConstantUSDExchangeRt = this.AmountChargedConstantUSDExchangeRt;
        // 108: nullable<double> AmountChargedInPublisherCurrency
        that.AmountChargedInPublisherCurrency = this.AmountChargedInPublisherCurrency;
        // 109: nullable<int32> AmountChargedLanguageCurrency
        that.AmountChargedLanguageCurrency = this.AmountChargedLanguageCurrency;
        // 110: nullable<double> AmountChargedUSDMonthlyExchangeRt
        that.AmountChargedUSDMonthlyExchangeRt = this.AmountChargedUSDMonthlyExchangeRt;
        // 111: string BiddedKeyword
        that.BiddedKeyword = this.BiddedKeyword;
        // 112: nullable<int32> BiddedKeywordId
        that.BiddedKeywordId = this.BiddedKeywordId;
        // 113: nullable<int8> BiddedMatchTypeId
        that.BiddedMatchTypeId = this.BiddedMatchTypeId;
        // 114: nullable<int32> BusinessLocationId
        that.BusinessLocationId = this.BusinessLocationId;
        // 115: nullable<uint64> CampaignId
        that.CampaignId = this.CampaignId;
        // 116: nullable<int32> CampaignTimeZoneId
        that.CampaignTimeZoneId = this.CampaignTimeZoneId;
        // 117: nullable<int16> CampaignTZDayId
        that.CampaignTZDayId = this.CampaignTZDayId;
        // 118: nullable<int8> CampaignTZHourNum
        that.CampaignTZHourNum = this.CampaignTZHourNum;
        // 119: string CleanKeywordHash
        that.CleanKeywordHash = this.CleanKeywordHash;
        // 120: nullable<int16> CurrencyId
        that.CurrencyId = this.CurrencyId;
        // 121: nullable<int32> CustomerId
        that.CustomerId = this.CustomerId;
        // 122: nullable<int16> DeliveryEngineRank
        that.DeliveryEngineRank = this.DeliveryEngineRank;
        // 123: string EstimatedPagePosition
        that.EstimatedPagePosition = this.EstimatedPagePosition;
        // 124: nullable<int8> ExtendedMatchTypeId
        that.ExtendedMatchTypeId = this.ExtendedMatchTypeId;
        // 125: nullable<int8> GleamedAdDelivered
        that.GleamedAdDelivered = this.GleamedAdDelivered;
        // 126: nullable<int16> KeywordScore
        that.KeywordScore = this.KeywordScore;
        // 127: nullable<int32> KeywordSourceBitmap
        that.KeywordSourceBitmap = this.KeywordSourceBitmap;
        // 128: nullable<int8> vectoringTypeId
        that.vectoringTypeId = this.vectoringTypeId;
        // 129: nullable<int8> OnlineFraudQualityBand
        that.OnlineFraudQualityBand = this.OnlineFraudQualityBand;
        // 130: nullable<int32> MatchScore
        that.MatchScore = this.MatchScore;
        // 131: nullable<int32> MatchTypeId
        that.MatchTypeId = this.MatchTypeId;
        // 132: nullable<double> MSRevenueAdvertiserCurrency
        that.MSRevenueAdvertiserCurrency = this.MSRevenueAdvertiserCurrency;
        // 133: nullable<double> MSRevenueUSD
        that.MSRevenueUSD = this.MSRevenueUSD;
        // 134: nullable<double> OperationalCostAllowanceAdvertiserCurrency
        that.OperationalCostAllowanceAdvertiserCurrency = this.OperationalCostAllowanceAdvertiserCurrency;
        // 135: nullable<double> OperationalCostAllowanceUSD
        that.OperationalCostAllowanceUSD = this.OperationalCostAllowanceUSD;
        // 136: nullable<uint64> OrderId
        that.OrderId = this.OrderId;
        // 137: string PagePosition
        that.PagePosition = this.PagePosition;
        // 138: nullable<int16> PricingModelId
        that.PricingModelId = this.PricingModelId;
        // 139: nullable<int16> ProbabilityOfClick
        that.ProbabilityOfClick = this.ProbabilityOfClick;
        // 140: nullable<int32> ProductId
        that.ProductId = this.ProductId;
        // 141: nullable<double> PublisherEarningsAdvertiserCurrency
        that.PublisherEarningsAdvertiserCurrency = this.PublisherEarningsAdvertiserCurrency;
        // 142: nullable<double> PublisherEarningsPublisherCurrency
        that.PublisherEarningsPublisherCurrency = this.PublisherEarningsPublisherCurrency;
        // 143: nullable<double> PublisherEarningsUSD
        that.PublisherEarningsUSD = this.PublisherEarningsUSD;
        // 144: nullable<uint32> RankScore
        that.RankScore = this.RankScore;
        // 145: nullable<int8> RelativePosition
        that.RelativePosition = this.RelativePosition;
        // 146: nullable<int32> SellableNodeId
        that.SellableNodeId = this.SellableNodeId;
        // 147: nullable<int32> SmartPricingModelId
        that.SmartPricingModelId = this.SmartPricingModelId;
        // 148: string SmartPricingRuleId
        that.SmartPricingRuleId = this.SmartPricingRuleId;
        // 149: string TokenRatioString
        that.TokenRatioString = this.TokenRatioString;
        // 150: nullable<int32> WinningSegmentId
        that.WinningSegmentId = this.WinningSegmentId;
        // 151: nullable<uint8> TargetedLocationType
        that.TargetedLocationType = this.TargetedLocationType;
        // 152: uint16 RenderedLayoutId
        that.RenderedLayoutId = this.RenderedLayoutId;
        // 153: nullable<int32> ExchangeRateDayId
        that.ExchangeRateDayId = this.ExchangeRateDayId;
        // 154: nullable<int64> AdExtensionId
        that.AdExtensionId = this.AdExtensionId;
        // 155: nullable<int64> AdExtensionItemId
        that.AdExtensionItemId = this.AdExtensionItemId;
        // 156: nullable<uint16> AdExtensionItemRenderedLayoutId
        that.AdExtensionItemRenderedLayoutId = this.AdExtensionItemRenderedLayoutId;
        // 157: int16 AdExtensionVersionId
        that.AdExtensionVersionId = this.AdExtensionVersionId;
        // 158: nullable<int16> AdExtensionTypeId
        that.AdExtensionTypeId = this.AdExtensionTypeId;
        // 159: nullable<uint16> AdExtensionRenderedLayoutId
        that.AdExtensionRenderedLayoutId = this.AdExtensionRenderedLayoutId;
        // 160: string Click_ClientIP
        that.Click_ClientIP = this.Click_ClientIP;
        // 161: nullable<int64> Click_DateTime
        that.Click_DateTime = this.Click_DateTime;
        // 162: string ElementName
        that.ElementName = this.ElementName;
        // 163: bool IsMR
        that.IsMR = this.IsMR;
        // 164: vector<int32> LocationIds
        if (this.LocationIds != null)
        {
            if (that.LocationIds == null)
            {
                that.LocationIds = new List<Int32>();
            }
            else
            {
                that.LocationIds.Clear();
            }
            foreach (var iter5 in this.LocationIds)
            {
                Int32 tmpItem6 = default(Int32);
                tmpItem6 = iter5;
                that.LocationIds.Add(tmpItem6);
            }
        }
        else
        {
            that.LocationIds = null;
        }
        // 165: nullable<int8> ListingTypeId
        that.ListingTypeId = this.ListingTypeId;
        // 166: string ClickId
        that.ClickId = this.ClickId;
        // 167: int32 FraudModelId
        that.FraudModelId = this.FraudModelId;
        // 168: int8 FraudQualityBand
        that.FraudQualityBand = this.FraudQualityBand;
        // 169: string FraudQualityBand_test
        that.FraudQualityBand_test = this.FraudQualityBand_test;
        // 170: int16 FraudQualityType
        that.FraudQualityType = this.FraudQualityType;
        // 171: vector<uint8> FraudReason
        if (this.FraudReason != null)
        {
            if (that.FraudReason == null)
            {
                that.FraudReason = new List<Byte>();
            }
            else
            {
                that.FraudReason.Clear();
            }
            foreach (var iter7 in this.FraudReason)
            {
                Byte tmpItem8 = default(Byte);
                tmpItem8 = iter7;
                that.FraudReason.Add(tmpItem8);
            }
        }
        else
        {
            that.FraudReason = null;
        }
        // 172: string FraudRuleId
        that.FraudRuleId = this.FraudRuleId;
        // 173: double FraudScore
        that.FraudScore = this.FraudScore;
        // 174: nullable<int64> LogDelta
        that.LogDelta = this.LogDelta;
        // 175: Microsoft.Bond.GUID RGUID
        that.RGUID = (this.RGUID == null ? null : (global::Microsoft.Bond.GUID)this.RGUID.Clone());
        // 176: SparkSchema.PSCFRSpark PSCFRClickData
        that.PSCFRClickData = (this.PSCFRClickData == null ? null : (global::SparkSchema.PSCFRSpark)this.PSCFRClickData.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ABTestingTypes(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ABTestName = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ActualImpRange(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ActualMLImpRange(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.AdLanguage = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdServerStatusId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.AdUnitId = reader.ReadInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.AdUnitTypeId = reader.ReadInt8();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AlgorithmFilterId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AlgorithmId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Click_OrderItemId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AskedAdCnt(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_BaseImpRange(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_BidDensity(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.BingVertical = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.BucketId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_CategoryId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ChannelIds(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.CID = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.PageView_ClientIP = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ClientTimeZoneId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_CodePage(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_DateTime(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_DeviceId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_DeviceOSId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.DeviceOSName = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.DeviceOSVersion = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_DeviceTypeId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_DisputedFlag(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_DistributionChannelId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_DumpId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.DynamicParamNormalizedURL = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ECPIThresholdValue(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ExperimentId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_FlowId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.FormCode = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_GleamedAdRange(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.IsMI = reader.ReadBool();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_LogSequence(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.LogServerName = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_MakeId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.MarketplaceClassificationId = reader.ReadUInt8();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_MediumId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.MIMUID = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_MTID(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.NetworkId = reader.ReadInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.NonNormalizedQueryString = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_NumNonPforP(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_OriginalAdUnitId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_OriginalPropertyId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_OriginalPublisherId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_OSId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.WebsiteCountry = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_PageNumber(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_PageSectionId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_PageType(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.PartnerCode = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.PassportAgeGroupId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.PassportBDay = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.PassportFlags = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.PassportGenderId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.PassportRegion = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.PassportZipCode = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.PCPB = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_PropertyId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_PubConfigGroupId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_PublisherAccountId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_QueryLocationIds(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.PublisherAccountTimeZone = reader.ReadInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_PublisherCurrencyId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_PublisherId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_PublisherOwnerId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.QueryPhrase = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ReasonCode(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.RelatedToAccountId = reader.ReadInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.RelationshipId = reader.ReadInt8();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.IncomingPublisherWebSiteCountry = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ReturnedAdCnt(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_RSNId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_SearchFormId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_SearchSiteVersionId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.SmartPricing = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_SmartPricingDiscountAlgoId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_SmartPricingDiscountVersion(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_SmartPricingQueryCategoryAlgoId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_SmartPricingQueryCategoryId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_StartPosition(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_SubCategoryId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.TerminalNodeId = reader.ReadInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.TPAdUId = reader.ReadInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.TrafficPartitionCode = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.TypeTag = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_DeviceOSId2(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AbsPosition(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ActualBid(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdDisplayTypeId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdjustedRank(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdLayoutId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdvertiserAccountId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdvertiserAccountPreferredCurrencyId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdvertiserNetAmountInPublisherCurrency(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdvertiserOwnerId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AmountChargedAdvertiserCurrency(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AmountChargedAuctionCurrency(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AmountChargedAuctionCurrencyUnadjusted(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AmountChargedConstantUSDExchangeRt(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AmountChargedInPublisherCurrency(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AmountChargedLanguageCurrency(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AmountChargedUSDMonthlyExchangeRt(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.BiddedKeyword = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_BiddedKeywordId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_BiddedMatchTypeId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_BusinessLocationId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_CampaignId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_CampaignTimeZoneId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_CampaignTZDayId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_CampaignTZHourNum(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.CleanKeywordHash = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_CurrencyId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_CustomerId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_DeliveryEngineRank(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.EstimatedPagePosition = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ExtendedMatchTypeId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_GleamedAdDelivered(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_KeywordScore(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_KeywordSourceBitmap(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_vectoringTypeId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_OnlineFraudQualityBand(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_MatchScore(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_MatchTypeId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_MSRevenueAdvertiserCurrency(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_MSRevenueUSD(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_OperationalCostAllowanceAdvertiserCurrency(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_OperationalCostAllowanceUSD(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_OrderId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.PagePosition = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_PricingModelId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ProbabilityOfClick(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ProductId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_PublisherEarningsAdvertiserCurrency(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_PublisherEarningsPublisherCurrency(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_PublisherEarningsUSD(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_RankScore(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_RelativePosition(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_SellableNodeId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_SmartPricingModelId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.SmartPricingRuleId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.TokenRatioString = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_WinningSegmentId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_TargetedLocationType(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.RenderedLayoutId = reader.ReadUInt16();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ExchangeRateDayId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdExtensionId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdExtensionItemId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdExtensionItemRenderedLayoutId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.AdExtensionVersionId = reader.ReadInt16();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdExtensionTypeId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdExtensionRenderedLayoutId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Click_ClientIP = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Click_DateTime(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ElementName = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.IsMR = reader.ReadBool();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_LocationIds(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ListingTypeId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ClickId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.FraudModelId = reader.ReadInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.FraudQualityBand = reader.ReadInt8();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.FraudQualityBand_test = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.FraudQualityType = reader.ReadInt16();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_FraudReason(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.FraudRuleId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.FraudScore = reader.ReadDouble();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_LogDelta(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.RGUID.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.PSCFRClickData.Read(reader);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.ABTestingTypes:  // id=1
                    this.ReadField_impl_ABTestingTypes(reader, type);
                    break;
                case __ordinals.ABTestName:  // id=2
                    this.ABTestName = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.ActualImpRange:  // id=3
                    this.ReadField_impl_ActualImpRange(reader, type);
                    break;
                case __ordinals.ActualMLImpRange:  // id=4
                    this.ReadField_impl_ActualMLImpRange(reader, type);
                    break;
                case __ordinals.AdLanguage:  // id=5
                    this.AdLanguage = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.AdServerStatusId:  // id=6
                    this.ReadField_impl_AdServerStatusId(reader, type);
                    break;
                case __ordinals.AdUnitId:  // id=7
                    this.AdUnitId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                case __ordinals.AdUnitTypeId:  // id=8
                    this.AdUnitTypeId = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, type);
                    break;
                case __ordinals.AlgorithmFilterId:  // id=9
                    this.ReadField_impl_AlgorithmFilterId(reader, type);
                    break;
                case __ordinals.AlgorithmId:  // id=10
                    this.ReadField_impl_AlgorithmId(reader, type);
                    break;
                case __ordinals.Click_OrderItemId:  // id=11
                    this.ReadField_impl_Click_OrderItemId(reader, type);
                    break;
                case __ordinals.AskedAdCnt:  // id=12
                    this.ReadField_impl_AskedAdCnt(reader, type);
                    break;
                case __ordinals.BaseImpRange:  // id=13
                    this.ReadField_impl_BaseImpRange(reader, type);
                    break;
                case __ordinals.BidDensity:  // id=14
                    this.ReadField_impl_BidDensity(reader, type);
                    break;
                case __ordinals.BingVertical:  // id=15
                    this.BingVertical = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.BucketId:  // id=16
                    this.BucketId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.CategoryId:  // id=17
                    this.ReadField_impl_CategoryId(reader, type);
                    break;
                case __ordinals.ChannelIds:  // id=18
                    this.ReadField_impl_ChannelIds(reader, type);
                    break;
                case __ordinals.CID:  // id=19
                    this.CID = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.PageView_ClientIP:  // id=20
                    this.PageView_ClientIP = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.ClientTimeZoneId:  // id=21
                    this.ReadField_impl_ClientTimeZoneId(reader, type);
                    break;
                case __ordinals.CodePage:  // id=22
                    this.ReadField_impl_CodePage(reader, type);
                    break;
                case __ordinals.DateTime:  // id=23
                    this.ReadField_impl_DateTime(reader, type);
                    break;
                case __ordinals.DeviceId:  // id=24
                    this.ReadField_impl_DeviceId(reader, type);
                    break;
                case __ordinals.DeviceOSId:  // id=25
                    this.ReadField_impl_DeviceOSId(reader, type);
                    break;
                case __ordinals.DeviceOSName:  // id=26
                    this.DeviceOSName = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.DeviceOSVersion:  // id=27
                    this.DeviceOSVersion = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.DeviceTypeId:  // id=28
                    this.ReadField_impl_DeviceTypeId(reader, type);
                    break;
                case __ordinals.DisputedFlag:  // id=29
                    this.ReadField_impl_DisputedFlag(reader, type);
                    break;
                case __ordinals.DistributionChannelId:  // id=30
                    this.ReadField_impl_DistributionChannelId(reader, type);
                    break;
                case __ordinals.DumpId:  // id=31
                    this.ReadField_impl_DumpId(reader, type);
                    break;
                case __ordinals.DynamicParamNormalizedURL:  // id=32
                    this.DynamicParamNormalizedURL = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.ECPIThresholdValue:  // id=33
                    this.ReadField_impl_ECPIThresholdValue(reader, type);
                    break;
                case __ordinals.ExperimentId:  // id=34
                    this.ReadField_impl_ExperimentId(reader, type);
                    break;
                case __ordinals.FlowId:  // id=35
                    this.ReadField_impl_FlowId(reader, type);
                    break;
                case __ordinals.FormCode:  // id=36
                    this.FormCode = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.GleamedAdRange:  // id=37
                    this.ReadField_impl_GleamedAdRange(reader, type);
                    break;
                case __ordinals.IsMI:  // id=38
                    this.IsMI = global::Microsoft.Bond.ReadHelper.ReadBool(reader, type);
                    break;
                case __ordinals.LogSequence:  // id=39
                    this.ReadField_impl_LogSequence(reader, type);
                    break;
                case __ordinals.LogServerName:  // id=40
                    this.LogServerName = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.MakeId:  // id=41
                    this.ReadField_impl_MakeId(reader, type);
                    break;
                case __ordinals.MarketplaceClassificationId:  // id=42
                    this.MarketplaceClassificationId = global::Microsoft.Bond.ReadHelper.ReadUInt8(reader, type);
                    break;
                case __ordinals.MediumId:  // id=43
                    this.ReadField_impl_MediumId(reader, type);
                    break;
                case __ordinals.MIMUID:  // id=44
                    this.MIMUID = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.MTID:  // id=45
                    this.ReadField_impl_MTID(reader, type);
                    break;
                case __ordinals.NetworkId:  // id=46
                    this.NetworkId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                case __ordinals.NonNormalizedQueryString:  // id=47
                    this.NonNormalizedQueryString = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.NumNonPforP:  // id=48
                    this.ReadField_impl_NumNonPforP(reader, type);
                    break;
                case __ordinals.OriginalAdUnitId:  // id=49
                    this.ReadField_impl_OriginalAdUnitId(reader, type);
                    break;
                case __ordinals.OriginalPropertyId:  // id=50
                    this.ReadField_impl_OriginalPropertyId(reader, type);
                    break;
                case __ordinals.OriginalPublisherId:  // id=51
                    this.ReadField_impl_OriginalPublisherId(reader, type);
                    break;
                case __ordinals.OSId:  // id=52
                    this.ReadField_impl_OSId(reader, type);
                    break;
                case __ordinals.WebsiteCountry:  // id=53
                    this.WebsiteCountry = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.PageNumber:  // id=54
                    this.ReadField_impl_PageNumber(reader, type);
                    break;
                case __ordinals.PageSectionId:  // id=55
                    this.ReadField_impl_PageSectionId(reader, type);
                    break;
                case __ordinals.PageType:  // id=56
                    this.ReadField_impl_PageType(reader, type);
                    break;
                case __ordinals.PartnerCode:  // id=57
                    this.PartnerCode = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.PassportAgeGroupId:  // id=58
                    this.PassportAgeGroupId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.PassportBDay:  // id=59
                    this.PassportBDay = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.PassportFlags:  // id=60
                    this.PassportFlags = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.PassportGenderId:  // id=61
                    this.PassportGenderId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.PassportRegion:  // id=62
                    this.PassportRegion = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.PassportZipCode:  // id=63
                    this.PassportZipCode = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.PCPB:  // id=64
                    this.PCPB = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.PropertyId:  // id=65
                    this.ReadField_impl_PropertyId(reader, type);
                    break;
                case __ordinals.PubConfigGroupId:  // id=66
                    this.ReadField_impl_PubConfigGroupId(reader, type);
                    break;
                case __ordinals.PublisherAccountId:  // id=67
                    this.ReadField_impl_PublisherAccountId(reader, type);
                    break;
                case __ordinals.QueryLocationIds:  // id=68
                    this.ReadField_impl_QueryLocationIds(reader, type);
                    break;
                case __ordinals.PublisherAccountTimeZone:  // id=69
                    this.PublisherAccountTimeZone = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                case __ordinals.PublisherCurrencyId:  // id=70
                    this.ReadField_impl_PublisherCurrencyId(reader, type);
                    break;
                case __ordinals.PublisherId:  // id=71
                    this.ReadField_impl_PublisherId(reader, type);
                    break;
                case __ordinals.PublisherOwnerId:  // id=72
                    this.ReadField_impl_PublisherOwnerId(reader, type);
                    break;
                case __ordinals.QueryPhrase:  // id=73
                    this.QueryPhrase = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.ReasonCode:  // id=74
                    this.ReadField_impl_ReasonCode(reader, type);
                    break;
                case __ordinals.RelatedToAccountId:  // id=75
                    this.RelatedToAccountId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                case __ordinals.RelationshipId:  // id=76
                    this.RelationshipId = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, type);
                    break;
                case __ordinals.IncomingPublisherWebSiteCountry:  // id=77
                    this.IncomingPublisherWebSiteCountry = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.ReturnedAdCnt:  // id=78
                    this.ReadField_impl_ReturnedAdCnt(reader, type);
                    break;
                case __ordinals.RSNId:  // id=79
                    this.ReadField_impl_RSNId(reader, type);
                    break;
                case __ordinals.SearchFormId:  // id=80
                    this.ReadField_impl_SearchFormId(reader, type);
                    break;
                case __ordinals.SearchSiteVersionId:  // id=81
                    this.ReadField_impl_SearchSiteVersionId(reader, type);
                    break;
                case __ordinals.SmartPricing:  // id=82
                    this.SmartPricing = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.SmartPricingDiscountAlgoId:  // id=83
                    this.ReadField_impl_SmartPricingDiscountAlgoId(reader, type);
                    break;
                case __ordinals.SmartPricingDiscountVersion:  // id=84
                    this.ReadField_impl_SmartPricingDiscountVersion(reader, type);
                    break;
                case __ordinals.SmartPricingQueryCategoryAlgoId:  // id=85
                    this.ReadField_impl_SmartPricingQueryCategoryAlgoId(reader, type);
                    break;
                case __ordinals.SmartPricingQueryCategoryId:  // id=86
                    this.ReadField_impl_SmartPricingQueryCategoryId(reader, type);
                    break;
                case __ordinals.StartPosition:  // id=87
                    this.ReadField_impl_StartPosition(reader, type);
                    break;
                case __ordinals.SubCategoryId:  // id=88
                    this.ReadField_impl_SubCategoryId(reader, type);
                    break;
                case __ordinals.TerminalNodeId:  // id=89
                    this.TerminalNodeId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                case __ordinals.TPAdUId:  // id=90
                    this.TPAdUId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                case __ordinals.TrafficPartitionCode:  // id=91
                    this.TrafficPartitionCode = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.TypeTag:  // id=92
                    this.TypeTag = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.DeviceOSId2:  // id=93
                    this.ReadField_impl_DeviceOSId2(reader, type);
                    break;
                case __ordinals.AbsPosition:  // id=94
                    this.ReadField_impl_AbsPosition(reader, type);
                    break;
                case __ordinals.ActualBid:  // id=95
                    this.ReadField_impl_ActualBid(reader, type);
                    break;
                case __ordinals.AdDisplayTypeId:  // id=96
                    this.ReadField_impl_AdDisplayTypeId(reader, type);
                    break;
                case __ordinals.AdjustedRank:  // id=97
                    this.ReadField_impl_AdjustedRank(reader, type);
                    break;
                case __ordinals.AdLayoutId:  // id=98
                    this.ReadField_impl_AdLayoutId(reader, type);
                    break;
                case __ordinals.AdvertiserAccountId:  // id=100
                    this.ReadField_impl_AdvertiserAccountId(reader, type);
                    break;
                case __ordinals.AdvertiserAccountPreferredCurrencyId:  // id=101
                    this.ReadField_impl_AdvertiserAccountPreferredCurrencyId(reader, type);
                    break;
                case __ordinals.AdvertiserNetAmountInPublisherCurrency:  // id=102
                    this.ReadField_impl_AdvertiserNetAmountInPublisherCurrency(reader, type);
                    break;
                case __ordinals.AdvertiserOwnerId:  // id=103
                    this.ReadField_impl_AdvertiserOwnerId(reader, type);
                    break;
                case __ordinals.AmountChargedAdvertiserCurrency:  // id=104
                    this.ReadField_impl_AmountChargedAdvertiserCurrency(reader, type);
                    break;
                case __ordinals.AmountChargedAuctionCurrency:  // id=105
                    this.ReadField_impl_AmountChargedAuctionCurrency(reader, type);
                    break;
                case __ordinals.AmountChargedAuctionCurrencyUnadjusted:  // id=106
                    this.ReadField_impl_AmountChargedAuctionCurrencyUnadjusted(reader, type);
                    break;
                case __ordinals.AmountChargedConstantUSDExchangeRt:  // id=107
                    this.ReadField_impl_AmountChargedConstantUSDExchangeRt(reader, type);
                    break;
                case __ordinals.AmountChargedInPublisherCurrency:  // id=108
                    this.ReadField_impl_AmountChargedInPublisherCurrency(reader, type);
                    break;
                case __ordinals.AmountChargedLanguageCurrency:  // id=109
                    this.ReadField_impl_AmountChargedLanguageCurrency(reader, type);
                    break;
                case __ordinals.AmountChargedUSDMonthlyExchangeRt:  // id=110
                    this.ReadField_impl_AmountChargedUSDMonthlyExchangeRt(reader, type);
                    break;
                case __ordinals.BiddedKeyword:  // id=111
                    this.BiddedKeyword = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.BiddedKeywordId:  // id=112
                    this.ReadField_impl_BiddedKeywordId(reader, type);
                    break;
                case __ordinals.BiddedMatchTypeId:  // id=113
                    this.ReadField_impl_BiddedMatchTypeId(reader, type);
                    break;
                case __ordinals.BusinessLocationId:  // id=114
                    this.ReadField_impl_BusinessLocationId(reader, type);
                    break;
                case __ordinals.CampaignId:  // id=115
                    this.ReadField_impl_CampaignId(reader, type);
                    break;
                case __ordinals.CampaignTimeZoneId:  // id=116
                    this.ReadField_impl_CampaignTimeZoneId(reader, type);
                    break;
                case __ordinals.CampaignTZDayId:  // id=117
                    this.ReadField_impl_CampaignTZDayId(reader, type);
                    break;
                case __ordinals.CampaignTZHourNum:  // id=118
                    this.ReadField_impl_CampaignTZHourNum(reader, type);
                    break;
                case __ordinals.CleanKeywordHash:  // id=119
                    this.CleanKeywordHash = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.CurrencyId:  // id=120
                    this.ReadField_impl_CurrencyId(reader, type);
                    break;
                case __ordinals.CustomerId:  // id=121
                    this.ReadField_impl_CustomerId(reader, type);
                    break;
                case __ordinals.DeliveryEngineRank:  // id=122
                    this.ReadField_impl_DeliveryEngineRank(reader, type);
                    break;
                case __ordinals.EstimatedPagePosition:  // id=123
                    this.EstimatedPagePosition = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.ExtendedMatchTypeId:  // id=124
                    this.ReadField_impl_ExtendedMatchTypeId(reader, type);
                    break;
                case __ordinals.GleamedAdDelivered:  // id=125
                    this.ReadField_impl_GleamedAdDelivered(reader, type);
                    break;
                case __ordinals.KeywordScore:  // id=126
                    this.ReadField_impl_KeywordScore(reader, type);
                    break;
                case __ordinals.KeywordSourceBitmap:  // id=127
                    this.ReadField_impl_KeywordSourceBitmap(reader, type);
                    break;
                case __ordinals.vectoringTypeId:  // id=128
                    this.ReadField_impl_vectoringTypeId(reader, type);
                    break;
                case __ordinals.OnlineFraudQualityBand:  // id=129
                    this.ReadField_impl_OnlineFraudQualityBand(reader, type);
                    break;
                case __ordinals.MatchScore:  // id=130
                    this.ReadField_impl_MatchScore(reader, type);
                    break;
                case __ordinals.MatchTypeId:  // id=131
                    this.ReadField_impl_MatchTypeId(reader, type);
                    break;
                case __ordinals.MSRevenueAdvertiserCurrency:  // id=132
                    this.ReadField_impl_MSRevenueAdvertiserCurrency(reader, type);
                    break;
                case __ordinals.MSRevenueUSD:  // id=133
                    this.ReadField_impl_MSRevenueUSD(reader, type);
                    break;
                case __ordinals.OperationalCostAllowanceAdvertiserCurrency:  // id=134
                    this.ReadField_impl_OperationalCostAllowanceAdvertiserCurrency(reader, type);
                    break;
                case __ordinals.OperationalCostAllowanceUSD:  // id=135
                    this.ReadField_impl_OperationalCostAllowanceUSD(reader, type);
                    break;
                case __ordinals.OrderId:  // id=136
                    this.ReadField_impl_OrderId(reader, type);
                    break;
                case __ordinals.PagePosition:  // id=137
                    this.PagePosition = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.PricingModelId:  // id=138
                    this.ReadField_impl_PricingModelId(reader, type);
                    break;
                case __ordinals.ProbabilityOfClick:  // id=139
                    this.ReadField_impl_ProbabilityOfClick(reader, type);
                    break;
                case __ordinals.ProductId:  // id=140
                    this.ReadField_impl_ProductId(reader, type);
                    break;
                case __ordinals.PublisherEarningsAdvertiserCurrency:  // id=141
                    this.ReadField_impl_PublisherEarningsAdvertiserCurrency(reader, type);
                    break;
                case __ordinals.PublisherEarningsPublisherCurrency:  // id=142
                    this.ReadField_impl_PublisherEarningsPublisherCurrency(reader, type);
                    break;
                case __ordinals.PublisherEarningsUSD:  // id=143
                    this.ReadField_impl_PublisherEarningsUSD(reader, type);
                    break;
                case __ordinals.RankScore:  // id=144
                    this.ReadField_impl_RankScore(reader, type);
                    break;
                case __ordinals.RelativePosition:  // id=145
                    this.ReadField_impl_RelativePosition(reader, type);
                    break;
                case __ordinals.SellableNodeId:  // id=146
                    this.ReadField_impl_SellableNodeId(reader, type);
                    break;
                case __ordinals.SmartPricingModelId:  // id=147
                    this.ReadField_impl_SmartPricingModelId(reader, type);
                    break;
                case __ordinals.SmartPricingRuleId:  // id=148
                    this.SmartPricingRuleId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.TokenRatioString:  // id=149
                    this.TokenRatioString = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.WinningSegmentId:  // id=150
                    this.ReadField_impl_WinningSegmentId(reader, type);
                    break;
                case __ordinals.TargetedLocationType:  // id=151
                    this.ReadField_impl_TargetedLocationType(reader, type);
                    break;
                case __ordinals.RenderedLayoutId:  // id=152
                    this.RenderedLayoutId = global::Microsoft.Bond.ReadHelper.ReadUInt16(reader, type);
                    break;
                case __ordinals.ExchangeRateDayId:  // id=153
                    this.ReadField_impl_ExchangeRateDayId(reader, type);
                    break;
                case __ordinals.AdExtensionId:  // id=154
                    this.ReadField_impl_AdExtensionId(reader, type);
                    break;
                case __ordinals.AdExtensionItemId:  // id=155
                    this.ReadField_impl_AdExtensionItemId(reader, type);
                    break;
                case __ordinals.AdExtensionItemRenderedLayoutId:  // id=156
                    this.ReadField_impl_AdExtensionItemRenderedLayoutId(reader, type);
                    break;
                case __ordinals.AdExtensionVersionId:  // id=157
                    this.AdExtensionVersionId = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, type);
                    break;
                case __ordinals.AdExtensionTypeId:  // id=158
                    this.ReadField_impl_AdExtensionTypeId(reader, type);
                    break;
                case __ordinals.AdExtensionRenderedLayoutId:  // id=159
                    this.ReadField_impl_AdExtensionRenderedLayoutId(reader, type);
                    break;
                case __ordinals.Click_ClientIP:  // id=160
                    this.Click_ClientIP = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Click_DateTime:  // id=161
                    this.ReadField_impl_Click_DateTime(reader, type);
                    break;
                case __ordinals.ElementName:  // id=162
                    this.ElementName = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.IsMR:  // id=163
                    this.IsMR = global::Microsoft.Bond.ReadHelper.ReadBool(reader, type);
                    break;
                case __ordinals.LocationIds:  // id=164
                    this.ReadField_impl_LocationIds(reader, type);
                    break;
                case __ordinals.ListingTypeId:  // id=165
                    this.ReadField_impl_ListingTypeId(reader, type);
                    break;
                case __ordinals.ClickId:  // id=166
                    this.ClickId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.FraudModelId:  // id=167
                    this.FraudModelId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                case __ordinals.FraudQualityBand:  // id=168
                    this.FraudQualityBand = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, type);
                    break;
                case __ordinals.FraudQualityBand_test:  // id=169
                    this.FraudQualityBand_test = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.FraudQualityType:  // id=170
                    this.FraudQualityType = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, type);
                    break;
                case __ordinals.FraudReason:  // id=171
                    this.ReadField_impl_FraudReason(reader, type);
                    break;
                case __ordinals.FraudRuleId:  // id=172
                    this.FraudRuleId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.FraudScore:  // id=173
                    this.FraudScore = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, type);
                    break;
                case __ordinals.LogDelta:  // id=174
                    this.ReadField_impl_LogDelta(reader, type);
                    break;
                case __ordinals.RGUID:  // id=175
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.RGUID.Read(reader);
                    break;
                case __ordinals.PSCFRClickData:  // id=176
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.PSCFRClickData.Read(reader);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    private void ReadField_impl_ABTestingTypes(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_ABTestingTypes = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ABTestingTypes


    private void ReadField_impl_ActualImpRange(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_ActualImpRange = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ActualImpRange


    private void ReadField_impl_ActualMLImpRange(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_ActualMLImpRange = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ActualMLImpRange


    private void ReadField_impl_AdServerStatusId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdServerStatusId = global::Microsoft.Bond.ReadHelper.ReadUInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdServerStatusId


    private void ReadField_impl_AlgorithmFilterId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AlgorithmFilterId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AlgorithmFilterId


    private void ReadField_impl_AlgorithmId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AlgorithmId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AlgorithmId


    private void ReadField_impl_Click_OrderItemId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_Click_OrderItemId = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Click_OrderItemId


    private void ReadField_impl_AskedAdCnt(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AskedAdCnt = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AskedAdCnt


    private void ReadField_impl_BaseImpRange(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_BaseImpRange = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_BaseImpRange


    private void ReadField_impl_BidDensity(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_BidDensity = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_BidDensity


    private void ReadField_impl_CategoryId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_CategoryId = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_CategoryId


    private void ReadField_impl_ChannelIds(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_ChannelIds.Capacity < count2)
        {
            this.m_ChannelIds.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            Int32 element3 = default(Int32);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType1);
            this.m_ChannelIds.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ChannelIds


    private void ReadField_impl_ClientTimeZoneId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_ClientTimeZoneId = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ClientTimeZoneId


    private void ReadField_impl_CodePage(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_CodePage = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_CodePage


    private void ReadField_impl_DateTime(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_DateTime = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_DateTime


    private void ReadField_impl_DeviceId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_DeviceId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_DeviceId


    private void ReadField_impl_DeviceOSId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_DeviceOSId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_DeviceOSId


    private void ReadField_impl_DeviceTypeId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_DeviceTypeId = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_DeviceTypeId


    private void ReadField_impl_DisputedFlag(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_DisputedFlag = global::Microsoft.Bond.ReadHelper.ReadBool(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_DisputedFlag


    private void ReadField_impl_DistributionChannelId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_DistributionChannelId = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_DistributionChannelId


    private void ReadField_impl_DumpId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_DumpId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_DumpId


    private void ReadField_impl_ECPIThresholdValue(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_ECPIThresholdValue = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ECPIThresholdValue


    private void ReadField_impl_ExperimentId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_ExperimentId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ExperimentId


    private void ReadField_impl_FlowId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_FlowId = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_FlowId


    private void ReadField_impl_GleamedAdRange(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_GleamedAdRange = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_GleamedAdRange


    private void ReadField_impl_LogSequence(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_LogSequence = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_LogSequence


    private void ReadField_impl_MakeId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_MakeId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_MakeId


    private void ReadField_impl_MediumId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_MediumId = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_MediumId


    private void ReadField_impl_MTID(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_MTID = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_MTID


    private void ReadField_impl_NumNonPforP(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_NumNonPforP = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_NumNonPforP


    private void ReadField_impl_OriginalAdUnitId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_OriginalAdUnitId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_OriginalAdUnitId


    private void ReadField_impl_OriginalPropertyId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_OriginalPropertyId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_OriginalPropertyId


    private void ReadField_impl_OriginalPublisherId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_OriginalPublisherId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_OriginalPublisherId


    private void ReadField_impl_OSId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_OSId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_OSId


    private void ReadField_impl_PageNumber(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_PageNumber = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_PageNumber


    private void ReadField_impl_PageSectionId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_PageSectionId = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_PageSectionId


    private void ReadField_impl_PageType(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_PageType = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_PageType


    private void ReadField_impl_PropertyId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_PropertyId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_PropertyId


    private void ReadField_impl_PubConfigGroupId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_PubConfigGroupId = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_PubConfigGroupId


    private void ReadField_impl_PublisherAccountId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_PublisherAccountId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_PublisherAccountId


    private void ReadField_impl_QueryLocationIds(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_QueryLocationIds.Capacity < count2)
        {
            this.m_QueryLocationIds.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            Int32 element3 = default(Int32);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType1);
            this.m_QueryLocationIds.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_QueryLocationIds


    private void ReadField_impl_PublisherCurrencyId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_PublisherCurrencyId = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_PublisherCurrencyId


    private void ReadField_impl_PublisherId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_PublisherId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_PublisherId


    private void ReadField_impl_PublisherOwnerId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_PublisherOwnerId = global::Microsoft.Bond.ReadHelper.ReadUInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_PublisherOwnerId


    private void ReadField_impl_ReasonCode(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_ReasonCode = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ReasonCode


    private void ReadField_impl_ReturnedAdCnt(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_ReturnedAdCnt = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ReturnedAdCnt


    private void ReadField_impl_RSNId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_RSNId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_RSNId


    private void ReadField_impl_SearchFormId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_SearchFormId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_SearchFormId


    private void ReadField_impl_SearchSiteVersionId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_SearchSiteVersionId = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_SearchSiteVersionId


    private void ReadField_impl_SmartPricingDiscountAlgoId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_SmartPricingDiscountAlgoId = global::Microsoft.Bond.ReadHelper.ReadUInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_SmartPricingDiscountAlgoId


    private void ReadField_impl_SmartPricingDiscountVersion(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_SmartPricingDiscountVersion = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_SmartPricingDiscountVersion


    private void ReadField_impl_SmartPricingQueryCategoryAlgoId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_SmartPricingQueryCategoryAlgoId = global::Microsoft.Bond.ReadHelper.ReadUInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_SmartPricingQueryCategoryAlgoId


    private void ReadField_impl_SmartPricingQueryCategoryId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_SmartPricingQueryCategoryId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_SmartPricingQueryCategoryId


    private void ReadField_impl_StartPosition(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_StartPosition = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_StartPosition


    private void ReadField_impl_SubCategoryId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_SubCategoryId = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_SubCategoryId


    private void ReadField_impl_DeviceOSId2(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_DeviceOSId2 = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_DeviceOSId2


    private void ReadField_impl_AbsPosition(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AbsPosition = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AbsPosition


    private void ReadField_impl_ActualBid(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_ActualBid = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ActualBid


    private void ReadField_impl_AdDisplayTypeId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdDisplayTypeId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdDisplayTypeId


    private void ReadField_impl_AdjustedRank(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdjustedRank = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdjustedRank


    private void ReadField_impl_AdLayoutId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdLayoutId = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdLayoutId


    private void ReadField_impl_AdvertiserAccountId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdvertiserAccountId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdvertiserAccountId


    private void ReadField_impl_AdvertiserAccountPreferredCurrencyId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdvertiserAccountPreferredCurrencyId = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdvertiserAccountPreferredCurrencyId


    private void ReadField_impl_AdvertiserNetAmountInPublisherCurrency(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdvertiserNetAmountInPublisherCurrency = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdvertiserNetAmountInPublisherCurrency


    private void ReadField_impl_AdvertiserOwnerId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdvertiserOwnerId = global::Microsoft.Bond.ReadHelper.ReadUInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdvertiserOwnerId


    private void ReadField_impl_AmountChargedAdvertiserCurrency(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AmountChargedAdvertiserCurrency = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AmountChargedAdvertiserCurrency


    private void ReadField_impl_AmountChargedAuctionCurrency(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AmountChargedAuctionCurrency = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AmountChargedAuctionCurrency


    private void ReadField_impl_AmountChargedAuctionCurrencyUnadjusted(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AmountChargedAuctionCurrencyUnadjusted = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AmountChargedAuctionCurrencyUnadjusted


    private void ReadField_impl_AmountChargedConstantUSDExchangeRt(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AmountChargedConstantUSDExchangeRt = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AmountChargedConstantUSDExchangeRt


    private void ReadField_impl_AmountChargedInPublisherCurrency(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AmountChargedInPublisherCurrency = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AmountChargedInPublisherCurrency


    private void ReadField_impl_AmountChargedLanguageCurrency(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AmountChargedLanguageCurrency = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AmountChargedLanguageCurrency


    private void ReadField_impl_AmountChargedUSDMonthlyExchangeRt(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AmountChargedUSDMonthlyExchangeRt = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AmountChargedUSDMonthlyExchangeRt


    private void ReadField_impl_BiddedKeywordId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_BiddedKeywordId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_BiddedKeywordId


    private void ReadField_impl_BiddedMatchTypeId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_BiddedMatchTypeId = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_BiddedMatchTypeId


    private void ReadField_impl_BusinessLocationId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_BusinessLocationId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_BusinessLocationId


    private void ReadField_impl_CampaignId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_CampaignId = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_CampaignId


    private void ReadField_impl_CampaignTimeZoneId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_CampaignTimeZoneId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_CampaignTimeZoneId


    private void ReadField_impl_CampaignTZDayId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_CampaignTZDayId = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_CampaignTZDayId


    private void ReadField_impl_CampaignTZHourNum(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_CampaignTZHourNum = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_CampaignTZHourNum


    private void ReadField_impl_CurrencyId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_CurrencyId = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_CurrencyId


    private void ReadField_impl_CustomerId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_CustomerId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_CustomerId


    private void ReadField_impl_DeliveryEngineRank(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_DeliveryEngineRank = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_DeliveryEngineRank


    private void ReadField_impl_ExtendedMatchTypeId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_ExtendedMatchTypeId = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ExtendedMatchTypeId


    private void ReadField_impl_GleamedAdDelivered(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_GleamedAdDelivered = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_GleamedAdDelivered


    private void ReadField_impl_KeywordScore(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_KeywordScore = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_KeywordScore


    private void ReadField_impl_KeywordSourceBitmap(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_KeywordSourceBitmap = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_KeywordSourceBitmap


    private void ReadField_impl_vectoringTypeId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_vectoringTypeId = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_vectoringTypeId


    private void ReadField_impl_OnlineFraudQualityBand(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_OnlineFraudQualityBand = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_OnlineFraudQualityBand


    private void ReadField_impl_MatchScore(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_MatchScore = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_MatchScore


    private void ReadField_impl_MatchTypeId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_MatchTypeId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_MatchTypeId


    private void ReadField_impl_MSRevenueAdvertiserCurrency(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_MSRevenueAdvertiserCurrency = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_MSRevenueAdvertiserCurrency


    private void ReadField_impl_MSRevenueUSD(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_MSRevenueUSD = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_MSRevenueUSD


    private void ReadField_impl_OperationalCostAllowanceAdvertiserCurrency(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_OperationalCostAllowanceAdvertiserCurrency = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_OperationalCostAllowanceAdvertiserCurrency


    private void ReadField_impl_OperationalCostAllowanceUSD(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_OperationalCostAllowanceUSD = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_OperationalCostAllowanceUSD


    private void ReadField_impl_OrderId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_OrderId = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_OrderId


    private void ReadField_impl_PricingModelId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_PricingModelId = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_PricingModelId


    private void ReadField_impl_ProbabilityOfClick(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_ProbabilityOfClick = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ProbabilityOfClick


    private void ReadField_impl_ProductId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_ProductId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ProductId


    private void ReadField_impl_PublisherEarningsAdvertiserCurrency(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_PublisherEarningsAdvertiserCurrency = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_PublisherEarningsAdvertiserCurrency


    private void ReadField_impl_PublisherEarningsPublisherCurrency(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_PublisherEarningsPublisherCurrency = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_PublisherEarningsPublisherCurrency


    private void ReadField_impl_PublisherEarningsUSD(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_PublisherEarningsUSD = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_PublisherEarningsUSD


    private void ReadField_impl_RankScore(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_RankScore = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_RankScore


    private void ReadField_impl_RelativePosition(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_RelativePosition = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_RelativePosition


    private void ReadField_impl_SellableNodeId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_SellableNodeId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_SellableNodeId


    private void ReadField_impl_SmartPricingModelId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_SmartPricingModelId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_SmartPricingModelId


    private void ReadField_impl_WinningSegmentId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_WinningSegmentId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_WinningSegmentId


    private void ReadField_impl_TargetedLocationType(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_TargetedLocationType = global::Microsoft.Bond.ReadHelper.ReadUInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_TargetedLocationType


    private void ReadField_impl_ExchangeRateDayId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_ExchangeRateDayId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ExchangeRateDayId


    private void ReadField_impl_AdExtensionId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdExtensionId = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdExtensionId


    private void ReadField_impl_AdExtensionItemId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdExtensionItemId = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdExtensionItemId


    private void ReadField_impl_AdExtensionItemRenderedLayoutId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdExtensionItemRenderedLayoutId = global::Microsoft.Bond.ReadHelper.ReadUInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdExtensionItemRenderedLayoutId


    private void ReadField_impl_AdExtensionTypeId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdExtensionTypeId = global::Microsoft.Bond.ReadHelper.ReadInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdExtensionTypeId


    private void ReadField_impl_AdExtensionRenderedLayoutId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdExtensionRenderedLayoutId = global::Microsoft.Bond.ReadHelper.ReadUInt16(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdExtensionRenderedLayoutId


    private void ReadField_impl_Click_DateTime(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_Click_DateTime = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Click_DateTime


    private void ReadField_impl_LocationIds(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_LocationIds.Capacity < count2)
        {
            this.m_LocationIds.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            Int32 element3 = default(Int32);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType1);
            this.m_LocationIds.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_LocationIds


    private void ReadField_impl_ListingTypeId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_ListingTypeId = global::Microsoft.Bond.ReadHelper.ReadInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ListingTypeId


    private void ReadField_impl_FraudReason(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_FraudReason.Capacity < count2)
        {
            this.m_FraudReason.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            Byte element3 = default(Byte);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadUInt8(reader, elemType1);
            this.m_FraudReason.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_FraudReason


    private void ReadField_impl_LogDelta(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_LogDelta = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_LogDelta


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(SearchClickDetailSpark))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        UInt32 count1 = (UInt32)((m_ABTestingTypes != null) ? 1 : 0);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ABTestingTypes, Schema.ABTestingTypes_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count1 != 0)
                {
                        writer.WriteInt16(m_ABTestingTypes.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ABTestingTypes, Schema.ABTestingTypes_meta);
        }

        if (writeAllFields || (!Schema.ABTestName_meta.default_value.Equals(m_ABTestName)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ABTestName, Schema.ABTestName_meta);
                writer.WriteString(m_ABTestName);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ABTestName, Schema.ABTestName_meta);
        }

        UInt32 count2 = (UInt32)((m_ActualImpRange != null) ? 1 : 0);
        if (writeAllFields || count2 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ActualImpRange, Schema.ActualImpRange_meta);
                writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_INT8);
                if (count2 != 0)
                {
                        writer.WriteInt8(m_ActualImpRange.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ActualImpRange, Schema.ActualImpRange_meta);
        }

        UInt32 count3 = (UInt32)((m_ActualMLImpRange != null) ? 1 : 0);
        if (writeAllFields || count3 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ActualMLImpRange, Schema.ActualMLImpRange_meta);
                writer.WriteContainerBegin(count3, global::Microsoft.Bond.BondDataType.BT_INT8);
                if (count3 != 0)
                {
                        writer.WriteInt8(m_ActualMLImpRange.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ActualMLImpRange, Schema.ActualMLImpRange_meta);
        }

        if (writeAllFields || (!Schema.AdLanguage_meta.default_value.Equals(m_AdLanguage)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AdLanguage, Schema.AdLanguage_meta);
                writer.WriteString(m_AdLanguage);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AdLanguage, Schema.AdLanguage_meta);
        }

        UInt32 count4 = (UInt32)((m_AdServerStatusId != null) ? 1 : 0);
        if (writeAllFields || count4 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdServerStatusId, Schema.AdServerStatusId_meta);
                writer.WriteContainerBegin(count4, global::Microsoft.Bond.BondDataType.BT_UINT8);
                if (count4 != 0)
                {
                        writer.WriteUInt8(m_AdServerStatusId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdServerStatusId, Schema.AdServerStatusId_meta);
        }

        if (writeAllFields || (!Schema.AdUnitId_meta.default_value.Equals(m_AdUnitId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.AdUnitId, Schema.AdUnitId_meta);
                writer.WriteInt32(m_AdUnitId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.AdUnitId, Schema.AdUnitId_meta);
        }

        if (writeAllFields || (!Schema.AdUnitTypeId_meta.default_value.Equals(m_AdUnitTypeId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT8, __ordinals.AdUnitTypeId, Schema.AdUnitTypeId_meta);
                writer.WriteInt8(m_AdUnitTypeId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT8, __ordinals.AdUnitTypeId, Schema.AdUnitTypeId_meta);
        }

        UInt32 count5 = (UInt32)((m_AlgorithmFilterId != null) ? 1 : 0);
        if (writeAllFields || count5 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AlgorithmFilterId, Schema.AlgorithmFilterId_meta);
                writer.WriteContainerBegin(count5, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count5 != 0)
                {
                        writer.WriteInt32(m_AlgorithmFilterId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AlgorithmFilterId, Schema.AlgorithmFilterId_meta);
        }

        UInt32 count6 = (UInt32)((m_AlgorithmId != null) ? 1 : 0);
        if (writeAllFields || count6 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AlgorithmId, Schema.AlgorithmId_meta);
                writer.WriteContainerBegin(count6, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count6 != 0)
                {
                        writer.WriteInt32(m_AlgorithmId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AlgorithmId, Schema.AlgorithmId_meta);
        }

        UInt32 count7 = (UInt32)((m_Click_OrderItemId != null) ? 1 : 0);
        if (writeAllFields || count7 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Click_OrderItemId, Schema.Click_OrderItemId_meta);
                writer.WriteContainerBegin(count7, global::Microsoft.Bond.BondDataType.BT_INT64);
                if (count7 != 0)
                {
                        writer.WriteInt64(m_Click_OrderItemId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Click_OrderItemId, Schema.Click_OrderItemId_meta);
        }

        UInt32 count8 = (UInt32)((m_AskedAdCnt != null) ? 1 : 0);
        if (writeAllFields || count8 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AskedAdCnt, Schema.AskedAdCnt_meta);
                writer.WriteContainerBegin(count8, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count8 != 0)
                {
                        writer.WriteInt16(m_AskedAdCnt.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AskedAdCnt, Schema.AskedAdCnt_meta);
        }

        UInt32 count9 = (UInt32)((m_BaseImpRange != null) ? 1 : 0);
        if (writeAllFields || count9 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.BaseImpRange, Schema.BaseImpRange_meta);
                writer.WriteContainerBegin(count9, global::Microsoft.Bond.BondDataType.BT_INT8);
                if (count9 != 0)
                {
                        writer.WriteInt8(m_BaseImpRange.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.BaseImpRange, Schema.BaseImpRange_meta);
        }

        UInt32 count10 = (UInt32)((m_BidDensity != null) ? 1 : 0);
        if (writeAllFields || count10 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.BidDensity, Schema.BidDensity_meta);
                writer.WriteContainerBegin(count10, global::Microsoft.Bond.BondDataType.BT_DOUBLE);
                if (count10 != 0)
                {
                        writer.WriteDouble(m_BidDensity.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.BidDensity, Schema.BidDensity_meta);
        }

        if (writeAllFields || (!Schema.BingVertical_meta.default_value.Equals(m_BingVertical)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.BingVertical, Schema.BingVertical_meta);
                writer.WriteString(m_BingVertical);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.BingVertical, Schema.BingVertical_meta);
        }

        if (writeAllFields || (!Schema.BucketId_meta.default_value.Equals(m_BucketId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.BucketId, Schema.BucketId_meta);
                writer.WriteString(m_BucketId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.BucketId, Schema.BucketId_meta);
        }

        UInt32 count11 = (UInt32)((m_CategoryId != null) ? 1 : 0);
        if (writeAllFields || count11 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CategoryId, Schema.CategoryId_meta);
                writer.WriteContainerBegin(count11, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count11 != 0)
                {
                        writer.WriteInt16(m_CategoryId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CategoryId, Schema.CategoryId_meta);
        }

        UInt32 count12 = ((UInt32)m_ChannelIds.Count);
        if (writeAllFields || count12 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ChannelIds, Schema.ChannelIds_meta);
                writer.WriteContainerBegin(count12, global::Microsoft.Bond.BondDataType.BT_INT32);
            for (int idx13 = 0; idx13 < count12; idx13++)
            {
                    writer.WriteInt32(m_ChannelIds[idx13]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ChannelIds, Schema.ChannelIds_meta);
        }

        if (writeAllFields || (!Schema.CID_meta.default_value.Equals(m_CID)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.CID, Schema.CID_meta);
                writer.WriteString(m_CID);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.CID, Schema.CID_meta);
        }

        if (writeAllFields || (!Schema.PageView_ClientIP_meta.default_value.Equals(m_PageView_ClientIP)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PageView_ClientIP, Schema.PageView_ClientIP_meta);
                writer.WriteString(m_PageView_ClientIP);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PageView_ClientIP, Schema.PageView_ClientIP_meta);
        }

        UInt32 count14 = (UInt32)((m_ClientTimeZoneId != null) ? 1 : 0);
        if (writeAllFields || count14 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ClientTimeZoneId, Schema.ClientTimeZoneId_meta);
                writer.WriteContainerBegin(count14, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count14 != 0)
                {
                        writer.WriteInt16(m_ClientTimeZoneId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ClientTimeZoneId, Schema.ClientTimeZoneId_meta);
        }

        UInt32 count15 = (UInt32)((m_CodePage != null) ? 1 : 0);
        if (writeAllFields || count15 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CodePage, Schema.CodePage_meta);
                writer.WriteContainerBegin(count15, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count15 != 0)
                {
                        writer.WriteInt32(m_CodePage.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CodePage, Schema.CodePage_meta);
        }

        UInt32 count16 = (UInt32)((m_DateTime != null) ? 1 : 0);
        if (writeAllFields || count16 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DateTime, Schema.DateTime_meta);
                writer.WriteContainerBegin(count16, global::Microsoft.Bond.BondDataType.BT_INT64);
                if (count16 != 0)
                {
                        writer.WriteInt64(m_DateTime.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DateTime, Schema.DateTime_meta);
        }

        UInt32 count17 = (UInt32)((m_DeviceId != null) ? 1 : 0);
        if (writeAllFields || count17 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DeviceId, Schema.DeviceId_meta);
                writer.WriteContainerBegin(count17, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count17 != 0)
                {
                        writer.WriteInt32(m_DeviceId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DeviceId, Schema.DeviceId_meta);
        }

        UInt32 count18 = (UInt32)((m_DeviceOSId != null) ? 1 : 0);
        if (writeAllFields || count18 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DeviceOSId, Schema.DeviceOSId_meta);
                writer.WriteContainerBegin(count18, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count18 != 0)
                {
                        writer.WriteInt32(m_DeviceOSId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DeviceOSId, Schema.DeviceOSId_meta);
        }

        if (writeAllFields || (!Schema.DeviceOSName_meta.default_value.Equals(m_DeviceOSName)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.DeviceOSName, Schema.DeviceOSName_meta);
                writer.WriteString(m_DeviceOSName);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.DeviceOSName, Schema.DeviceOSName_meta);
        }

        if (writeAllFields || (!Schema.DeviceOSVersion_meta.default_value.Equals(m_DeviceOSVersion)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.DeviceOSVersion, Schema.DeviceOSVersion_meta);
                writer.WriteString(m_DeviceOSVersion);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.DeviceOSVersion, Schema.DeviceOSVersion_meta);
        }

        UInt32 count19 = (UInt32)((m_DeviceTypeId != null) ? 1 : 0);
        if (writeAllFields || count19 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DeviceTypeId, Schema.DeviceTypeId_meta);
                writer.WriteContainerBegin(count19, global::Microsoft.Bond.BondDataType.BT_INT8);
                if (count19 != 0)
                {
                        writer.WriteInt8(m_DeviceTypeId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DeviceTypeId, Schema.DeviceTypeId_meta);
        }

        UInt32 count20 = (UInt32)((m_DisputedFlag != null) ? 1 : 0);
        if (writeAllFields || count20 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DisputedFlag, Schema.DisputedFlag_meta);
                writer.WriteContainerBegin(count20, global::Microsoft.Bond.BondDataType.BT_BOOL);
                if (count20 != 0)
                {
                        writer.WriteBool(m_DisputedFlag.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DisputedFlag, Schema.DisputedFlag_meta);
        }

        UInt32 count21 = (UInt32)((m_DistributionChannelId != null) ? 1 : 0);
        if (writeAllFields || count21 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DistributionChannelId, Schema.DistributionChannelId_meta);
                writer.WriteContainerBegin(count21, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count21 != 0)
                {
                        writer.WriteInt16(m_DistributionChannelId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DistributionChannelId, Schema.DistributionChannelId_meta);
        }

        UInt32 count22 = (UInt32)((m_DumpId != null) ? 1 : 0);
        if (writeAllFields || count22 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DumpId, Schema.DumpId_meta);
                writer.WriteContainerBegin(count22, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count22 != 0)
                {
                        writer.WriteInt32(m_DumpId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DumpId, Schema.DumpId_meta);
        }

        if (writeAllFields || (!Schema.DynamicParamNormalizedURL_meta.default_value.Equals(m_DynamicParamNormalizedURL)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.DynamicParamNormalizedURL, Schema.DynamicParamNormalizedURL_meta);
                writer.WriteString(m_DynamicParamNormalizedURL);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.DynamicParamNormalizedURL, Schema.DynamicParamNormalizedURL_meta);
        }

        UInt32 count23 = (UInt32)((m_ECPIThresholdValue != null) ? 1 : 0);
        if (writeAllFields || count23 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ECPIThresholdValue, Schema.ECPIThresholdValue_meta);
                writer.WriteContainerBegin(count23, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count23 != 0)
                {
                        writer.WriteInt32(m_ECPIThresholdValue.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ECPIThresholdValue, Schema.ECPIThresholdValue_meta);
        }

        UInt32 count24 = (UInt32)((m_ExperimentId != null) ? 1 : 0);
        if (writeAllFields || count24 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ExperimentId, Schema.ExperimentId_meta);
                writer.WriteContainerBegin(count24, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count24 != 0)
                {
                        writer.WriteInt32(m_ExperimentId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ExperimentId, Schema.ExperimentId_meta);
        }

        UInt32 count25 = (UInt32)((m_FlowId != null) ? 1 : 0);
        if (writeAllFields || count25 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.FlowId, Schema.FlowId_meta);
                writer.WriteContainerBegin(count25, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count25 != 0)
                {
                        writer.WriteInt16(m_FlowId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.FlowId, Schema.FlowId_meta);
        }

        if (writeAllFields || (!Schema.FormCode_meta.default_value.Equals(m_FormCode)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.FormCode, Schema.FormCode_meta);
                writer.WriteString(m_FormCode);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.FormCode, Schema.FormCode_meta);
        }

        UInt32 count26 = (UInt32)((m_GleamedAdRange != null) ? 1 : 0);
        if (writeAllFields || count26 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.GleamedAdRange, Schema.GleamedAdRange_meta);
                writer.WriteContainerBegin(count26, global::Microsoft.Bond.BondDataType.BT_INT8);
                if (count26 != 0)
                {
                        writer.WriteInt8(m_GleamedAdRange.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.GleamedAdRange, Schema.GleamedAdRange_meta);
        }

        if (writeAllFields || (!Schema.IsMI_meta.default_value.Equals(m_IsMI)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.IsMI, Schema.IsMI_meta);
                writer.WriteBool(m_IsMI);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.IsMI, Schema.IsMI_meta);
        }

        UInt32 count27 = (UInt32)((m_LogSequence != null) ? 1 : 0);
        if (writeAllFields || count27 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.LogSequence, Schema.LogSequence_meta);
                writer.WriteContainerBegin(count27, global::Microsoft.Bond.BondDataType.BT_INT8);
                if (count27 != 0)
                {
                        writer.WriteInt8(m_LogSequence.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.LogSequence, Schema.LogSequence_meta);
        }

        if (writeAllFields || (!Schema.LogServerName_meta.default_value.Equals(m_LogServerName)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.LogServerName, Schema.LogServerName_meta);
                writer.WriteString(m_LogServerName);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.LogServerName, Schema.LogServerName_meta);
        }

        UInt32 count28 = (UInt32)((m_MakeId != null) ? 1 : 0);
        if (writeAllFields || count28 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MakeId, Schema.MakeId_meta);
                writer.WriteContainerBegin(count28, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count28 != 0)
                {
                        writer.WriteInt32(m_MakeId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MakeId, Schema.MakeId_meta);
        }

        if (writeAllFields || (!Schema.MarketplaceClassificationId_meta.default_value.Equals(m_MarketplaceClassificationId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT8, __ordinals.MarketplaceClassificationId, Schema.MarketplaceClassificationId_meta);
                writer.WriteUInt8(m_MarketplaceClassificationId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT8, __ordinals.MarketplaceClassificationId, Schema.MarketplaceClassificationId_meta);
        }

        UInt32 count29 = (UInt32)((m_MediumId != null) ? 1 : 0);
        if (writeAllFields || count29 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MediumId, Schema.MediumId_meta);
                writer.WriteContainerBegin(count29, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count29 != 0)
                {
                        writer.WriteInt16(m_MediumId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MediumId, Schema.MediumId_meta);
        }

        if (writeAllFields || (!Schema.MIMUID_meta.default_value.Equals(m_MIMUID)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.MIMUID, Schema.MIMUID_meta);
                writer.WriteString(m_MIMUID);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.MIMUID, Schema.MIMUID_meta);
        }

        UInt32 count30 = (UInt32)((m_MTID != null) ? 1 : 0);
        if (writeAllFields || count30 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MTID, Schema.MTID_meta);
                writer.WriteContainerBegin(count30, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count30 != 0)
                {
                        writer.WriteInt32(m_MTID.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MTID, Schema.MTID_meta);
        }

        if (writeAllFields || (!Schema.NetworkId_meta.default_value.Equals(m_NetworkId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.NetworkId, Schema.NetworkId_meta);
                writer.WriteInt32(m_NetworkId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.NetworkId, Schema.NetworkId_meta);
        }

        if (writeAllFields || (!Schema.NonNormalizedQueryString_meta.default_value.Equals(m_NonNormalizedQueryString)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.NonNormalizedQueryString, Schema.NonNormalizedQueryString_meta);
                writer.WriteString(m_NonNormalizedQueryString);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.NonNormalizedQueryString, Schema.NonNormalizedQueryString_meta);
        }

        UInt32 count31 = (UInt32)((m_NumNonPforP != null) ? 1 : 0);
        if (writeAllFields || count31 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.NumNonPforP, Schema.NumNonPforP_meta);
                writer.WriteContainerBegin(count31, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count31 != 0)
                {
                        writer.WriteInt32(m_NumNonPforP.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.NumNonPforP, Schema.NumNonPforP_meta);
        }

        UInt32 count32 = (UInt32)((m_OriginalAdUnitId != null) ? 1 : 0);
        if (writeAllFields || count32 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OriginalAdUnitId, Schema.OriginalAdUnitId_meta);
                writer.WriteContainerBegin(count32, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count32 != 0)
                {
                        writer.WriteInt32(m_OriginalAdUnitId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OriginalAdUnitId, Schema.OriginalAdUnitId_meta);
        }

        UInt32 count33 = (UInt32)((m_OriginalPropertyId != null) ? 1 : 0);
        if (writeAllFields || count33 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OriginalPropertyId, Schema.OriginalPropertyId_meta);
                writer.WriteContainerBegin(count33, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count33 != 0)
                {
                        writer.WriteInt32(m_OriginalPropertyId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OriginalPropertyId, Schema.OriginalPropertyId_meta);
        }

        UInt32 count34 = (UInt32)((m_OriginalPublisherId != null) ? 1 : 0);
        if (writeAllFields || count34 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OriginalPublisherId, Schema.OriginalPublisherId_meta);
                writer.WriteContainerBegin(count34, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count34 != 0)
                {
                        writer.WriteInt32(m_OriginalPublisherId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OriginalPublisherId, Schema.OriginalPublisherId_meta);
        }

        UInt32 count35 = (UInt32)((m_OSId != null) ? 1 : 0);
        if (writeAllFields || count35 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OSId, Schema.OSId_meta);
                writer.WriteContainerBegin(count35, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count35 != 0)
                {
                        writer.WriteInt32(m_OSId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OSId, Schema.OSId_meta);
        }

        if (writeAllFields || (!Schema.WebsiteCountry_meta.default_value.Equals(m_WebsiteCountry)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.WebsiteCountry, Schema.WebsiteCountry_meta);
                writer.WriteString(m_WebsiteCountry);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.WebsiteCountry, Schema.WebsiteCountry_meta);
        }

        UInt32 count36 = (UInt32)((m_PageNumber != null) ? 1 : 0);
        if (writeAllFields || count36 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PageNumber, Schema.PageNumber_meta);
                writer.WriteContainerBegin(count36, global::Microsoft.Bond.BondDataType.BT_INT8);
                if (count36 != 0)
                {
                        writer.WriteInt8(m_PageNumber.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PageNumber, Schema.PageNumber_meta);
        }

        UInt32 count37 = (UInt32)((m_PageSectionId != null) ? 1 : 0);
        if (writeAllFields || count37 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PageSectionId, Schema.PageSectionId_meta);
                writer.WriteContainerBegin(count37, global::Microsoft.Bond.BondDataType.BT_INT8);
                if (count37 != 0)
                {
                        writer.WriteInt8(m_PageSectionId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PageSectionId, Schema.PageSectionId_meta);
        }

        UInt32 count38 = (UInt32)((m_PageType != null) ? 1 : 0);
        if (writeAllFields || count38 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PageType, Schema.PageType_meta);
                writer.WriteContainerBegin(count38, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count38 != 0)
                {
                        writer.WriteInt16(m_PageType.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PageType, Schema.PageType_meta);
        }

        if (writeAllFields || (!Schema.PartnerCode_meta.default_value.Equals(m_PartnerCode)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PartnerCode, Schema.PartnerCode_meta);
                writer.WriteString(m_PartnerCode);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PartnerCode, Schema.PartnerCode_meta);
        }

        if (writeAllFields || (!Schema.PassportAgeGroupId_meta.default_value.Equals(m_PassportAgeGroupId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PassportAgeGroupId, Schema.PassportAgeGroupId_meta);
                writer.WriteString(m_PassportAgeGroupId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PassportAgeGroupId, Schema.PassportAgeGroupId_meta);
        }

        if (writeAllFields || (!Schema.PassportBDay_meta.default_value.Equals(m_PassportBDay)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PassportBDay, Schema.PassportBDay_meta);
                writer.WriteString(m_PassportBDay);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PassportBDay, Schema.PassportBDay_meta);
        }

        if (writeAllFields || (!Schema.PassportFlags_meta.default_value.Equals(m_PassportFlags)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PassportFlags, Schema.PassportFlags_meta);
                writer.WriteString(m_PassportFlags);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PassportFlags, Schema.PassportFlags_meta);
        }

        if (writeAllFields || (!Schema.PassportGenderId_meta.default_value.Equals(m_PassportGenderId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PassportGenderId, Schema.PassportGenderId_meta);
                writer.WriteString(m_PassportGenderId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PassportGenderId, Schema.PassportGenderId_meta);
        }

        if (writeAllFields || (!Schema.PassportRegion_meta.default_value.Equals(m_PassportRegion)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PassportRegion, Schema.PassportRegion_meta);
                writer.WriteString(m_PassportRegion);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PassportRegion, Schema.PassportRegion_meta);
        }

        if (writeAllFields || (!Schema.PassportZipCode_meta.default_value.Equals(m_PassportZipCode)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PassportZipCode, Schema.PassportZipCode_meta);
                writer.WriteString(m_PassportZipCode);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PassportZipCode, Schema.PassportZipCode_meta);
        }

        if (writeAllFields || (!Schema.PCPB_meta.default_value.Equals(m_PCPB)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PCPB, Schema.PCPB_meta);
                writer.WriteString(m_PCPB);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PCPB, Schema.PCPB_meta);
        }

        UInt32 count39 = (UInt32)((m_PropertyId != null) ? 1 : 0);
        if (writeAllFields || count39 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PropertyId, Schema.PropertyId_meta);
                writer.WriteContainerBegin(count39, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count39 != 0)
                {
                        writer.WriteInt32(m_PropertyId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PropertyId, Schema.PropertyId_meta);
        }

        UInt32 count40 = (UInt32)((m_PubConfigGroupId != null) ? 1 : 0);
        if (writeAllFields || count40 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PubConfigGroupId, Schema.PubConfigGroupId_meta);
                writer.WriteContainerBegin(count40, global::Microsoft.Bond.BondDataType.BT_UINT32);
                if (count40 != 0)
                {
                        writer.WriteUInt32(m_PubConfigGroupId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PubConfigGroupId, Schema.PubConfigGroupId_meta);
        }

        UInt32 count41 = (UInt32)((m_PublisherAccountId != null) ? 1 : 0);
        if (writeAllFields || count41 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PublisherAccountId, Schema.PublisherAccountId_meta);
                writer.WriteContainerBegin(count41, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count41 != 0)
                {
                        writer.WriteInt32(m_PublisherAccountId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PublisherAccountId, Schema.PublisherAccountId_meta);
        }

        UInt32 count42 = ((UInt32)m_QueryLocationIds.Count);
        if (writeAllFields || count42 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.QueryLocationIds, Schema.QueryLocationIds_meta);
                writer.WriteContainerBegin(count42, global::Microsoft.Bond.BondDataType.BT_INT32);
            for (int idx43 = 0; idx43 < count42; idx43++)
            {
                    writer.WriteInt32(m_QueryLocationIds[idx43]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.QueryLocationIds, Schema.QueryLocationIds_meta);
        }

        if (writeAllFields || (!Schema.PublisherAccountTimeZone_meta.default_value.Equals(m_PublisherAccountTimeZone)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.PublisherAccountTimeZone, Schema.PublisherAccountTimeZone_meta);
                writer.WriteInt32(m_PublisherAccountTimeZone);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.PublisherAccountTimeZone, Schema.PublisherAccountTimeZone_meta);
        }

        UInt32 count44 = (UInt32)((m_PublisherCurrencyId != null) ? 1 : 0);
        if (writeAllFields || count44 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PublisherCurrencyId, Schema.PublisherCurrencyId_meta);
                writer.WriteContainerBegin(count44, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count44 != 0)
                {
                        writer.WriteInt16(m_PublisherCurrencyId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PublisherCurrencyId, Schema.PublisherCurrencyId_meta);
        }

        UInt32 count45 = (UInt32)((m_PublisherId != null) ? 1 : 0);
        if (writeAllFields || count45 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PublisherId, Schema.PublisherId_meta);
                writer.WriteContainerBegin(count45, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count45 != 0)
                {
                        writer.WriteInt32(m_PublisherId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PublisherId, Schema.PublisherId_meta);
        }

        UInt32 count46 = (UInt32)((m_PublisherOwnerId != null) ? 1 : 0);
        if (writeAllFields || count46 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PublisherOwnerId, Schema.PublisherOwnerId_meta);
                writer.WriteContainerBegin(count46, global::Microsoft.Bond.BondDataType.BT_UINT8);
                if (count46 != 0)
                {
                        writer.WriteUInt8(m_PublisherOwnerId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PublisherOwnerId, Schema.PublisherOwnerId_meta);
        }

        if (writeAllFields || (!Schema.QueryPhrase_meta.default_value.Equals(m_QueryPhrase)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.QueryPhrase, Schema.QueryPhrase_meta);
                writer.WriteString(m_QueryPhrase);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.QueryPhrase, Schema.QueryPhrase_meta);
        }

        UInt32 count47 = (UInt32)((m_ReasonCode != null) ? 1 : 0);
        if (writeAllFields || count47 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ReasonCode, Schema.ReasonCode_meta);
                writer.WriteContainerBegin(count47, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count47 != 0)
                {
                        writer.WriteInt32(m_ReasonCode.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ReasonCode, Schema.ReasonCode_meta);
        }

        if (writeAllFields || (!Schema.RelatedToAccountId_meta.default_value.Equals(m_RelatedToAccountId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.RelatedToAccountId, Schema.RelatedToAccountId_meta);
                writer.WriteInt32(m_RelatedToAccountId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.RelatedToAccountId, Schema.RelatedToAccountId_meta);
        }

        if (writeAllFields || (!Schema.RelationshipId_meta.default_value.Equals(m_RelationshipId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT8, __ordinals.RelationshipId, Schema.RelationshipId_meta);
                writer.WriteInt8(m_RelationshipId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT8, __ordinals.RelationshipId, Schema.RelationshipId_meta);
        }

        if (writeAllFields || (!Schema.IncomingPublisherWebSiteCountry_meta.default_value.Equals(m_IncomingPublisherWebSiteCountry)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.IncomingPublisherWebSiteCountry, Schema.IncomingPublisherWebSiteCountry_meta);
                writer.WriteString(m_IncomingPublisherWebSiteCountry);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.IncomingPublisherWebSiteCountry, Schema.IncomingPublisherWebSiteCountry_meta);
        }

        UInt32 count48 = (UInt32)((m_ReturnedAdCnt != null) ? 1 : 0);
        if (writeAllFields || count48 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ReturnedAdCnt, Schema.ReturnedAdCnt_meta);
                writer.WriteContainerBegin(count48, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count48 != 0)
                {
                        writer.WriteInt16(m_ReturnedAdCnt.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ReturnedAdCnt, Schema.ReturnedAdCnt_meta);
        }

        UInt32 count49 = (UInt32)((m_RSNId != null) ? 1 : 0);
        if (writeAllFields || count49 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.RSNId, Schema.RSNId_meta);
                writer.WriteContainerBegin(count49, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count49 != 0)
                {
                        writer.WriteInt32(m_RSNId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.RSNId, Schema.RSNId_meta);
        }

        UInt32 count50 = (UInt32)((m_SearchFormId != null) ? 1 : 0);
        if (writeAllFields || count50 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SearchFormId, Schema.SearchFormId_meta);
                writer.WriteContainerBegin(count50, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count50 != 0)
                {
                        writer.WriteInt32(m_SearchFormId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SearchFormId, Schema.SearchFormId_meta);
        }

        UInt32 count51 = (UInt32)((m_SearchSiteVersionId != null) ? 1 : 0);
        if (writeAllFields || count51 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SearchSiteVersionId, Schema.SearchSiteVersionId_meta);
                writer.WriteContainerBegin(count51, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count51 != 0)
                {
                        writer.WriteInt16(m_SearchSiteVersionId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SearchSiteVersionId, Schema.SearchSiteVersionId_meta);
        }

        if (writeAllFields || (!Schema.SmartPricing_meta.default_value.Equals(m_SmartPricing)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.SmartPricing, Schema.SmartPricing_meta);
                writer.WriteString(m_SmartPricing);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.SmartPricing, Schema.SmartPricing_meta);
        }

        UInt32 count52 = (UInt32)((m_SmartPricingDiscountAlgoId != null) ? 1 : 0);
        if (writeAllFields || count52 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SmartPricingDiscountAlgoId, Schema.SmartPricingDiscountAlgoId_meta);
                writer.WriteContainerBegin(count52, global::Microsoft.Bond.BondDataType.BT_UINT16);
                if (count52 != 0)
                {
                        writer.WriteUInt16(m_SmartPricingDiscountAlgoId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SmartPricingDiscountAlgoId, Schema.SmartPricingDiscountAlgoId_meta);
        }

        UInt32 count53 = (UInt32)((m_SmartPricingDiscountVersion != null) ? 1 : 0);
        if (writeAllFields || count53 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SmartPricingDiscountVersion, Schema.SmartPricingDiscountVersion_meta);
                writer.WriteContainerBegin(count53, global::Microsoft.Bond.BondDataType.BT_UINT32);
                if (count53 != 0)
                {
                        writer.WriteUInt32(m_SmartPricingDiscountVersion.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SmartPricingDiscountVersion, Schema.SmartPricingDiscountVersion_meta);
        }

        UInt32 count54 = (UInt32)((m_SmartPricingQueryCategoryAlgoId != null) ? 1 : 0);
        if (writeAllFields || count54 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SmartPricingQueryCategoryAlgoId, Schema.SmartPricingQueryCategoryAlgoId_meta);
                writer.WriteContainerBegin(count54, global::Microsoft.Bond.BondDataType.BT_UINT16);
                if (count54 != 0)
                {
                        writer.WriteUInt16(m_SmartPricingQueryCategoryAlgoId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SmartPricingQueryCategoryAlgoId, Schema.SmartPricingQueryCategoryAlgoId_meta);
        }

        UInt32 count55 = (UInt32)((m_SmartPricingQueryCategoryId != null) ? 1 : 0);
        if (writeAllFields || count55 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SmartPricingQueryCategoryId, Schema.SmartPricingQueryCategoryId_meta);
                writer.WriteContainerBegin(count55, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count55 != 0)
                {
                        writer.WriteInt32(m_SmartPricingQueryCategoryId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SmartPricingQueryCategoryId, Schema.SmartPricingQueryCategoryId_meta);
        }

        UInt32 count56 = (UInt32)((m_StartPosition != null) ? 1 : 0);
        if (writeAllFields || count56 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.StartPosition, Schema.StartPosition_meta);
                writer.WriteContainerBegin(count56, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count56 != 0)
                {
                        writer.WriteInt32(m_StartPosition.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.StartPosition, Schema.StartPosition_meta);
        }

        UInt32 count57 = (UInt32)((m_SubCategoryId != null) ? 1 : 0);
        if (writeAllFields || count57 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SubCategoryId, Schema.SubCategoryId_meta);
                writer.WriteContainerBegin(count57, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count57 != 0)
                {
                        writer.WriteInt16(m_SubCategoryId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SubCategoryId, Schema.SubCategoryId_meta);
        }

        if (writeAllFields || (!Schema.TerminalNodeId_meta.default_value.Equals(m_TerminalNodeId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.TerminalNodeId, Schema.TerminalNodeId_meta);
                writer.WriteInt32(m_TerminalNodeId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.TerminalNodeId, Schema.TerminalNodeId_meta);
        }

        if (writeAllFields || (!Schema.TPAdUId_meta.default_value.Equals(m_TPAdUId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.TPAdUId, Schema.TPAdUId_meta);
                writer.WriteInt32(m_TPAdUId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.TPAdUId, Schema.TPAdUId_meta);
        }

        if (writeAllFields || (!Schema.TrafficPartitionCode_meta.default_value.Equals(m_TrafficPartitionCode)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.TrafficPartitionCode, Schema.TrafficPartitionCode_meta);
                writer.WriteString(m_TrafficPartitionCode);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.TrafficPartitionCode, Schema.TrafficPartitionCode_meta);
        }

        if (writeAllFields || (!Schema.TypeTag_meta.default_value.Equals(m_TypeTag)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.TypeTag, Schema.TypeTag_meta);
                writer.WriteString(m_TypeTag);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.TypeTag, Schema.TypeTag_meta);
        }

        UInt32 count58 = (UInt32)((m_DeviceOSId2 != null) ? 1 : 0);
        if (writeAllFields || count58 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DeviceOSId2, Schema.DeviceOSId2_meta);
                writer.WriteContainerBegin(count58, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count58 != 0)
                {
                        writer.WriteInt32(m_DeviceOSId2.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DeviceOSId2, Schema.DeviceOSId2_meta);
        }

        UInt32 count59 = (UInt32)((m_AbsPosition != null) ? 1 : 0);
        if (writeAllFields || count59 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AbsPosition, Schema.AbsPosition_meta);
                writer.WriteContainerBegin(count59, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count59 != 0)
                {
                        writer.WriteInt32(m_AbsPosition.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AbsPosition, Schema.AbsPosition_meta);
        }

        UInt32 count60 = (UInt32)((m_ActualBid != null) ? 1 : 0);
        if (writeAllFields || count60 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ActualBid, Schema.ActualBid_meta);
                writer.WriteContainerBegin(count60, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count60 != 0)
                {
                        writer.WriteInt32(m_ActualBid.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ActualBid, Schema.ActualBid_meta);
        }

        UInt32 count61 = (UInt32)((m_AdDisplayTypeId != null) ? 1 : 0);
        if (writeAllFields || count61 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdDisplayTypeId, Schema.AdDisplayTypeId_meta);
                writer.WriteContainerBegin(count61, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count61 != 0)
                {
                        writer.WriteInt32(m_AdDisplayTypeId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdDisplayTypeId, Schema.AdDisplayTypeId_meta);
        }

        UInt32 count62 = (UInt32)((m_AdjustedRank != null) ? 1 : 0);
        if (writeAllFields || count62 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdjustedRank, Schema.AdjustedRank_meta);
                writer.WriteContainerBegin(count62, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count62 != 0)
                {
                        writer.WriteInt32(m_AdjustedRank.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdjustedRank, Schema.AdjustedRank_meta);
        }

        UInt32 count63 = (UInt32)((m_AdLayoutId != null) ? 1 : 0);
        if (writeAllFields || count63 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdLayoutId, Schema.AdLayoutId_meta);
                writer.WriteContainerBegin(count63, global::Microsoft.Bond.BondDataType.BT_INT8);
                if (count63 != 0)
                {
                        writer.WriteInt8(m_AdLayoutId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdLayoutId, Schema.AdLayoutId_meta);
        }

        UInt32 count64 = (UInt32)((m_AdvertiserAccountId != null) ? 1 : 0);
        if (writeAllFields || count64 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdvertiserAccountId, Schema.AdvertiserAccountId_meta);
                writer.WriteContainerBegin(count64, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count64 != 0)
                {
                        writer.WriteInt32(m_AdvertiserAccountId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdvertiserAccountId, Schema.AdvertiserAccountId_meta);
        }

        UInt32 count65 = (UInt32)((m_AdvertiserAccountPreferredCurrencyId != null) ? 1 : 0);
        if (writeAllFields || count65 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdvertiserAccountPreferredCurrencyId, Schema.AdvertiserAccountPreferredCurrencyId_meta);
                writer.WriteContainerBegin(count65, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count65 != 0)
                {
                        writer.WriteInt16(m_AdvertiserAccountPreferredCurrencyId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdvertiserAccountPreferredCurrencyId, Schema.AdvertiserAccountPreferredCurrencyId_meta);
        }

        UInt32 count66 = (UInt32)((m_AdvertiserNetAmountInPublisherCurrency != null) ? 1 : 0);
        if (writeAllFields || count66 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdvertiserNetAmountInPublisherCurrency, Schema.AdvertiserNetAmountInPublisherCurrency_meta);
                writer.WriteContainerBegin(count66, global::Microsoft.Bond.BondDataType.BT_DOUBLE);
                if (count66 != 0)
                {
                        writer.WriteDouble(m_AdvertiserNetAmountInPublisherCurrency.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdvertiserNetAmountInPublisherCurrency, Schema.AdvertiserNetAmountInPublisherCurrency_meta);
        }

        UInt32 count67 = (UInt32)((m_AdvertiserOwnerId != null) ? 1 : 0);
        if (writeAllFields || count67 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdvertiserOwnerId, Schema.AdvertiserOwnerId_meta);
                writer.WriteContainerBegin(count67, global::Microsoft.Bond.BondDataType.BT_UINT8);
                if (count67 != 0)
                {
                        writer.WriteUInt8(m_AdvertiserOwnerId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdvertiserOwnerId, Schema.AdvertiserOwnerId_meta);
        }

        UInt32 count68 = (UInt32)((m_AmountChargedAdvertiserCurrency != null) ? 1 : 0);
        if (writeAllFields || count68 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AmountChargedAdvertiserCurrency, Schema.AmountChargedAdvertiserCurrency_meta);
                writer.WriteContainerBegin(count68, global::Microsoft.Bond.BondDataType.BT_DOUBLE);
                if (count68 != 0)
                {
                        writer.WriteDouble(m_AmountChargedAdvertiserCurrency.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AmountChargedAdvertiserCurrency, Schema.AmountChargedAdvertiserCurrency_meta);
        }

        UInt32 count69 = (UInt32)((m_AmountChargedAuctionCurrency != null) ? 1 : 0);
        if (writeAllFields || count69 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AmountChargedAuctionCurrency, Schema.AmountChargedAuctionCurrency_meta);
                writer.WriteContainerBegin(count69, global::Microsoft.Bond.BondDataType.BT_DOUBLE);
                if (count69 != 0)
                {
                        writer.WriteDouble(m_AmountChargedAuctionCurrency.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AmountChargedAuctionCurrency, Schema.AmountChargedAuctionCurrency_meta);
        }

        UInt32 count70 = (UInt32)((m_AmountChargedAuctionCurrencyUnadjusted != null) ? 1 : 0);
        if (writeAllFields || count70 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AmountChargedAuctionCurrencyUnadjusted, Schema.AmountChargedAuctionCurrencyUnadjusted_meta);
                writer.WriteContainerBegin(count70, global::Microsoft.Bond.BondDataType.BT_DOUBLE);
                if (count70 != 0)
                {
                        writer.WriteDouble(m_AmountChargedAuctionCurrencyUnadjusted.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AmountChargedAuctionCurrencyUnadjusted, Schema.AmountChargedAuctionCurrencyUnadjusted_meta);
        }

        UInt32 count71 = (UInt32)((m_AmountChargedConstantUSDExchangeRt != null) ? 1 : 0);
        if (writeAllFields || count71 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AmountChargedConstantUSDExchangeRt, Schema.AmountChargedConstantUSDExchangeRt_meta);
                writer.WriteContainerBegin(count71, global::Microsoft.Bond.BondDataType.BT_DOUBLE);
                if (count71 != 0)
                {
                        writer.WriteDouble(m_AmountChargedConstantUSDExchangeRt.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AmountChargedConstantUSDExchangeRt, Schema.AmountChargedConstantUSDExchangeRt_meta);
        }

        UInt32 count72 = (UInt32)((m_AmountChargedInPublisherCurrency != null) ? 1 : 0);
        if (writeAllFields || count72 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AmountChargedInPublisherCurrency, Schema.AmountChargedInPublisherCurrency_meta);
                writer.WriteContainerBegin(count72, global::Microsoft.Bond.BondDataType.BT_DOUBLE);
                if (count72 != 0)
                {
                        writer.WriteDouble(m_AmountChargedInPublisherCurrency.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AmountChargedInPublisherCurrency, Schema.AmountChargedInPublisherCurrency_meta);
        }

        UInt32 count73 = (UInt32)((m_AmountChargedLanguageCurrency != null) ? 1 : 0);
        if (writeAllFields || count73 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AmountChargedLanguageCurrency, Schema.AmountChargedLanguageCurrency_meta);
                writer.WriteContainerBegin(count73, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count73 != 0)
                {
                        writer.WriteInt32(m_AmountChargedLanguageCurrency.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AmountChargedLanguageCurrency, Schema.AmountChargedLanguageCurrency_meta);
        }

        UInt32 count74 = (UInt32)((m_AmountChargedUSDMonthlyExchangeRt != null) ? 1 : 0);
        if (writeAllFields || count74 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AmountChargedUSDMonthlyExchangeRt, Schema.AmountChargedUSDMonthlyExchangeRt_meta);
                writer.WriteContainerBegin(count74, global::Microsoft.Bond.BondDataType.BT_DOUBLE);
                if (count74 != 0)
                {
                        writer.WriteDouble(m_AmountChargedUSDMonthlyExchangeRt.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AmountChargedUSDMonthlyExchangeRt, Schema.AmountChargedUSDMonthlyExchangeRt_meta);
        }

        if (writeAllFields || (!Schema.BiddedKeyword_meta.default_value.Equals(m_BiddedKeyword)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.BiddedKeyword, Schema.BiddedKeyword_meta);
                writer.WriteString(m_BiddedKeyword);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.BiddedKeyword, Schema.BiddedKeyword_meta);
        }

        UInt32 count75 = (UInt32)((m_BiddedKeywordId != null) ? 1 : 0);
        if (writeAllFields || count75 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.BiddedKeywordId, Schema.BiddedKeywordId_meta);
                writer.WriteContainerBegin(count75, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count75 != 0)
                {
                        writer.WriteInt32(m_BiddedKeywordId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.BiddedKeywordId, Schema.BiddedKeywordId_meta);
        }

        UInt32 count76 = (UInt32)((m_BiddedMatchTypeId != null) ? 1 : 0);
        if (writeAllFields || count76 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.BiddedMatchTypeId, Schema.BiddedMatchTypeId_meta);
                writer.WriteContainerBegin(count76, global::Microsoft.Bond.BondDataType.BT_INT8);
                if (count76 != 0)
                {
                        writer.WriteInt8(m_BiddedMatchTypeId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.BiddedMatchTypeId, Schema.BiddedMatchTypeId_meta);
        }

        UInt32 count77 = (UInt32)((m_BusinessLocationId != null) ? 1 : 0);
        if (writeAllFields || count77 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.BusinessLocationId, Schema.BusinessLocationId_meta);
                writer.WriteContainerBegin(count77, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count77 != 0)
                {
                        writer.WriteInt32(m_BusinessLocationId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.BusinessLocationId, Schema.BusinessLocationId_meta);
        }

        UInt32 count78 = (UInt32)((m_CampaignId != null) ? 1 : 0);
        if (writeAllFields || count78 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CampaignId, Schema.CampaignId_meta);
                writer.WriteContainerBegin(count78, global::Microsoft.Bond.BondDataType.BT_UINT64);
                if (count78 != 0)
                {
                        writer.WriteUInt64(m_CampaignId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CampaignId, Schema.CampaignId_meta);
        }

        UInt32 count79 = (UInt32)((m_CampaignTimeZoneId != null) ? 1 : 0);
        if (writeAllFields || count79 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CampaignTimeZoneId, Schema.CampaignTimeZoneId_meta);
                writer.WriteContainerBegin(count79, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count79 != 0)
                {
                        writer.WriteInt32(m_CampaignTimeZoneId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CampaignTimeZoneId, Schema.CampaignTimeZoneId_meta);
        }

        UInt32 count80 = (UInt32)((m_CampaignTZDayId != null) ? 1 : 0);
        if (writeAllFields || count80 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CampaignTZDayId, Schema.CampaignTZDayId_meta);
                writer.WriteContainerBegin(count80, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count80 != 0)
                {
                        writer.WriteInt16(m_CampaignTZDayId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CampaignTZDayId, Schema.CampaignTZDayId_meta);
        }

        UInt32 count81 = (UInt32)((m_CampaignTZHourNum != null) ? 1 : 0);
        if (writeAllFields || count81 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CampaignTZHourNum, Schema.CampaignTZHourNum_meta);
                writer.WriteContainerBegin(count81, global::Microsoft.Bond.BondDataType.BT_INT8);
                if (count81 != 0)
                {
                        writer.WriteInt8(m_CampaignTZHourNum.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CampaignTZHourNum, Schema.CampaignTZHourNum_meta);
        }

        if (writeAllFields || (!Schema.CleanKeywordHash_meta.default_value.Equals(m_CleanKeywordHash)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.CleanKeywordHash, Schema.CleanKeywordHash_meta);
                writer.WriteString(m_CleanKeywordHash);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.CleanKeywordHash, Schema.CleanKeywordHash_meta);
        }

        UInt32 count82 = (UInt32)((m_CurrencyId != null) ? 1 : 0);
        if (writeAllFields || count82 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CurrencyId, Schema.CurrencyId_meta);
                writer.WriteContainerBegin(count82, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count82 != 0)
                {
                        writer.WriteInt16(m_CurrencyId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CurrencyId, Schema.CurrencyId_meta);
        }

        UInt32 count83 = (UInt32)((m_CustomerId != null) ? 1 : 0);
        if (writeAllFields || count83 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CustomerId, Schema.CustomerId_meta);
                writer.WriteContainerBegin(count83, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count83 != 0)
                {
                        writer.WriteInt32(m_CustomerId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CustomerId, Schema.CustomerId_meta);
        }

        UInt32 count84 = (UInt32)((m_DeliveryEngineRank != null) ? 1 : 0);
        if (writeAllFields || count84 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DeliveryEngineRank, Schema.DeliveryEngineRank_meta);
                writer.WriteContainerBegin(count84, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count84 != 0)
                {
                        writer.WriteInt16(m_DeliveryEngineRank.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DeliveryEngineRank, Schema.DeliveryEngineRank_meta);
        }

        if (writeAllFields || (!Schema.EstimatedPagePosition_meta.default_value.Equals(m_EstimatedPagePosition)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.EstimatedPagePosition, Schema.EstimatedPagePosition_meta);
                writer.WriteString(m_EstimatedPagePosition);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.EstimatedPagePosition, Schema.EstimatedPagePosition_meta);
        }

        UInt32 count85 = (UInt32)((m_ExtendedMatchTypeId != null) ? 1 : 0);
        if (writeAllFields || count85 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ExtendedMatchTypeId, Schema.ExtendedMatchTypeId_meta);
                writer.WriteContainerBegin(count85, global::Microsoft.Bond.BondDataType.BT_INT8);
                if (count85 != 0)
                {
                        writer.WriteInt8(m_ExtendedMatchTypeId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ExtendedMatchTypeId, Schema.ExtendedMatchTypeId_meta);
        }

        UInt32 count86 = (UInt32)((m_GleamedAdDelivered != null) ? 1 : 0);
        if (writeAllFields || count86 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.GleamedAdDelivered, Schema.GleamedAdDelivered_meta);
                writer.WriteContainerBegin(count86, global::Microsoft.Bond.BondDataType.BT_INT8);
                if (count86 != 0)
                {
                        writer.WriteInt8(m_GleamedAdDelivered.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.GleamedAdDelivered, Schema.GleamedAdDelivered_meta);
        }

        UInt32 count87 = (UInt32)((m_KeywordScore != null) ? 1 : 0);
        if (writeAllFields || count87 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.KeywordScore, Schema.KeywordScore_meta);
                writer.WriteContainerBegin(count87, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count87 != 0)
                {
                        writer.WriteInt16(m_KeywordScore.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.KeywordScore, Schema.KeywordScore_meta);
        }

        UInt32 count88 = (UInt32)((m_KeywordSourceBitmap != null) ? 1 : 0);
        if (writeAllFields || count88 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.KeywordSourceBitmap, Schema.KeywordSourceBitmap_meta);
                writer.WriteContainerBegin(count88, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count88 != 0)
                {
                        writer.WriteInt32(m_KeywordSourceBitmap.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.KeywordSourceBitmap, Schema.KeywordSourceBitmap_meta);
        }

        UInt32 count89 = (UInt32)((m_vectoringTypeId != null) ? 1 : 0);
        if (writeAllFields || count89 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.vectoringTypeId, Schema.vectoringTypeId_meta);
                writer.WriteContainerBegin(count89, global::Microsoft.Bond.BondDataType.BT_INT8);
                if (count89 != 0)
                {
                        writer.WriteInt8(m_vectoringTypeId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.vectoringTypeId, Schema.vectoringTypeId_meta);
        }

        UInt32 count90 = (UInt32)((m_OnlineFraudQualityBand != null) ? 1 : 0);
        if (writeAllFields || count90 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OnlineFraudQualityBand, Schema.OnlineFraudQualityBand_meta);
                writer.WriteContainerBegin(count90, global::Microsoft.Bond.BondDataType.BT_INT8);
                if (count90 != 0)
                {
                        writer.WriteInt8(m_OnlineFraudQualityBand.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OnlineFraudQualityBand, Schema.OnlineFraudQualityBand_meta);
        }

        UInt32 count91 = (UInt32)((m_MatchScore != null) ? 1 : 0);
        if (writeAllFields || count91 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MatchScore, Schema.MatchScore_meta);
                writer.WriteContainerBegin(count91, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count91 != 0)
                {
                        writer.WriteInt32(m_MatchScore.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MatchScore, Schema.MatchScore_meta);
        }

        UInt32 count92 = (UInt32)((m_MatchTypeId != null) ? 1 : 0);
        if (writeAllFields || count92 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MatchTypeId, Schema.MatchTypeId_meta);
                writer.WriteContainerBegin(count92, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count92 != 0)
                {
                        writer.WriteInt32(m_MatchTypeId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MatchTypeId, Schema.MatchTypeId_meta);
        }

        UInt32 count93 = (UInt32)((m_MSRevenueAdvertiserCurrency != null) ? 1 : 0);
        if (writeAllFields || count93 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MSRevenueAdvertiserCurrency, Schema.MSRevenueAdvertiserCurrency_meta);
                writer.WriteContainerBegin(count93, global::Microsoft.Bond.BondDataType.BT_DOUBLE);
                if (count93 != 0)
                {
                        writer.WriteDouble(m_MSRevenueAdvertiserCurrency.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MSRevenueAdvertiserCurrency, Schema.MSRevenueAdvertiserCurrency_meta);
        }

        UInt32 count94 = (UInt32)((m_MSRevenueUSD != null) ? 1 : 0);
        if (writeAllFields || count94 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MSRevenueUSD, Schema.MSRevenueUSD_meta);
                writer.WriteContainerBegin(count94, global::Microsoft.Bond.BondDataType.BT_DOUBLE);
                if (count94 != 0)
                {
                        writer.WriteDouble(m_MSRevenueUSD.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MSRevenueUSD, Schema.MSRevenueUSD_meta);
        }

        UInt32 count95 = (UInt32)((m_OperationalCostAllowanceAdvertiserCurrency != null) ? 1 : 0);
        if (writeAllFields || count95 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OperationalCostAllowanceAdvertiserCurrency, Schema.OperationalCostAllowanceAdvertiserCurrency_meta);
                writer.WriteContainerBegin(count95, global::Microsoft.Bond.BondDataType.BT_DOUBLE);
                if (count95 != 0)
                {
                        writer.WriteDouble(m_OperationalCostAllowanceAdvertiserCurrency.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OperationalCostAllowanceAdvertiserCurrency, Schema.OperationalCostAllowanceAdvertiserCurrency_meta);
        }

        UInt32 count96 = (UInt32)((m_OperationalCostAllowanceUSD != null) ? 1 : 0);
        if (writeAllFields || count96 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OperationalCostAllowanceUSD, Schema.OperationalCostAllowanceUSD_meta);
                writer.WriteContainerBegin(count96, global::Microsoft.Bond.BondDataType.BT_DOUBLE);
                if (count96 != 0)
                {
                        writer.WriteDouble(m_OperationalCostAllowanceUSD.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OperationalCostAllowanceUSD, Schema.OperationalCostAllowanceUSD_meta);
        }

        UInt32 count97 = (UInt32)((m_OrderId != null) ? 1 : 0);
        if (writeAllFields || count97 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OrderId, Schema.OrderId_meta);
                writer.WriteContainerBegin(count97, global::Microsoft.Bond.BondDataType.BT_UINT64);
                if (count97 != 0)
                {
                        writer.WriteUInt64(m_OrderId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OrderId, Schema.OrderId_meta);
        }

        if (writeAllFields || (!Schema.PagePosition_meta.default_value.Equals(m_PagePosition)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PagePosition, Schema.PagePosition_meta);
                writer.WriteString(m_PagePosition);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PagePosition, Schema.PagePosition_meta);
        }

        UInt32 count98 = (UInt32)((m_PricingModelId != null) ? 1 : 0);
        if (writeAllFields || count98 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PricingModelId, Schema.PricingModelId_meta);
                writer.WriteContainerBegin(count98, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count98 != 0)
                {
                        writer.WriteInt16(m_PricingModelId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PricingModelId, Schema.PricingModelId_meta);
        }

        UInt32 count99 = (UInt32)((m_ProbabilityOfClick != null) ? 1 : 0);
        if (writeAllFields || count99 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ProbabilityOfClick, Schema.ProbabilityOfClick_meta);
                writer.WriteContainerBegin(count99, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count99 != 0)
                {
                        writer.WriteInt16(m_ProbabilityOfClick.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ProbabilityOfClick, Schema.ProbabilityOfClick_meta);
        }

        UInt32 count100 = (UInt32)((m_ProductId != null) ? 1 : 0);
        if (writeAllFields || count100 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ProductId, Schema.ProductId_meta);
                writer.WriteContainerBegin(count100, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count100 != 0)
                {
                        writer.WriteInt32(m_ProductId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ProductId, Schema.ProductId_meta);
        }

        UInt32 count101 = (UInt32)((m_PublisherEarningsAdvertiserCurrency != null) ? 1 : 0);
        if (writeAllFields || count101 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PublisherEarningsAdvertiserCurrency, Schema.PublisherEarningsAdvertiserCurrency_meta);
                writer.WriteContainerBegin(count101, global::Microsoft.Bond.BondDataType.BT_DOUBLE);
                if (count101 != 0)
                {
                        writer.WriteDouble(m_PublisherEarningsAdvertiserCurrency.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PublisherEarningsAdvertiserCurrency, Schema.PublisherEarningsAdvertiserCurrency_meta);
        }

        UInt32 count102 = (UInt32)((m_PublisherEarningsPublisherCurrency != null) ? 1 : 0);
        if (writeAllFields || count102 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PublisherEarningsPublisherCurrency, Schema.PublisherEarningsPublisherCurrency_meta);
                writer.WriteContainerBegin(count102, global::Microsoft.Bond.BondDataType.BT_DOUBLE);
                if (count102 != 0)
                {
                        writer.WriteDouble(m_PublisherEarningsPublisherCurrency.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PublisherEarningsPublisherCurrency, Schema.PublisherEarningsPublisherCurrency_meta);
        }

        UInt32 count103 = (UInt32)((m_PublisherEarningsUSD != null) ? 1 : 0);
        if (writeAllFields || count103 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PublisherEarningsUSD, Schema.PublisherEarningsUSD_meta);
                writer.WriteContainerBegin(count103, global::Microsoft.Bond.BondDataType.BT_DOUBLE);
                if (count103 != 0)
                {
                        writer.WriteDouble(m_PublisherEarningsUSD.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PublisherEarningsUSD, Schema.PublisherEarningsUSD_meta);
        }

        UInt32 count104 = (UInt32)((m_RankScore != null) ? 1 : 0);
        if (writeAllFields || count104 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.RankScore, Schema.RankScore_meta);
                writer.WriteContainerBegin(count104, global::Microsoft.Bond.BondDataType.BT_UINT32);
                if (count104 != 0)
                {
                        writer.WriteUInt32(m_RankScore.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.RankScore, Schema.RankScore_meta);
        }

        UInt32 count105 = (UInt32)((m_RelativePosition != null) ? 1 : 0);
        if (writeAllFields || count105 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.RelativePosition, Schema.RelativePosition_meta);
                writer.WriteContainerBegin(count105, global::Microsoft.Bond.BondDataType.BT_INT8);
                if (count105 != 0)
                {
                        writer.WriteInt8(m_RelativePosition.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.RelativePosition, Schema.RelativePosition_meta);
        }

        UInt32 count106 = (UInt32)((m_SellableNodeId != null) ? 1 : 0);
        if (writeAllFields || count106 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SellableNodeId, Schema.SellableNodeId_meta);
                writer.WriteContainerBegin(count106, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count106 != 0)
                {
                        writer.WriteInt32(m_SellableNodeId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SellableNodeId, Schema.SellableNodeId_meta);
        }

        UInt32 count107 = (UInt32)((m_SmartPricingModelId != null) ? 1 : 0);
        if (writeAllFields || count107 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SmartPricingModelId, Schema.SmartPricingModelId_meta);
                writer.WriteContainerBegin(count107, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count107 != 0)
                {
                        writer.WriteInt32(m_SmartPricingModelId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SmartPricingModelId, Schema.SmartPricingModelId_meta);
        }

        if (writeAllFields || (!Schema.SmartPricingRuleId_meta.default_value.Equals(m_SmartPricingRuleId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.SmartPricingRuleId, Schema.SmartPricingRuleId_meta);
                writer.WriteString(m_SmartPricingRuleId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.SmartPricingRuleId, Schema.SmartPricingRuleId_meta);
        }

        if (writeAllFields || (!Schema.TokenRatioString_meta.default_value.Equals(m_TokenRatioString)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.TokenRatioString, Schema.TokenRatioString_meta);
                writer.WriteString(m_TokenRatioString);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.TokenRatioString, Schema.TokenRatioString_meta);
        }

        UInt32 count108 = (UInt32)((m_WinningSegmentId != null) ? 1 : 0);
        if (writeAllFields || count108 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.WinningSegmentId, Schema.WinningSegmentId_meta);
                writer.WriteContainerBegin(count108, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count108 != 0)
                {
                        writer.WriteInt32(m_WinningSegmentId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.WinningSegmentId, Schema.WinningSegmentId_meta);
        }

        UInt32 count109 = (UInt32)((m_TargetedLocationType != null) ? 1 : 0);
        if (writeAllFields || count109 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.TargetedLocationType, Schema.TargetedLocationType_meta);
                writer.WriteContainerBegin(count109, global::Microsoft.Bond.BondDataType.BT_UINT8);
                if (count109 != 0)
                {
                        writer.WriteUInt8(m_TargetedLocationType.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.TargetedLocationType, Schema.TargetedLocationType_meta);
        }

        if (writeAllFields || (!Schema.RenderedLayoutId_meta.default_value.Equals(m_RenderedLayoutId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT16, __ordinals.RenderedLayoutId, Schema.RenderedLayoutId_meta);
                writer.WriteUInt16(m_RenderedLayoutId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT16, __ordinals.RenderedLayoutId, Schema.RenderedLayoutId_meta);
        }

        UInt32 count110 = (UInt32)((m_ExchangeRateDayId != null) ? 1 : 0);
        if (writeAllFields || count110 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ExchangeRateDayId, Schema.ExchangeRateDayId_meta);
                writer.WriteContainerBegin(count110, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count110 != 0)
                {
                        writer.WriteInt32(m_ExchangeRateDayId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ExchangeRateDayId, Schema.ExchangeRateDayId_meta);
        }

        UInt32 count111 = (UInt32)((m_AdExtensionId != null) ? 1 : 0);
        if (writeAllFields || count111 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdExtensionId, Schema.AdExtensionId_meta);
                writer.WriteContainerBegin(count111, global::Microsoft.Bond.BondDataType.BT_INT64);
                if (count111 != 0)
                {
                        writer.WriteInt64(m_AdExtensionId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdExtensionId, Schema.AdExtensionId_meta);
        }

        UInt32 count112 = (UInt32)((m_AdExtensionItemId != null) ? 1 : 0);
        if (writeAllFields || count112 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdExtensionItemId, Schema.AdExtensionItemId_meta);
                writer.WriteContainerBegin(count112, global::Microsoft.Bond.BondDataType.BT_INT64);
                if (count112 != 0)
                {
                        writer.WriteInt64(m_AdExtensionItemId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdExtensionItemId, Schema.AdExtensionItemId_meta);
        }

        UInt32 count113 = (UInt32)((m_AdExtensionItemRenderedLayoutId != null) ? 1 : 0);
        if (writeAllFields || count113 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdExtensionItemRenderedLayoutId, Schema.AdExtensionItemRenderedLayoutId_meta);
                writer.WriteContainerBegin(count113, global::Microsoft.Bond.BondDataType.BT_UINT16);
                if (count113 != 0)
                {
                        writer.WriteUInt16(m_AdExtensionItemRenderedLayoutId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdExtensionItemRenderedLayoutId, Schema.AdExtensionItemRenderedLayoutId_meta);
        }

        if (writeAllFields || (!Schema.AdExtensionVersionId_meta.default_value.Equals(m_AdExtensionVersionId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT16, __ordinals.AdExtensionVersionId, Schema.AdExtensionVersionId_meta);
                writer.WriteInt16(m_AdExtensionVersionId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT16, __ordinals.AdExtensionVersionId, Schema.AdExtensionVersionId_meta);
        }

        UInt32 count114 = (UInt32)((m_AdExtensionTypeId != null) ? 1 : 0);
        if (writeAllFields || count114 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdExtensionTypeId, Schema.AdExtensionTypeId_meta);
                writer.WriteContainerBegin(count114, global::Microsoft.Bond.BondDataType.BT_INT16);
                if (count114 != 0)
                {
                        writer.WriteInt16(m_AdExtensionTypeId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdExtensionTypeId, Schema.AdExtensionTypeId_meta);
        }

        UInt32 count115 = (UInt32)((m_AdExtensionRenderedLayoutId != null) ? 1 : 0);
        if (writeAllFields || count115 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdExtensionRenderedLayoutId, Schema.AdExtensionRenderedLayoutId_meta);
                writer.WriteContainerBegin(count115, global::Microsoft.Bond.BondDataType.BT_UINT16);
                if (count115 != 0)
                {
                        writer.WriteUInt16(m_AdExtensionRenderedLayoutId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdExtensionRenderedLayoutId, Schema.AdExtensionRenderedLayoutId_meta);
        }

        if (writeAllFields || (!Schema.Click_ClientIP_meta.default_value.Equals(m_Click_ClientIP)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Click_ClientIP, Schema.Click_ClientIP_meta);
                writer.WriteString(m_Click_ClientIP);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Click_ClientIP, Schema.Click_ClientIP_meta);
        }

        UInt32 count116 = (UInt32)((m_Click_DateTime != null) ? 1 : 0);
        if (writeAllFields || count116 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Click_DateTime, Schema.Click_DateTime_meta);
                writer.WriteContainerBegin(count116, global::Microsoft.Bond.BondDataType.BT_INT64);
                if (count116 != 0)
                {
                        writer.WriteInt64(m_Click_DateTime.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Click_DateTime, Schema.Click_DateTime_meta);
        }

        if (writeAllFields || (!Schema.ElementName_meta.default_value.Equals(m_ElementName)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ElementName, Schema.ElementName_meta);
                writer.WriteString(m_ElementName);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ElementName, Schema.ElementName_meta);
        }

        if (writeAllFields || (!Schema.IsMR_meta.default_value.Equals(m_IsMR)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.IsMR, Schema.IsMR_meta);
                writer.WriteBool(m_IsMR);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.IsMR, Schema.IsMR_meta);
        }

        UInt32 count117 = ((UInt32)m_LocationIds.Count);
        if (writeAllFields || count117 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.LocationIds, Schema.LocationIds_meta);
                writer.WriteContainerBegin(count117, global::Microsoft.Bond.BondDataType.BT_INT32);
            for (int idx118 = 0; idx118 < count117; idx118++)
            {
                    writer.WriteInt32(m_LocationIds[idx118]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.LocationIds, Schema.LocationIds_meta);
        }

        UInt32 count119 = (UInt32)((m_ListingTypeId != null) ? 1 : 0);
        if (writeAllFields || count119 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ListingTypeId, Schema.ListingTypeId_meta);
                writer.WriteContainerBegin(count119, global::Microsoft.Bond.BondDataType.BT_INT8);
                if (count119 != 0)
                {
                        writer.WriteInt8(m_ListingTypeId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ListingTypeId, Schema.ListingTypeId_meta);
        }

        if (writeAllFields || (!Schema.ClickId_meta.default_value.Equals(m_ClickId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ClickId, Schema.ClickId_meta);
                writer.WriteString(m_ClickId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ClickId, Schema.ClickId_meta);
        }

        if (writeAllFields || (!Schema.FraudModelId_meta.default_value.Equals(m_FraudModelId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.FraudModelId, Schema.FraudModelId_meta);
                writer.WriteInt32(m_FraudModelId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.FraudModelId, Schema.FraudModelId_meta);
        }

        if (writeAllFields || (!Schema.FraudQualityBand_meta.default_value.Equals(m_FraudQualityBand)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT8, __ordinals.FraudQualityBand, Schema.FraudQualityBand_meta);
                writer.WriteInt8(m_FraudQualityBand);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT8, __ordinals.FraudQualityBand, Schema.FraudQualityBand_meta);
        }

        if (writeAllFields || (!Schema.FraudQualityBand_test_meta.default_value.Equals(m_FraudQualityBand_test)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.FraudQualityBand_test, Schema.FraudQualityBand_test_meta);
                writer.WriteString(m_FraudQualityBand_test);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.FraudQualityBand_test, Schema.FraudQualityBand_test_meta);
        }

        if (writeAllFields || (!Schema.FraudQualityType_meta.default_value.Equals(m_FraudQualityType)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT16, __ordinals.FraudQualityType, Schema.FraudQualityType_meta);
                writer.WriteInt16(m_FraudQualityType);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT16, __ordinals.FraudQualityType, Schema.FraudQualityType_meta);
        }

        UInt32 count120 = ((UInt32)m_FraudReason.Count);
        if (writeAllFields || count120 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.FraudReason, Schema.FraudReason_meta);
                writer.WriteContainerBegin(count120, global::Microsoft.Bond.BondDataType.BT_UINT8);
            for (int idx121 = 0; idx121 < count120; idx121++)
            {
                    writer.WriteUInt8(m_FraudReason[idx121]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.FraudReason, Schema.FraudReason_meta);
        }

        if (writeAllFields || (!Schema.FraudRuleId_meta.default_value.Equals(m_FraudRuleId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.FraudRuleId, Schema.FraudRuleId_meta);
                writer.WriteString(m_FraudRuleId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.FraudRuleId, Schema.FraudRuleId_meta);
        }

        if (writeAllFields || (!Schema.FraudScore_meta.default_value.Equals(m_FraudScore)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_DOUBLE, __ordinals.FraudScore, Schema.FraudScore_meta);
                writer.WriteDouble(m_FraudScore);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_DOUBLE, __ordinals.FraudScore, Schema.FraudScore_meta);
        }

        UInt32 count122 = (UInt32)((m_LogDelta != null) ? 1 : 0);
        if (writeAllFields || count122 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.LogDelta, Schema.LogDelta_meta);
                writer.WriteContainerBegin(count122, global::Microsoft.Bond.BondDataType.BT_INT64);
                if (count122 != 0)
                {
                        writer.WriteInt64(m_LogDelta.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.LogDelta, Schema.LogDelta_meta);
        }

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.RGUID, Schema.RGUID_meta);
            m_RGUID.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.PSCFRClickData, Schema.PSCFRClickData_meta);
            m_PSCFRClickData.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="ABTestingTypes";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="ABTestName";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="ActualImpRange";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 4;
        field.metadata.name="ActualMLImpRange";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 5;
        field.metadata.name="AdLanguage";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 6;
        field.metadata.name="AdServerStatusId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 7;
        field.metadata.name="AdUnitId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 8;
        field.metadata.name="AdUnitTypeId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 9;
        field.metadata.name="AlgorithmFilterId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="AlgorithmId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 11;
        field.metadata.name="Click_OrderItemId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 12;
        field.metadata.name="AskedAdCnt";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 13;
        field.metadata.name="BaseImpRange";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 14;
        field.metadata.name="BidDensity";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 15;
        field.metadata.name="BingVertical";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 16;
        field.metadata.name="BucketId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 17;
        field.metadata.name="CategoryId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 18;
        field.metadata.name="ChannelIds";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 19;
        field.metadata.name="CID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="PageView_ClientIP";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 21;
        field.metadata.name="ClientTimeZoneId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 22;
        field.metadata.name="CodePage";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 23;
        field.metadata.name="DateTime";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 24;
        field.metadata.name="DeviceId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 25;
        field.metadata.name="DeviceOSId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 26;
        field.metadata.name="DeviceOSName";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 27;
        field.metadata.name="DeviceOSVersion";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 28;
        field.metadata.name="DeviceTypeId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 29;
        field.metadata.name="DisputedFlag";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_BOOL;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 30;
        field.metadata.name="DistributionChannelId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 31;
        field.metadata.name="DumpId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 32;
        field.metadata.name="DynamicParamNormalizedURL";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 33;
        field.metadata.name="ECPIThresholdValue";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 34;
        field.metadata.name="ExperimentId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 35;
        field.metadata.name="FlowId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 36;
        field.metadata.name="FormCode";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 37;
        field.metadata.name="GleamedAdRange";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 38;
        field.metadata.name="IsMI";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = false?1:0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_BOOL;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 39;
        field.metadata.name="LogSequence";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 40;
        field.metadata.name="LogServerName";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 41;
        field.metadata.name="MakeId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 42;
        field.metadata.name="MarketplaceClassificationId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 2;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 43;
        field.metadata.name="MediumId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 44;
        field.metadata.name="MIMUID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 45;
        field.metadata.name="MTID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 46;
        field.metadata.name="NetworkId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 47;
        field.metadata.name="NonNormalizedQueryString";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 48;
        field.metadata.name="NumNonPforP";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 49;
        field.metadata.name="OriginalAdUnitId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 50;
        field.metadata.name="OriginalPropertyId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 51;
        field.metadata.name="OriginalPublisherId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 52;
        field.metadata.name="OSId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 53;
        field.metadata.name="WebsiteCountry";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 54;
        field.metadata.name="PageNumber";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 55;
        field.metadata.name="PageSectionId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 56;
        field.metadata.name="PageType";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 57;
        field.metadata.name="PartnerCode";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 58;
        field.metadata.name="PassportAgeGroupId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 59;
        field.metadata.name="PassportBDay";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 60;
        field.metadata.name="PassportFlags";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 61;
        field.metadata.name="PassportGenderId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 62;
        field.metadata.name="PassportRegion";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 63;
        field.metadata.name="PassportZipCode";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 64;
        field.metadata.name="PCPB";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 65;
        field.metadata.name="PropertyId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 66;
        field.metadata.name="PubConfigGroupId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 67;
        field.metadata.name="PublisherAccountId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 68;
        field.metadata.name="QueryLocationIds";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 69;
        field.metadata.name="PublisherAccountTimeZone";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 70;
        field.metadata.name="PublisherCurrencyId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 71;
        field.metadata.name="PublisherId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 72;
        field.metadata.name="PublisherOwnerId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 73;
        field.metadata.name="QueryPhrase";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 74;
        field.metadata.name="ReasonCode";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 75;
        field.metadata.name="RelatedToAccountId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 76;
        field.metadata.name="RelationshipId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 77;
        field.metadata.name="IncomingPublisherWebSiteCountry";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 78;
        field.metadata.name="ReturnedAdCnt";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 79;
        field.metadata.name="RSNId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 80;
        field.metadata.name="SearchFormId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 81;
        field.metadata.name="SearchSiteVersionId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 82;
        field.metadata.name="SmartPricing";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 83;
        field.metadata.name="SmartPricingDiscountAlgoId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 84;
        field.metadata.name="SmartPricingDiscountVersion";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 85;
        field.metadata.name="SmartPricingQueryCategoryAlgoId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 86;
        field.metadata.name="SmartPricingQueryCategoryId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 87;
        field.metadata.name="StartPosition";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 88;
        field.metadata.name="SubCategoryId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 89;
        field.metadata.name="TerminalNodeId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 90;
        field.metadata.name="TPAdUId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 91;
        field.metadata.name="TrafficPartitionCode";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 92;
        field.metadata.name="TypeTag";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 93;
        field.metadata.name="DeviceOSId2";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 94;
        field.metadata.name="AbsPosition";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 95;
        field.metadata.name="ActualBid";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 96;
        field.metadata.name="AdDisplayTypeId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 97;
        field.metadata.name="AdjustedRank";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 98;
        field.metadata.name="AdLayoutId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 100;
        field.metadata.name="AdvertiserAccountId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 101;
        field.metadata.name="AdvertiserAccountPreferredCurrencyId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 102;
        field.metadata.name="AdvertiserNetAmountInPublisherCurrency";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 103;
        field.metadata.name="AdvertiserOwnerId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 104;
        field.metadata.name="AmountChargedAdvertiserCurrency";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 105;
        field.metadata.name="AmountChargedAuctionCurrency";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 106;
        field.metadata.name="AmountChargedAuctionCurrencyUnadjusted";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 107;
        field.metadata.name="AmountChargedConstantUSDExchangeRt";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 108;
        field.metadata.name="AmountChargedInPublisherCurrency";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 109;
        field.metadata.name="AmountChargedLanguageCurrency";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 110;
        field.metadata.name="AmountChargedUSDMonthlyExchangeRt";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 111;
        field.metadata.name="BiddedKeyword";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 112;
        field.metadata.name="BiddedKeywordId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 113;
        field.metadata.name="BiddedMatchTypeId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 114;
        field.metadata.name="BusinessLocationId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 115;
        field.metadata.name="CampaignId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 116;
        field.metadata.name="CampaignTimeZoneId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 117;
        field.metadata.name="CampaignTZDayId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 118;
        field.metadata.name="CampaignTZHourNum";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 119;
        field.metadata.name="CleanKeywordHash";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 120;
        field.metadata.name="CurrencyId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 121;
        field.metadata.name="CustomerId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 122;
        field.metadata.name="DeliveryEngineRank";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 123;
        field.metadata.name="EstimatedPagePosition";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 124;
        field.metadata.name="ExtendedMatchTypeId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 125;
        field.metadata.name="GleamedAdDelivered";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 126;
        field.metadata.name="KeywordScore";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 127;
        field.metadata.name="KeywordSourceBitmap";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 128;
        field.metadata.name="vectoringTypeId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 129;
        field.metadata.name="OnlineFraudQualityBand";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 130;
        field.metadata.name="MatchScore";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 131;
        field.metadata.name="MatchTypeId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 132;
        field.metadata.name="MSRevenueAdvertiserCurrency";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 133;
        field.metadata.name="MSRevenueUSD";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 134;
        field.metadata.name="OperationalCostAllowanceAdvertiserCurrency";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 135;
        field.metadata.name="OperationalCostAllowanceUSD";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 136;
        field.metadata.name="OrderId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 137;
        field.metadata.name="PagePosition";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 138;
        field.metadata.name="PricingModelId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 139;
        field.metadata.name="ProbabilityOfClick";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 140;
        field.metadata.name="ProductId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 141;
        field.metadata.name="PublisherEarningsAdvertiserCurrency";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 142;
        field.metadata.name="PublisherEarningsPublisherCurrency";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 143;
        field.metadata.name="PublisherEarningsUSD";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 144;
        field.metadata.name="RankScore";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 145;
        field.metadata.name="RelativePosition";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 146;
        field.metadata.name="SellableNodeId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 147;
        field.metadata.name="SmartPricingModelId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 148;
        field.metadata.name="SmartPricingRuleId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 149;
        field.metadata.name="TokenRatioString";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 150;
        field.metadata.name="WinningSegmentId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 151;
        field.metadata.name="TargetedLocationType";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 152;
        field.metadata.name="RenderedLayoutId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 153;
        field.metadata.name="ExchangeRateDayId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 154;
        field.metadata.name="AdExtensionId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 155;
        field.metadata.name="AdExtensionItemId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 156;
        field.metadata.name="AdExtensionItemRenderedLayoutId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 157;
        field.metadata.name="AdExtensionVersionId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 158;
        field.metadata.name="AdExtensionTypeId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 159;
        field.metadata.name="AdExtensionRenderedLayoutId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 160;
        field.metadata.name="Click_ClientIP";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 161;
        field.metadata.name="Click_DateTime";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 162;
        field.metadata.name="ElementName";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 163;
        field.metadata.name="IsMR";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = false?1:0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_BOOL;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 164;
        field.metadata.name="LocationIds";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 165;
        field.metadata.name="ListingTypeId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 166;
        field.metadata.name="ClickId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 167;
        field.metadata.name="FraudModelId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 168;
        field.metadata.name="FraudQualityBand";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 169;
        field.metadata.name="FraudQualityBand_test";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 170;
        field.metadata.name="FraudQualityType";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 171;
        field.metadata.name="FraudReason";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 172;
        field.metadata.name="FraudRuleId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 173;
        field.metadata.name="FraudScore";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.double_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 174;
        field.metadata.name="LogDelta";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 175;
        field.metadata.name="RGUID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.Bond.GUID.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 176;
        field.metadata.name="PSCFRClickData";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::SparkSchema.PSCFRSpark.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        SearchClickDetailSpark that = obj as SearchClickDetailSpark;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(SearchClickDetailSpark other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(SearchClickDetailSpark that)
    {
        bool equals = true;
        
        equals = equals && ((this.ABTestingTypes == null) == (that.ABTestingTypes == null));
        if (equals && !(this.ABTestingTypes == null))
        {
            equals = equals && ((this.ABTestingTypes.Value == that.ABTestingTypes.Value));
        }
        equals = equals && ((this.ABTestName == null) == (that.ABTestName == null));
        equals = equals && (this.ABTestName == null ? true : (this.ABTestName.Length == that.ABTestName.Length));
        equals = equals && ((this.ActualImpRange == null) == (that.ActualImpRange == null));
        if (equals && !(this.ActualImpRange == null))
        {
            equals = equals && ((this.ActualImpRange.Value == that.ActualImpRange.Value));
        }
        equals = equals && ((this.ActualMLImpRange == null) == (that.ActualMLImpRange == null));
        if (equals && !(this.ActualMLImpRange == null))
        {
            equals = equals && ((this.ActualMLImpRange.Value == that.ActualMLImpRange.Value));
        }
        equals = equals && ((this.AdLanguage == null) == (that.AdLanguage == null));
        equals = equals && (this.AdLanguage == null ? true : (this.AdLanguage.Length == that.AdLanguage.Length));
        equals = equals && ((this.AdServerStatusId == null) == (that.AdServerStatusId == null));
        if (equals && !(this.AdServerStatusId == null))
        {
            equals = equals && ((this.AdServerStatusId.Value == that.AdServerStatusId.Value));
        }
        equals = equals && ((this.AdUnitId == that.AdUnitId));
        equals = equals && ((this.AdUnitTypeId == that.AdUnitTypeId));
        equals = equals && ((this.AlgorithmFilterId == null) == (that.AlgorithmFilterId == null));
        if (equals && !(this.AlgorithmFilterId == null))
        {
            equals = equals && ((this.AlgorithmFilterId.Value == that.AlgorithmFilterId.Value));
        }
        equals = equals && ((this.AlgorithmId == null) == (that.AlgorithmId == null));
        if (equals && !(this.AlgorithmId == null))
        {
            equals = equals && ((this.AlgorithmId.Value == that.AlgorithmId.Value));
        }
        equals = equals && ((this.Click_OrderItemId == null) == (that.Click_OrderItemId == null));
        if (equals && !(this.Click_OrderItemId == null))
        {
            equals = equals && ((this.Click_OrderItemId.Value == that.Click_OrderItemId.Value));
        }
        equals = equals && ((this.AskedAdCnt == null) == (that.AskedAdCnt == null));
        if (equals && !(this.AskedAdCnt == null))
        {
            equals = equals && ((this.AskedAdCnt.Value == that.AskedAdCnt.Value));
        }
        equals = equals && ((this.BaseImpRange == null) == (that.BaseImpRange == null));
        if (equals && !(this.BaseImpRange == null))
        {
            equals = equals && ((this.BaseImpRange.Value == that.BaseImpRange.Value));
        }
        equals = equals && ((this.BidDensity == null) == (that.BidDensity == null));
        if (equals && !(this.BidDensity == null))
        {
            equals = equals && ((Double.IsNaN(this.BidDensity.Value) ? Double.IsNaN(that.BidDensity.Value) : (this.BidDensity.Value == that.BidDensity.Value)));
        }
        equals = equals && ((this.BingVertical == null) == (that.BingVertical == null));
        equals = equals && (this.BingVertical == null ? true : (this.BingVertical.Length == that.BingVertical.Length));
        equals = equals && ((this.BucketId == null) == (that.BucketId == null));
        equals = equals && (this.BucketId == null ? true : (this.BucketId.Length == that.BucketId.Length));
        equals = equals && ((this.CategoryId == null) == (that.CategoryId == null));
        if (equals && !(this.CategoryId == null))
        {
            equals = equals && ((this.CategoryId.Value == that.CategoryId.Value));
        }
        equals = equals && ((this.ChannelIds == null) == (that.ChannelIds == null));
        equals = equals && ((this.ChannelIds == null) ? true : (this.ChannelIds.Count == that.ChannelIds.Count));
        equals = equals && ((this.CID == null) == (that.CID == null));
        equals = equals && (this.CID == null ? true : (this.CID.Length == that.CID.Length));
        equals = equals && ((this.PageView_ClientIP == null) == (that.PageView_ClientIP == null));
        equals = equals && (this.PageView_ClientIP == null ? true : (this.PageView_ClientIP.Length == that.PageView_ClientIP.Length));
        equals = equals && ((this.ClientTimeZoneId == null) == (that.ClientTimeZoneId == null));
        if (equals && !(this.ClientTimeZoneId == null))
        {
            equals = equals && ((this.ClientTimeZoneId.Value == that.ClientTimeZoneId.Value));
        }
        equals = equals && ((this.CodePage == null) == (that.CodePage == null));
        if (equals && !(this.CodePage == null))
        {
            equals = equals && ((this.CodePage.Value == that.CodePage.Value));
        }
        equals = equals && ((this.DateTime == null) == (that.DateTime == null));
        if (equals && !(this.DateTime == null))
        {
            equals = equals && ((this.DateTime.Value == that.DateTime.Value));
        }
        equals = equals && ((this.DeviceId == null) == (that.DeviceId == null));
        if (equals && !(this.DeviceId == null))
        {
            equals = equals && ((this.DeviceId.Value == that.DeviceId.Value));
        }
        equals = equals && ((this.DeviceOSId == null) == (that.DeviceOSId == null));
        if (equals && !(this.DeviceOSId == null))
        {
            equals = equals && ((this.DeviceOSId.Value == that.DeviceOSId.Value));
        }
        equals = equals && ((this.DeviceOSName == null) == (that.DeviceOSName == null));
        equals = equals && (this.DeviceOSName == null ? true : (this.DeviceOSName.Length == that.DeviceOSName.Length));
        equals = equals && ((this.DeviceOSVersion == null) == (that.DeviceOSVersion == null));
        equals = equals && (this.DeviceOSVersion == null ? true : (this.DeviceOSVersion.Length == that.DeviceOSVersion.Length));
        equals = equals && ((this.DeviceTypeId == null) == (that.DeviceTypeId == null));
        if (equals && !(this.DeviceTypeId == null))
        {
            equals = equals && ((this.DeviceTypeId.Value == that.DeviceTypeId.Value));
        }
        equals = equals && ((this.DisputedFlag == null) == (that.DisputedFlag == null));
        if (equals && !(this.DisputedFlag == null))
        {
            equals = equals && ((this.DisputedFlag.Value == that.DisputedFlag.Value));
        }
        equals = equals && ((this.DistributionChannelId == null) == (that.DistributionChannelId == null));
        if (equals && !(this.DistributionChannelId == null))
        {
            equals = equals && ((this.DistributionChannelId.Value == that.DistributionChannelId.Value));
        }
        equals = equals && ((this.DumpId == null) == (that.DumpId == null));
        if (equals && !(this.DumpId == null))
        {
            equals = equals && ((this.DumpId.Value == that.DumpId.Value));
        }
        equals = equals && ((this.DynamicParamNormalizedURL == null) == (that.DynamicParamNormalizedURL == null));
        equals = equals && (this.DynamicParamNormalizedURL == null ? true : (this.DynamicParamNormalizedURL.Length == that.DynamicParamNormalizedURL.Length));
        equals = equals && ((this.ECPIThresholdValue == null) == (that.ECPIThresholdValue == null));
        if (equals && !(this.ECPIThresholdValue == null))
        {
            equals = equals && ((this.ECPIThresholdValue.Value == that.ECPIThresholdValue.Value));
        }
        equals = equals && ((this.ExperimentId == null) == (that.ExperimentId == null));
        if (equals && !(this.ExperimentId == null))
        {
            equals = equals && ((this.ExperimentId.Value == that.ExperimentId.Value));
        }
        equals = equals && ((this.FlowId == null) == (that.FlowId == null));
        if (equals && !(this.FlowId == null))
        {
            equals = equals && ((this.FlowId.Value == that.FlowId.Value));
        }
        equals = equals && ((this.FormCode == null) == (that.FormCode == null));
        equals = equals && (this.FormCode == null ? true : (this.FormCode.Length == that.FormCode.Length));
        equals = equals && ((this.GleamedAdRange == null) == (that.GleamedAdRange == null));
        if (equals && !(this.GleamedAdRange == null))
        {
            equals = equals && ((this.GleamedAdRange.Value == that.GleamedAdRange.Value));
        }
        equals = equals && ((this.IsMI == that.IsMI));
        equals = equals && ((this.LogSequence == null) == (that.LogSequence == null));
        if (equals && !(this.LogSequence == null))
        {
            equals = equals && ((this.LogSequence.Value == that.LogSequence.Value));
        }
        equals = equals && ((this.LogServerName == null) == (that.LogServerName == null));
        equals = equals && (this.LogServerName == null ? true : (this.LogServerName.Length == that.LogServerName.Length));
        equals = equals && ((this.MakeId == null) == (that.MakeId == null));
        if (equals && !(this.MakeId == null))
        {
            equals = equals && ((this.MakeId.Value == that.MakeId.Value));
        }
        equals = equals && ((this.MarketplaceClassificationId == that.MarketplaceClassificationId));
        equals = equals && ((this.MediumId == null) == (that.MediumId == null));
        if (equals && !(this.MediumId == null))
        {
            equals = equals && ((this.MediumId.Value == that.MediumId.Value));
        }
        equals = equals && ((this.MIMUID == null) == (that.MIMUID == null));
        equals = equals && (this.MIMUID == null ? true : (this.MIMUID.Length == that.MIMUID.Length));
        equals = equals && ((this.MTID == null) == (that.MTID == null));
        if (equals && !(this.MTID == null))
        {
            equals = equals && ((this.MTID.Value == that.MTID.Value));
        }
        equals = equals && ((this.NetworkId == that.NetworkId));
        equals = equals && ((this.NonNormalizedQueryString == null) == (that.NonNormalizedQueryString == null));
        equals = equals && (this.NonNormalizedQueryString == null ? true : (this.NonNormalizedQueryString.Length == that.NonNormalizedQueryString.Length));
        equals = equals && ((this.NumNonPforP == null) == (that.NumNonPforP == null));
        if (equals && !(this.NumNonPforP == null))
        {
            equals = equals && ((this.NumNonPforP.Value == that.NumNonPforP.Value));
        }
        equals = equals && ((this.OriginalAdUnitId == null) == (that.OriginalAdUnitId == null));
        if (equals && !(this.OriginalAdUnitId == null))
        {
            equals = equals && ((this.OriginalAdUnitId.Value == that.OriginalAdUnitId.Value));
        }
        equals = equals && ((this.OriginalPropertyId == null) == (that.OriginalPropertyId == null));
        if (equals && !(this.OriginalPropertyId == null))
        {
            equals = equals && ((this.OriginalPropertyId.Value == that.OriginalPropertyId.Value));
        }
        equals = equals && ((this.OriginalPublisherId == null) == (that.OriginalPublisherId == null));
        if (equals && !(this.OriginalPublisherId == null))
        {
            equals = equals && ((this.OriginalPublisherId.Value == that.OriginalPublisherId.Value));
        }
        equals = equals && ((this.OSId == null) == (that.OSId == null));
        if (equals && !(this.OSId == null))
        {
            equals = equals && ((this.OSId.Value == that.OSId.Value));
        }
        equals = equals && ((this.WebsiteCountry == null) == (that.WebsiteCountry == null));
        equals = equals && (this.WebsiteCountry == null ? true : (this.WebsiteCountry.Length == that.WebsiteCountry.Length));
        equals = equals && ((this.PageNumber == null) == (that.PageNumber == null));
        if (equals && !(this.PageNumber == null))
        {
            equals = equals && ((this.PageNumber.Value == that.PageNumber.Value));
        }
        equals = equals && ((this.PageSectionId == null) == (that.PageSectionId == null));
        if (equals && !(this.PageSectionId == null))
        {
            equals = equals && ((this.PageSectionId.Value == that.PageSectionId.Value));
        }
        equals = equals && ((this.PageType == null) == (that.PageType == null));
        if (equals && !(this.PageType == null))
        {
            equals = equals && ((this.PageType.Value == that.PageType.Value));
        }
        equals = equals && ((this.PartnerCode == null) == (that.PartnerCode == null));
        equals = equals && (this.PartnerCode == null ? true : (this.PartnerCode.Length == that.PartnerCode.Length));
        equals = equals && ((this.PassportAgeGroupId == null) == (that.PassportAgeGroupId == null));
        equals = equals && (this.PassportAgeGroupId == null ? true : (this.PassportAgeGroupId.Length == that.PassportAgeGroupId.Length));
        equals = equals && ((this.PassportBDay == null) == (that.PassportBDay == null));
        equals = equals && (this.PassportBDay == null ? true : (this.PassportBDay.Length == that.PassportBDay.Length));
        equals = equals && ((this.PassportFlags == null) == (that.PassportFlags == null));
        equals = equals && (this.PassportFlags == null ? true : (this.PassportFlags.Length == that.PassportFlags.Length));
        equals = equals && ((this.PassportGenderId == null) == (that.PassportGenderId == null));
        equals = equals && (this.PassportGenderId == null ? true : (this.PassportGenderId.Length == that.PassportGenderId.Length));
        equals = equals && ((this.PassportRegion == null) == (that.PassportRegion == null));
        equals = equals && (this.PassportRegion == null ? true : (this.PassportRegion.Length == that.PassportRegion.Length));
        equals = equals && ((this.PassportZipCode == null) == (that.PassportZipCode == null));
        equals = equals && (this.PassportZipCode == null ? true : (this.PassportZipCode.Length == that.PassportZipCode.Length));
        equals = equals && ((this.PCPB == null) == (that.PCPB == null));
        equals = equals && (this.PCPB == null ? true : (this.PCPB.Length == that.PCPB.Length));
        equals = equals && ((this.PropertyId == null) == (that.PropertyId == null));
        if (equals && !(this.PropertyId == null))
        {
            equals = equals && ((this.PropertyId.Value == that.PropertyId.Value));
        }
        equals = equals && ((this.PubConfigGroupId == null) == (that.PubConfigGroupId == null));
        if (equals && !(this.PubConfigGroupId == null))
        {
            equals = equals && ((this.PubConfigGroupId.Value == that.PubConfigGroupId.Value));
        }
        equals = equals && ((this.PublisherAccountId == null) == (that.PublisherAccountId == null));
        if (equals && !(this.PublisherAccountId == null))
        {
            equals = equals && ((this.PublisherAccountId.Value == that.PublisherAccountId.Value));
        }
        equals = equals && ((this.QueryLocationIds == null) == (that.QueryLocationIds == null));
        equals = equals && ((this.QueryLocationIds == null) ? true : (this.QueryLocationIds.Count == that.QueryLocationIds.Count));
        equals = equals && ((this.PublisherAccountTimeZone == that.PublisherAccountTimeZone));
        equals = equals && ((this.PublisherCurrencyId == null) == (that.PublisherCurrencyId == null));
        if (equals && !(this.PublisherCurrencyId == null))
        {
            equals = equals && ((this.PublisherCurrencyId.Value == that.PublisherCurrencyId.Value));
        }
        equals = equals && ((this.PublisherId == null) == (that.PublisherId == null));
        if (equals && !(this.PublisherId == null))
        {
            equals = equals && ((this.PublisherId.Value == that.PublisherId.Value));
        }
        equals = equals && ((this.PublisherOwnerId == null) == (that.PublisherOwnerId == null));
        if (equals && !(this.PublisherOwnerId == null))
        {
            equals = equals && ((this.PublisherOwnerId.Value == that.PublisherOwnerId.Value));
        }
        equals = equals && ((this.QueryPhrase == null) == (that.QueryPhrase == null));
        equals = equals && (this.QueryPhrase == null ? true : (this.QueryPhrase.Length == that.QueryPhrase.Length));
        equals = equals && ((this.ReasonCode == null) == (that.ReasonCode == null));
        if (equals && !(this.ReasonCode == null))
        {
            equals = equals && ((this.ReasonCode.Value == that.ReasonCode.Value));
        }
        equals = equals && ((this.RelatedToAccountId == that.RelatedToAccountId));
        equals = equals && ((this.RelationshipId == that.RelationshipId));
        equals = equals && ((this.IncomingPublisherWebSiteCountry == null) == (that.IncomingPublisherWebSiteCountry == null));
        equals = equals && (this.IncomingPublisherWebSiteCountry == null ? true : (this.IncomingPublisherWebSiteCountry.Length == that.IncomingPublisherWebSiteCountry.Length));
        equals = equals && ((this.ReturnedAdCnt == null) == (that.ReturnedAdCnt == null));
        if (equals && !(this.ReturnedAdCnt == null))
        {
            equals = equals && ((this.ReturnedAdCnt.Value == that.ReturnedAdCnt.Value));
        }
        equals = equals && ((this.RSNId == null) == (that.RSNId == null));
        if (equals && !(this.RSNId == null))
        {
            equals = equals && ((this.RSNId.Value == that.RSNId.Value));
        }
        equals = equals && ((this.SearchFormId == null) == (that.SearchFormId == null));
        if (equals && !(this.SearchFormId == null))
        {
            equals = equals && ((this.SearchFormId.Value == that.SearchFormId.Value));
        }
        equals = equals && ((this.SearchSiteVersionId == null) == (that.SearchSiteVersionId == null));
        if (equals && !(this.SearchSiteVersionId == null))
        {
            equals = equals && ((this.SearchSiteVersionId.Value == that.SearchSiteVersionId.Value));
        }
        equals = equals && ((this.SmartPricing == null) == (that.SmartPricing == null));
        equals = equals && (this.SmartPricing == null ? true : (this.SmartPricing.Length == that.SmartPricing.Length));
        equals = equals && ((this.SmartPricingDiscountAlgoId == null) == (that.SmartPricingDiscountAlgoId == null));
        if (equals && !(this.SmartPricingDiscountAlgoId == null))
        {
            equals = equals && ((this.SmartPricingDiscountAlgoId.Value == that.SmartPricingDiscountAlgoId.Value));
        }
        equals = equals && ((this.SmartPricingDiscountVersion == null) == (that.SmartPricingDiscountVersion == null));
        if (equals && !(this.SmartPricingDiscountVersion == null))
        {
            equals = equals && ((this.SmartPricingDiscountVersion.Value == that.SmartPricingDiscountVersion.Value));
        }
        equals = equals && ((this.SmartPricingQueryCategoryAlgoId == null) == (that.SmartPricingQueryCategoryAlgoId == null));
        if (equals && !(this.SmartPricingQueryCategoryAlgoId == null))
        {
            equals = equals && ((this.SmartPricingQueryCategoryAlgoId.Value == that.SmartPricingQueryCategoryAlgoId.Value));
        }
        equals = equals && ((this.SmartPricingQueryCategoryId == null) == (that.SmartPricingQueryCategoryId == null));
        if (equals && !(this.SmartPricingQueryCategoryId == null))
        {
            equals = equals && ((this.SmartPricingQueryCategoryId.Value == that.SmartPricingQueryCategoryId.Value));
        }
        equals = equals && ((this.StartPosition == null) == (that.StartPosition == null));
        if (equals && !(this.StartPosition == null))
        {
            equals = equals && ((this.StartPosition.Value == that.StartPosition.Value));
        }
        equals = equals && ((this.SubCategoryId == null) == (that.SubCategoryId == null));
        if (equals && !(this.SubCategoryId == null))
        {
            equals = equals && ((this.SubCategoryId.Value == that.SubCategoryId.Value));
        }
        equals = equals && ((this.TerminalNodeId == that.TerminalNodeId));
        equals = equals && ((this.TPAdUId == that.TPAdUId));
        equals = equals && ((this.TrafficPartitionCode == null) == (that.TrafficPartitionCode == null));
        equals = equals && (this.TrafficPartitionCode == null ? true : (this.TrafficPartitionCode.Length == that.TrafficPartitionCode.Length));
        equals = equals && ((this.TypeTag == null) == (that.TypeTag == null));
        equals = equals && (this.TypeTag == null ? true : (this.TypeTag.Length == that.TypeTag.Length));
        equals = equals && ((this.DeviceOSId2 == null) == (that.DeviceOSId2 == null));
        if (equals && !(this.DeviceOSId2 == null))
        {
            equals = equals && ((this.DeviceOSId2.Value == that.DeviceOSId2.Value));
        }
        equals = equals && ((this.AbsPosition == null) == (that.AbsPosition == null));
        if (equals && !(this.AbsPosition == null))
        {
            equals = equals && ((this.AbsPosition.Value == that.AbsPosition.Value));
        }
        equals = equals && ((this.ActualBid == null) == (that.ActualBid == null));
        if (equals && !(this.ActualBid == null))
        {
            equals = equals && ((this.ActualBid.Value == that.ActualBid.Value));
        }
        equals = equals && ((this.AdDisplayTypeId == null) == (that.AdDisplayTypeId == null));
        if (equals && !(this.AdDisplayTypeId == null))
        {
            equals = equals && ((this.AdDisplayTypeId.Value == that.AdDisplayTypeId.Value));
        }
        equals = equals && ((this.AdjustedRank == null) == (that.AdjustedRank == null));
        if (equals && !(this.AdjustedRank == null))
        {
            equals = equals && ((this.AdjustedRank.Value == that.AdjustedRank.Value));
        }
        equals = equals && ((this.AdLayoutId == null) == (that.AdLayoutId == null));
        if (equals && !(this.AdLayoutId == null))
        {
            equals = equals && ((this.AdLayoutId.Value == that.AdLayoutId.Value));
        }
        equals = equals && ((this.AdvertiserAccountId == null) == (that.AdvertiserAccountId == null));
        if (equals && !(this.AdvertiserAccountId == null))
        {
            equals = equals && ((this.AdvertiserAccountId.Value == that.AdvertiserAccountId.Value));
        }
        equals = equals && ((this.AdvertiserAccountPreferredCurrencyId == null) == (that.AdvertiserAccountPreferredCurrencyId == null));
        if (equals && !(this.AdvertiserAccountPreferredCurrencyId == null))
        {
            equals = equals && ((this.AdvertiserAccountPreferredCurrencyId.Value == that.AdvertiserAccountPreferredCurrencyId.Value));
        }
        equals = equals && ((this.AdvertiserNetAmountInPublisherCurrency == null) == (that.AdvertiserNetAmountInPublisherCurrency == null));
        if (equals && !(this.AdvertiserNetAmountInPublisherCurrency == null))
        {
            equals = equals && ((Double.IsNaN(this.AdvertiserNetAmountInPublisherCurrency.Value) ? Double.IsNaN(that.AdvertiserNetAmountInPublisherCurrency.Value) : (this.AdvertiserNetAmountInPublisherCurrency.Value == that.AdvertiserNetAmountInPublisherCurrency.Value)));
        }
        equals = equals && ((this.AdvertiserOwnerId == null) == (that.AdvertiserOwnerId == null));
        if (equals && !(this.AdvertiserOwnerId == null))
        {
            equals = equals && ((this.AdvertiserOwnerId.Value == that.AdvertiserOwnerId.Value));
        }
        equals = equals && ((this.AmountChargedAdvertiserCurrency == null) == (that.AmountChargedAdvertiserCurrency == null));
        if (equals && !(this.AmountChargedAdvertiserCurrency == null))
        {
            equals = equals && ((Double.IsNaN(this.AmountChargedAdvertiserCurrency.Value) ? Double.IsNaN(that.AmountChargedAdvertiserCurrency.Value) : (this.AmountChargedAdvertiserCurrency.Value == that.AmountChargedAdvertiserCurrency.Value)));
        }
        equals = equals && ((this.AmountChargedAuctionCurrency == null) == (that.AmountChargedAuctionCurrency == null));
        if (equals && !(this.AmountChargedAuctionCurrency == null))
        {
            equals = equals && ((Double.IsNaN(this.AmountChargedAuctionCurrency.Value) ? Double.IsNaN(that.AmountChargedAuctionCurrency.Value) : (this.AmountChargedAuctionCurrency.Value == that.AmountChargedAuctionCurrency.Value)));
        }
        equals = equals && ((this.AmountChargedAuctionCurrencyUnadjusted == null) == (that.AmountChargedAuctionCurrencyUnadjusted == null));
        if (equals && !(this.AmountChargedAuctionCurrencyUnadjusted == null))
        {
            equals = equals && ((Double.IsNaN(this.AmountChargedAuctionCurrencyUnadjusted.Value) ? Double.IsNaN(that.AmountChargedAuctionCurrencyUnadjusted.Value) : (this.AmountChargedAuctionCurrencyUnadjusted.Value == that.AmountChargedAuctionCurrencyUnadjusted.Value)));
        }
        equals = equals && ((this.AmountChargedConstantUSDExchangeRt == null) == (that.AmountChargedConstantUSDExchangeRt == null));
        if (equals && !(this.AmountChargedConstantUSDExchangeRt == null))
        {
            equals = equals && ((Double.IsNaN(this.AmountChargedConstantUSDExchangeRt.Value) ? Double.IsNaN(that.AmountChargedConstantUSDExchangeRt.Value) : (this.AmountChargedConstantUSDExchangeRt.Value == that.AmountChargedConstantUSDExchangeRt.Value)));
        }
        equals = equals && ((this.AmountChargedInPublisherCurrency == null) == (that.AmountChargedInPublisherCurrency == null));
        if (equals && !(this.AmountChargedInPublisherCurrency == null))
        {
            equals = equals && ((Double.IsNaN(this.AmountChargedInPublisherCurrency.Value) ? Double.IsNaN(that.AmountChargedInPublisherCurrency.Value) : (this.AmountChargedInPublisherCurrency.Value == that.AmountChargedInPublisherCurrency.Value)));
        }
        equals = equals && ((this.AmountChargedLanguageCurrency == null) == (that.AmountChargedLanguageCurrency == null));
        if (equals && !(this.AmountChargedLanguageCurrency == null))
        {
            equals = equals && ((this.AmountChargedLanguageCurrency.Value == that.AmountChargedLanguageCurrency.Value));
        }
        equals = equals && ((this.AmountChargedUSDMonthlyExchangeRt == null) == (that.AmountChargedUSDMonthlyExchangeRt == null));
        if (equals && !(this.AmountChargedUSDMonthlyExchangeRt == null))
        {
            equals = equals && ((Double.IsNaN(this.AmountChargedUSDMonthlyExchangeRt.Value) ? Double.IsNaN(that.AmountChargedUSDMonthlyExchangeRt.Value) : (this.AmountChargedUSDMonthlyExchangeRt.Value == that.AmountChargedUSDMonthlyExchangeRt.Value)));
        }
        equals = equals && ((this.BiddedKeyword == null) == (that.BiddedKeyword == null));
        equals = equals && (this.BiddedKeyword == null ? true : (this.BiddedKeyword.Length == that.BiddedKeyword.Length));
        equals = equals && ((this.BiddedKeywordId == null) == (that.BiddedKeywordId == null));
        if (equals && !(this.BiddedKeywordId == null))
        {
            equals = equals && ((this.BiddedKeywordId.Value == that.BiddedKeywordId.Value));
        }
        equals = equals && ((this.BiddedMatchTypeId == null) == (that.BiddedMatchTypeId == null));
        if (equals && !(this.BiddedMatchTypeId == null))
        {
            equals = equals && ((this.BiddedMatchTypeId.Value == that.BiddedMatchTypeId.Value));
        }
        equals = equals && ((this.BusinessLocationId == null) == (that.BusinessLocationId == null));
        if (equals && !(this.BusinessLocationId == null))
        {
            equals = equals && ((this.BusinessLocationId.Value == that.BusinessLocationId.Value));
        }
        equals = equals && ((this.CampaignId == null) == (that.CampaignId == null));
        if (equals && !(this.CampaignId == null))
        {
            equals = equals && ((this.CampaignId.Value == that.CampaignId.Value));
        }
        equals = equals && ((this.CampaignTimeZoneId == null) == (that.CampaignTimeZoneId == null));
        if (equals && !(this.CampaignTimeZoneId == null))
        {
            equals = equals && ((this.CampaignTimeZoneId.Value == that.CampaignTimeZoneId.Value));
        }
        equals = equals && ((this.CampaignTZDayId == null) == (that.CampaignTZDayId == null));
        if (equals && !(this.CampaignTZDayId == null))
        {
            equals = equals && ((this.CampaignTZDayId.Value == that.CampaignTZDayId.Value));
        }
        equals = equals && ((this.CampaignTZHourNum == null) == (that.CampaignTZHourNum == null));
        if (equals && !(this.CampaignTZHourNum == null))
        {
            equals = equals && ((this.CampaignTZHourNum.Value == that.CampaignTZHourNum.Value));
        }
        equals = equals && ((this.CleanKeywordHash == null) == (that.CleanKeywordHash == null));
        equals = equals && (this.CleanKeywordHash == null ? true : (this.CleanKeywordHash.Length == that.CleanKeywordHash.Length));
        equals = equals && ((this.CurrencyId == null) == (that.CurrencyId == null));
        if (equals && !(this.CurrencyId == null))
        {
            equals = equals && ((this.CurrencyId.Value == that.CurrencyId.Value));
        }
        equals = equals && ((this.CustomerId == null) == (that.CustomerId == null));
        if (equals && !(this.CustomerId == null))
        {
            equals = equals && ((this.CustomerId.Value == that.CustomerId.Value));
        }
        equals = equals && ((this.DeliveryEngineRank == null) == (that.DeliveryEngineRank == null));
        if (equals && !(this.DeliveryEngineRank == null))
        {
            equals = equals && ((this.DeliveryEngineRank.Value == that.DeliveryEngineRank.Value));
        }
        equals = equals && ((this.EstimatedPagePosition == null) == (that.EstimatedPagePosition == null));
        equals = equals && (this.EstimatedPagePosition == null ? true : (this.EstimatedPagePosition.Length == that.EstimatedPagePosition.Length));
        equals = equals && ((this.ExtendedMatchTypeId == null) == (that.ExtendedMatchTypeId == null));
        if (equals && !(this.ExtendedMatchTypeId == null))
        {
            equals = equals && ((this.ExtendedMatchTypeId.Value == that.ExtendedMatchTypeId.Value));
        }
        equals = equals && ((this.GleamedAdDelivered == null) == (that.GleamedAdDelivered == null));
        if (equals && !(this.GleamedAdDelivered == null))
        {
            equals = equals && ((this.GleamedAdDelivered.Value == that.GleamedAdDelivered.Value));
        }
        equals = equals && ((this.KeywordScore == null) == (that.KeywordScore == null));
        if (equals && !(this.KeywordScore == null))
        {
            equals = equals && ((this.KeywordScore.Value == that.KeywordScore.Value));
        }
        equals = equals && ((this.KeywordSourceBitmap == null) == (that.KeywordSourceBitmap == null));
        if (equals && !(this.KeywordSourceBitmap == null))
        {
            equals = equals && ((this.KeywordSourceBitmap.Value == that.KeywordSourceBitmap.Value));
        }
        equals = equals && ((this.vectoringTypeId == null) == (that.vectoringTypeId == null));
        if (equals && !(this.vectoringTypeId == null))
        {
            equals = equals && ((this.vectoringTypeId.Value == that.vectoringTypeId.Value));
        }
        equals = equals && ((this.OnlineFraudQualityBand == null) == (that.OnlineFraudQualityBand == null));
        if (equals && !(this.OnlineFraudQualityBand == null))
        {
            equals = equals && ((this.OnlineFraudQualityBand.Value == that.OnlineFraudQualityBand.Value));
        }
        equals = equals && ((this.MatchScore == null) == (that.MatchScore == null));
        if (equals && !(this.MatchScore == null))
        {
            equals = equals && ((this.MatchScore.Value == that.MatchScore.Value));
        }
        equals = equals && ((this.MatchTypeId == null) == (that.MatchTypeId == null));
        if (equals && !(this.MatchTypeId == null))
        {
            equals = equals && ((this.MatchTypeId.Value == that.MatchTypeId.Value));
        }
        equals = equals && ((this.MSRevenueAdvertiserCurrency == null) == (that.MSRevenueAdvertiserCurrency == null));
        if (equals && !(this.MSRevenueAdvertiserCurrency == null))
        {
            equals = equals && ((Double.IsNaN(this.MSRevenueAdvertiserCurrency.Value) ? Double.IsNaN(that.MSRevenueAdvertiserCurrency.Value) : (this.MSRevenueAdvertiserCurrency.Value == that.MSRevenueAdvertiserCurrency.Value)));
        }
        equals = equals && ((this.MSRevenueUSD == null) == (that.MSRevenueUSD == null));
        if (equals && !(this.MSRevenueUSD == null))
        {
            equals = equals && ((Double.IsNaN(this.MSRevenueUSD.Value) ? Double.IsNaN(that.MSRevenueUSD.Value) : (this.MSRevenueUSD.Value == that.MSRevenueUSD.Value)));
        }
        equals = equals && ((this.OperationalCostAllowanceAdvertiserCurrency == null) == (that.OperationalCostAllowanceAdvertiserCurrency == null));
        if (equals && !(this.OperationalCostAllowanceAdvertiserCurrency == null))
        {
            equals = equals && ((Double.IsNaN(this.OperationalCostAllowanceAdvertiserCurrency.Value) ? Double.IsNaN(that.OperationalCostAllowanceAdvertiserCurrency.Value) : (this.OperationalCostAllowanceAdvertiserCurrency.Value == that.OperationalCostAllowanceAdvertiserCurrency.Value)));
        }
        equals = equals && ((this.OperationalCostAllowanceUSD == null) == (that.OperationalCostAllowanceUSD == null));
        if (equals && !(this.OperationalCostAllowanceUSD == null))
        {
            equals = equals && ((Double.IsNaN(this.OperationalCostAllowanceUSD.Value) ? Double.IsNaN(that.OperationalCostAllowanceUSD.Value) : (this.OperationalCostAllowanceUSD.Value == that.OperationalCostAllowanceUSD.Value)));
        }
        equals = equals && ((this.OrderId == null) == (that.OrderId == null));
        if (equals && !(this.OrderId == null))
        {
            equals = equals && ((this.OrderId.Value == that.OrderId.Value));
        }
        equals = equals && ((this.PagePosition == null) == (that.PagePosition == null));
        equals = equals && (this.PagePosition == null ? true : (this.PagePosition.Length == that.PagePosition.Length));
        equals = equals && ((this.PricingModelId == null) == (that.PricingModelId == null));
        if (equals && !(this.PricingModelId == null))
        {
            equals = equals && ((this.PricingModelId.Value == that.PricingModelId.Value));
        }
        equals = equals && ((this.ProbabilityOfClick == null) == (that.ProbabilityOfClick == null));
        if (equals && !(this.ProbabilityOfClick == null))
        {
            equals = equals && ((this.ProbabilityOfClick.Value == that.ProbabilityOfClick.Value));
        }
        equals = equals && ((this.ProductId == null) == (that.ProductId == null));
        if (equals && !(this.ProductId == null))
        {
            equals = equals && ((this.ProductId.Value == that.ProductId.Value));
        }
        equals = equals && ((this.PublisherEarningsAdvertiserCurrency == null) == (that.PublisherEarningsAdvertiserCurrency == null));
        if (equals && !(this.PublisherEarningsAdvertiserCurrency == null))
        {
            equals = equals && ((Double.IsNaN(this.PublisherEarningsAdvertiserCurrency.Value) ? Double.IsNaN(that.PublisherEarningsAdvertiserCurrency.Value) : (this.PublisherEarningsAdvertiserCurrency.Value == that.PublisherEarningsAdvertiserCurrency.Value)));
        }
        equals = equals && ((this.PublisherEarningsPublisherCurrency == null) == (that.PublisherEarningsPublisherCurrency == null));
        if (equals && !(this.PublisherEarningsPublisherCurrency == null))
        {
            equals = equals && ((Double.IsNaN(this.PublisherEarningsPublisherCurrency.Value) ? Double.IsNaN(that.PublisherEarningsPublisherCurrency.Value) : (this.PublisherEarningsPublisherCurrency.Value == that.PublisherEarningsPublisherCurrency.Value)));
        }
        equals = equals && ((this.PublisherEarningsUSD == null) == (that.PublisherEarningsUSD == null));
        if (equals && !(this.PublisherEarningsUSD == null))
        {
            equals = equals && ((Double.IsNaN(this.PublisherEarningsUSD.Value) ? Double.IsNaN(that.PublisherEarningsUSD.Value) : (this.PublisherEarningsUSD.Value == that.PublisherEarningsUSD.Value)));
        }
        equals = equals && ((this.RankScore == null) == (that.RankScore == null));
        if (equals && !(this.RankScore == null))
        {
            equals = equals && ((this.RankScore.Value == that.RankScore.Value));
        }
        equals = equals && ((this.RelativePosition == null) == (that.RelativePosition == null));
        if (equals && !(this.RelativePosition == null))
        {
            equals = equals && ((this.RelativePosition.Value == that.RelativePosition.Value));
        }
        equals = equals && ((this.SellableNodeId == null) == (that.SellableNodeId == null));
        if (equals && !(this.SellableNodeId == null))
        {
            equals = equals && ((this.SellableNodeId.Value == that.SellableNodeId.Value));
        }
        equals = equals && ((this.SmartPricingModelId == null) == (that.SmartPricingModelId == null));
        if (equals && !(this.SmartPricingModelId == null))
        {
            equals = equals && ((this.SmartPricingModelId.Value == that.SmartPricingModelId.Value));
        }
        equals = equals && ((this.SmartPricingRuleId == null) == (that.SmartPricingRuleId == null));
        equals = equals && (this.SmartPricingRuleId == null ? true : (this.SmartPricingRuleId.Length == that.SmartPricingRuleId.Length));
        equals = equals && ((this.TokenRatioString == null) == (that.TokenRatioString == null));
        equals = equals && (this.TokenRatioString == null ? true : (this.TokenRatioString.Length == that.TokenRatioString.Length));
        equals = equals && ((this.WinningSegmentId == null) == (that.WinningSegmentId == null));
        if (equals && !(this.WinningSegmentId == null))
        {
            equals = equals && ((this.WinningSegmentId.Value == that.WinningSegmentId.Value));
        }
        equals = equals && ((this.TargetedLocationType == null) == (that.TargetedLocationType == null));
        if (equals && !(this.TargetedLocationType == null))
        {
            equals = equals && ((this.TargetedLocationType.Value == that.TargetedLocationType.Value));
        }
        equals = equals && ((this.RenderedLayoutId == that.RenderedLayoutId));
        equals = equals && ((this.ExchangeRateDayId == null) == (that.ExchangeRateDayId == null));
        if (equals && !(this.ExchangeRateDayId == null))
        {
            equals = equals && ((this.ExchangeRateDayId.Value == that.ExchangeRateDayId.Value));
        }
        equals = equals && ((this.AdExtensionId == null) == (that.AdExtensionId == null));
        if (equals && !(this.AdExtensionId == null))
        {
            equals = equals && ((this.AdExtensionId.Value == that.AdExtensionId.Value));
        }
        equals = equals && ((this.AdExtensionItemId == null) == (that.AdExtensionItemId == null));
        if (equals && !(this.AdExtensionItemId == null))
        {
            equals = equals && ((this.AdExtensionItemId.Value == that.AdExtensionItemId.Value));
        }
        equals = equals && ((this.AdExtensionItemRenderedLayoutId == null) == (that.AdExtensionItemRenderedLayoutId == null));
        if (equals && !(this.AdExtensionItemRenderedLayoutId == null))
        {
            equals = equals && ((this.AdExtensionItemRenderedLayoutId.Value == that.AdExtensionItemRenderedLayoutId.Value));
        }
        equals = equals && ((this.AdExtensionVersionId == that.AdExtensionVersionId));
        equals = equals && ((this.AdExtensionTypeId == null) == (that.AdExtensionTypeId == null));
        if (equals && !(this.AdExtensionTypeId == null))
        {
            equals = equals && ((this.AdExtensionTypeId.Value == that.AdExtensionTypeId.Value));
        }
        equals = equals && ((this.AdExtensionRenderedLayoutId == null) == (that.AdExtensionRenderedLayoutId == null));
        if (equals && !(this.AdExtensionRenderedLayoutId == null))
        {
            equals = equals && ((this.AdExtensionRenderedLayoutId.Value == that.AdExtensionRenderedLayoutId.Value));
        }
        equals = equals && ((this.Click_ClientIP == null) == (that.Click_ClientIP == null));
        equals = equals && (this.Click_ClientIP == null ? true : (this.Click_ClientIP.Length == that.Click_ClientIP.Length));
        equals = equals && ((this.Click_DateTime == null) == (that.Click_DateTime == null));
        if (equals && !(this.Click_DateTime == null))
        {
            equals = equals && ((this.Click_DateTime.Value == that.Click_DateTime.Value));
        }
        equals = equals && ((this.ElementName == null) == (that.ElementName == null));
        equals = equals && (this.ElementName == null ? true : (this.ElementName.Length == that.ElementName.Length));
        equals = equals && ((this.IsMR == that.IsMR));
        equals = equals && ((this.LocationIds == null) == (that.LocationIds == null));
        equals = equals && ((this.LocationIds == null) ? true : (this.LocationIds.Count == that.LocationIds.Count));
        equals = equals && ((this.ListingTypeId == null) == (that.ListingTypeId == null));
        if (equals && !(this.ListingTypeId == null))
        {
            equals = equals && ((this.ListingTypeId.Value == that.ListingTypeId.Value));
        }
        equals = equals && ((this.ClickId == null) == (that.ClickId == null));
        equals = equals && (this.ClickId == null ? true : (this.ClickId.Length == that.ClickId.Length));
        equals = equals && ((this.FraudModelId == that.FraudModelId));
        equals = equals && ((this.FraudQualityBand == that.FraudQualityBand));
        equals = equals && ((this.FraudQualityBand_test == null) == (that.FraudQualityBand_test == null));
        equals = equals && (this.FraudQualityBand_test == null ? true : (this.FraudQualityBand_test.Length == that.FraudQualityBand_test.Length));
        equals = equals && ((this.FraudQualityType == that.FraudQualityType));
        equals = equals && ((this.FraudReason == null) == (that.FraudReason == null));
        equals = equals && ((this.FraudReason == null) ? true : (this.FraudReason.Count == that.FraudReason.Count));
        equals = equals && ((this.FraudRuleId == null) == (that.FraudRuleId == null));
        equals = equals && (this.FraudRuleId == null ? true : (this.FraudRuleId.Length == that.FraudRuleId.Length));
        equals = equals && ((Double.IsNaN(this.FraudScore) ? Double.IsNaN(that.FraudScore) : (this.FraudScore == that.FraudScore)));
        equals = equals && ((this.LogDelta == null) == (that.LogDelta == null));
        if (equals && !(this.LogDelta == null))
        {
            equals = equals && ((this.LogDelta.Value == that.LogDelta.Value));
        }
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(SearchClickDetailSpark that)
    {
        bool equals = true;
        
        equals = equals && (this.ABTestName == null ? true : this.ABTestName == that.ABTestName);
        equals = equals && (this.AdLanguage == null ? true : this.AdLanguage == that.AdLanguage);
        equals = equals && (this.BingVertical == null ? true : this.BingVertical == that.BingVertical);
        equals = equals && (this.BucketId == null ? true : this.BucketId == that.BucketId);
        if (equals && this.ChannelIds != null && this.ChannelIds.Count != 0)
        {
            var enum_1_1 = this.ChannelIds.GetEnumerator();
            var enum_2_2 = that.ChannelIds.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        equals = equals && (this.CID == null ? true : this.CID == that.CID);
        equals = equals && (this.PageView_ClientIP == null ? true : this.PageView_ClientIP == that.PageView_ClientIP);
        equals = equals && (this.DeviceOSName == null ? true : this.DeviceOSName == that.DeviceOSName);
        equals = equals && (this.DeviceOSVersion == null ? true : this.DeviceOSVersion == that.DeviceOSVersion);
        equals = equals && (this.DynamicParamNormalizedURL == null ? true : this.DynamicParamNormalizedURL == that.DynamicParamNormalizedURL);
        equals = equals && (this.FormCode == null ? true : this.FormCode == that.FormCode);
        equals = equals && (this.LogServerName == null ? true : this.LogServerName == that.LogServerName);
        equals = equals && (this.MIMUID == null ? true : this.MIMUID == that.MIMUID);
        equals = equals && (this.NonNormalizedQueryString == null ? true : this.NonNormalizedQueryString == that.NonNormalizedQueryString);
        equals = equals && (this.WebsiteCountry == null ? true : this.WebsiteCountry == that.WebsiteCountry);
        equals = equals && (this.PartnerCode == null ? true : this.PartnerCode == that.PartnerCode);
        equals = equals && (this.PassportAgeGroupId == null ? true : this.PassportAgeGroupId == that.PassportAgeGroupId);
        equals = equals && (this.PassportBDay == null ? true : this.PassportBDay == that.PassportBDay);
        equals = equals && (this.PassportFlags == null ? true : this.PassportFlags == that.PassportFlags);
        equals = equals && (this.PassportGenderId == null ? true : this.PassportGenderId == that.PassportGenderId);
        equals = equals && (this.PassportRegion == null ? true : this.PassportRegion == that.PassportRegion);
        equals = equals && (this.PassportZipCode == null ? true : this.PassportZipCode == that.PassportZipCode);
        equals = equals && (this.PCPB == null ? true : this.PCPB == that.PCPB);
        if (equals && this.QueryLocationIds != null && this.QueryLocationIds.Count != 0)
        {
            var enum_1_3 = this.QueryLocationIds.GetEnumerator();
            var enum_2_4 = that.QueryLocationIds.GetEnumerator();
            while (enum_1_3.MoveNext() && enum_2_4.MoveNext())
            {
                    equals = equals && ((enum_1_3.Current == enum_2_4.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        equals = equals && (this.QueryPhrase == null ? true : this.QueryPhrase == that.QueryPhrase);
        equals = equals && (this.IncomingPublisherWebSiteCountry == null ? true : this.IncomingPublisherWebSiteCountry == that.IncomingPublisherWebSiteCountry);
        equals = equals && (this.SmartPricing == null ? true : this.SmartPricing == that.SmartPricing);
        equals = equals && (this.TrafficPartitionCode == null ? true : this.TrafficPartitionCode == that.TrafficPartitionCode);
        equals = equals && (this.TypeTag == null ? true : this.TypeTag == that.TypeTag);
        equals = equals && (this.BiddedKeyword == null ? true : this.BiddedKeyword == that.BiddedKeyword);
        equals = equals && (this.CleanKeywordHash == null ? true : this.CleanKeywordHash == that.CleanKeywordHash);
        equals = equals && (this.EstimatedPagePosition == null ? true : this.EstimatedPagePosition == that.EstimatedPagePosition);
        equals = equals && (this.PagePosition == null ? true : this.PagePosition == that.PagePosition);
        equals = equals && (this.SmartPricingRuleId == null ? true : this.SmartPricingRuleId == that.SmartPricingRuleId);
        equals = equals && (this.TokenRatioString == null ? true : this.TokenRatioString == that.TokenRatioString);
        equals = equals && (this.Click_ClientIP == null ? true : this.Click_ClientIP == that.Click_ClientIP);
        equals = equals && (this.ElementName == null ? true : this.ElementName == that.ElementName);
        if (equals && this.LocationIds != null && this.LocationIds.Count != 0)
        {
            var enum_1_5 = this.LocationIds.GetEnumerator();
            var enum_2_6 = that.LocationIds.GetEnumerator();
            while (enum_1_5.MoveNext() && enum_2_6.MoveNext())
            {
                    equals = equals && ((enum_1_5.Current == enum_2_6.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        equals = equals && (this.ClickId == null ? true : this.ClickId == that.ClickId);
        equals = equals && (this.FraudQualityBand_test == null ? true : this.FraudQualityBand_test == that.FraudQualityBand_test);
        if (equals && this.FraudReason != null && this.FraudReason.Count != 0)
        {
            var enum_1_7 = this.FraudReason.GetEnumerator();
            var enum_2_8 = that.FraudReason.GetEnumerator();
            while (enum_1_7.MoveNext() && enum_2_8.MoveNext())
            {
                    equals = equals && ((enum_1_7.Current == enum_2_8.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        equals = equals && (this.FraudRuleId == null ? true : this.FraudRuleId == that.FraudRuleId);
        equals = equals && (this.RGUID == null ? true : this.RGUID.MemberwiseCompare(that.RGUID));
        equals = equals && (this.PSCFRClickData == null ? true : this.PSCFRClickData.MemberwiseCompare(that.PSCFRClickData));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_ABTestingTypes, this.ABTestingTypes, separator);
        sb.AppendFormat(format, __internal.s_ABTestName, this.ABTestName, separator);
        sb.AppendFormat(format, __internal.s_ActualImpRange, this.ActualImpRange, separator);
        sb.AppendFormat(format, __internal.s_ActualMLImpRange, this.ActualMLImpRange, separator);
        sb.AppendFormat(format, __internal.s_AdLanguage, this.AdLanguage, separator);
        sb.AppendFormat(format, __internal.s_AdServerStatusId, this.AdServerStatusId, separator);
        sb.AppendFormat(format, __internal.s_AdUnitId, this.AdUnitId, separator);
        sb.AppendFormat(format, __internal.s_AdUnitTypeId, this.AdUnitTypeId, separator);
        sb.AppendFormat(format, __internal.s_AlgorithmFilterId, this.AlgorithmFilterId, separator);
        sb.AppendFormat(format, __internal.s_AlgorithmId, this.AlgorithmId, separator);
        sb.AppendFormat(format, __internal.s_Click_OrderItemId, this.Click_OrderItemId, separator);
        sb.AppendFormat(format, __internal.s_AskedAdCnt, this.AskedAdCnt, separator);
        sb.AppendFormat(format, __internal.s_BaseImpRange, this.BaseImpRange, separator);
        sb.AppendFormat(format, __internal.s_BidDensity, this.BidDensity, separator);
        sb.AppendFormat(format, __internal.s_BingVertical, this.BingVertical, separator);
        sb.AppendFormat(format, __internal.s_BucketId, this.BucketId, separator);
        sb.AppendFormat(format, __internal.s_CategoryId, this.CategoryId, separator);
        sb.AppendFormat(format, __internal.s_ChannelIds, DumpList(this.ChannelIds), separator);
        sb.AppendFormat(format, __internal.s_CID, this.CID, separator);
        sb.AppendFormat(format, __internal.s_PageView_ClientIP, this.PageView_ClientIP, separator);
        sb.AppendFormat(format, __internal.s_ClientTimeZoneId, this.ClientTimeZoneId, separator);
        sb.AppendFormat(format, __internal.s_CodePage, this.CodePage, separator);
        sb.AppendFormat(format, __internal.s_DateTime, this.DateTime, separator);
        sb.AppendFormat(format, __internal.s_DeviceId, this.DeviceId, separator);
        sb.AppendFormat(format, __internal.s_DeviceOSId, this.DeviceOSId, separator);
        sb.AppendFormat(format, __internal.s_DeviceOSName, this.DeviceOSName, separator);
        sb.AppendFormat(format, __internal.s_DeviceOSVersion, this.DeviceOSVersion, separator);
        sb.AppendFormat(format, __internal.s_DeviceTypeId, this.DeviceTypeId, separator);
        sb.AppendFormat(format, __internal.s_DisputedFlag, this.DisputedFlag, separator);
        sb.AppendFormat(format, __internal.s_DistributionChannelId, this.DistributionChannelId, separator);
        sb.AppendFormat(format, __internal.s_DumpId, this.DumpId, separator);
        sb.AppendFormat(format, __internal.s_DynamicParamNormalizedURL, this.DynamicParamNormalizedURL, separator);
        sb.AppendFormat(format, __internal.s_ECPIThresholdValue, this.ECPIThresholdValue, separator);
        sb.AppendFormat(format, __internal.s_ExperimentId, this.ExperimentId, separator);
        sb.AppendFormat(format, __internal.s_FlowId, this.FlowId, separator);
        sb.AppendFormat(format, __internal.s_FormCode, this.FormCode, separator);
        sb.AppendFormat(format, __internal.s_GleamedAdRange, this.GleamedAdRange, separator);
        sb.AppendFormat(format, __internal.s_IsMI, this.IsMI, separator);
        sb.AppendFormat(format, __internal.s_LogSequence, this.LogSequence, separator);
        sb.AppendFormat(format, __internal.s_LogServerName, this.LogServerName, separator);
        sb.AppendFormat(format, __internal.s_MakeId, this.MakeId, separator);
        sb.AppendFormat(format, __internal.s_MarketplaceClassificationId, this.MarketplaceClassificationId, separator);
        sb.AppendFormat(format, __internal.s_MediumId, this.MediumId, separator);
        sb.AppendFormat(format, __internal.s_MIMUID, this.MIMUID, separator);
        sb.AppendFormat(format, __internal.s_MTID, this.MTID, separator);
        sb.AppendFormat(format, __internal.s_NetworkId, this.NetworkId, separator);
        sb.AppendFormat(format, __internal.s_NonNormalizedQueryString, this.NonNormalizedQueryString, separator);
        sb.AppendFormat(format, __internal.s_NumNonPforP, this.NumNonPforP, separator);
        sb.AppendFormat(format, __internal.s_OriginalAdUnitId, this.OriginalAdUnitId, separator);
        sb.AppendFormat(format, __internal.s_OriginalPropertyId, this.OriginalPropertyId, separator);
        sb.AppendFormat(format, __internal.s_OriginalPublisherId, this.OriginalPublisherId, separator);
        sb.AppendFormat(format, __internal.s_OSId, this.OSId, separator);
        sb.AppendFormat(format, __internal.s_WebsiteCountry, this.WebsiteCountry, separator);
        sb.AppendFormat(format, __internal.s_PageNumber, this.PageNumber, separator);
        sb.AppendFormat(format, __internal.s_PageSectionId, this.PageSectionId, separator);
        sb.AppendFormat(format, __internal.s_PageType, this.PageType, separator);
        sb.AppendFormat(format, __internal.s_PartnerCode, this.PartnerCode, separator);
        sb.AppendFormat(format, __internal.s_PassportAgeGroupId, this.PassportAgeGroupId, separator);
        sb.AppendFormat(format, __internal.s_PassportBDay, this.PassportBDay, separator);
        sb.AppendFormat(format, __internal.s_PassportFlags, this.PassportFlags, separator);
        sb.AppendFormat(format, __internal.s_PassportGenderId, this.PassportGenderId, separator);
        sb.AppendFormat(format, __internal.s_PassportRegion, this.PassportRegion, separator);
        sb.AppendFormat(format, __internal.s_PassportZipCode, this.PassportZipCode, separator);
        sb.AppendFormat(format, __internal.s_PCPB, this.PCPB, separator);
        sb.AppendFormat(format, __internal.s_PropertyId, this.PropertyId, separator);
        sb.AppendFormat(format, __internal.s_PubConfigGroupId, this.PubConfigGroupId, separator);
        sb.AppendFormat(format, __internal.s_PublisherAccountId, this.PublisherAccountId, separator);
        sb.AppendFormat(format, __internal.s_QueryLocationIds, DumpList(this.QueryLocationIds), separator);
        sb.AppendFormat(format, __internal.s_PublisherAccountTimeZone, this.PublisherAccountTimeZone, separator);
        sb.AppendFormat(format, __internal.s_PublisherCurrencyId, this.PublisherCurrencyId, separator);
        sb.AppendFormat(format, __internal.s_PublisherId, this.PublisherId, separator);
        sb.AppendFormat(format, __internal.s_PublisherOwnerId, this.PublisherOwnerId, separator);
        sb.AppendFormat(format, __internal.s_QueryPhrase, this.QueryPhrase, separator);
        sb.AppendFormat(format, __internal.s_ReasonCode, this.ReasonCode, separator);
        sb.AppendFormat(format, __internal.s_RelatedToAccountId, this.RelatedToAccountId, separator);
        sb.AppendFormat(format, __internal.s_RelationshipId, this.RelationshipId, separator);
        sb.AppendFormat(format, __internal.s_IncomingPublisherWebSiteCountry, this.IncomingPublisherWebSiteCountry, separator);
        sb.AppendFormat(format, __internal.s_ReturnedAdCnt, this.ReturnedAdCnt, separator);
        sb.AppendFormat(format, __internal.s_RSNId, this.RSNId, separator);
        sb.AppendFormat(format, __internal.s_SearchFormId, this.SearchFormId, separator);
        sb.AppendFormat(format, __internal.s_SearchSiteVersionId, this.SearchSiteVersionId, separator);
        sb.AppendFormat(format, __internal.s_SmartPricing, this.SmartPricing, separator);
        sb.AppendFormat(format, __internal.s_SmartPricingDiscountAlgoId, this.SmartPricingDiscountAlgoId, separator);
        sb.AppendFormat(format, __internal.s_SmartPricingDiscountVersion, this.SmartPricingDiscountVersion, separator);
        sb.AppendFormat(format, __internal.s_SmartPricingQueryCategoryAlgoId, this.SmartPricingQueryCategoryAlgoId, separator);
        sb.AppendFormat(format, __internal.s_SmartPricingQueryCategoryId, this.SmartPricingQueryCategoryId, separator);
        sb.AppendFormat(format, __internal.s_StartPosition, this.StartPosition, separator);
        sb.AppendFormat(format, __internal.s_SubCategoryId, this.SubCategoryId, separator);
        sb.AppendFormat(format, __internal.s_TerminalNodeId, this.TerminalNodeId, separator);
        sb.AppendFormat(format, __internal.s_TPAdUId, this.TPAdUId, separator);
        sb.AppendFormat(format, __internal.s_TrafficPartitionCode, this.TrafficPartitionCode, separator);
        sb.AppendFormat(format, __internal.s_TypeTag, this.TypeTag, separator);
        sb.AppendFormat(format, __internal.s_DeviceOSId2, this.DeviceOSId2, separator);
        sb.AppendFormat(format, __internal.s_AbsPosition, this.AbsPosition, separator);
        sb.AppendFormat(format, __internal.s_ActualBid, this.ActualBid, separator);
        sb.AppendFormat(format, __internal.s_AdDisplayTypeId, this.AdDisplayTypeId, separator);
        sb.AppendFormat(format, __internal.s_AdjustedRank, this.AdjustedRank, separator);
        sb.AppendFormat(format, __internal.s_AdLayoutId, this.AdLayoutId, separator);
        sb.AppendFormat(format, __internal.s_AdvertiserAccountId, this.AdvertiserAccountId, separator);
        sb.AppendFormat(format, __internal.s_AdvertiserAccountPreferredCurrencyId, this.AdvertiserAccountPreferredCurrencyId, separator);
        sb.AppendFormat(format, __internal.s_AdvertiserNetAmountInPublisherCurrency, this.AdvertiserNetAmountInPublisherCurrency, separator);
        sb.AppendFormat(format, __internal.s_AdvertiserOwnerId, this.AdvertiserOwnerId, separator);
        sb.AppendFormat(format, __internal.s_AmountChargedAdvertiserCurrency, this.AmountChargedAdvertiserCurrency, separator);
        sb.AppendFormat(format, __internal.s_AmountChargedAuctionCurrency, this.AmountChargedAuctionCurrency, separator);
        sb.AppendFormat(format, __internal.s_AmountChargedAuctionCurrencyUnadjusted, this.AmountChargedAuctionCurrencyUnadjusted, separator);
        sb.AppendFormat(format, __internal.s_AmountChargedConstantUSDExchangeRt, this.AmountChargedConstantUSDExchangeRt, separator);
        sb.AppendFormat(format, __internal.s_AmountChargedInPublisherCurrency, this.AmountChargedInPublisherCurrency, separator);
        sb.AppendFormat(format, __internal.s_AmountChargedLanguageCurrency, this.AmountChargedLanguageCurrency, separator);
        sb.AppendFormat(format, __internal.s_AmountChargedUSDMonthlyExchangeRt, this.AmountChargedUSDMonthlyExchangeRt, separator);
        sb.AppendFormat(format, __internal.s_BiddedKeyword, this.BiddedKeyword, separator);
        sb.AppendFormat(format, __internal.s_BiddedKeywordId, this.BiddedKeywordId, separator);
        sb.AppendFormat(format, __internal.s_BiddedMatchTypeId, this.BiddedMatchTypeId, separator);
        sb.AppendFormat(format, __internal.s_BusinessLocationId, this.BusinessLocationId, separator);
        sb.AppendFormat(format, __internal.s_CampaignId, this.CampaignId, separator);
        sb.AppendFormat(format, __internal.s_CampaignTimeZoneId, this.CampaignTimeZoneId, separator);
        sb.AppendFormat(format, __internal.s_CampaignTZDayId, this.CampaignTZDayId, separator);
        sb.AppendFormat(format, __internal.s_CampaignTZHourNum, this.CampaignTZHourNum, separator);
        sb.AppendFormat(format, __internal.s_CleanKeywordHash, this.CleanKeywordHash, separator);
        sb.AppendFormat(format, __internal.s_CurrencyId, this.CurrencyId, separator);
        sb.AppendFormat(format, __internal.s_CustomerId, this.CustomerId, separator);
        sb.AppendFormat(format, __internal.s_DeliveryEngineRank, this.DeliveryEngineRank, separator);
        sb.AppendFormat(format, __internal.s_EstimatedPagePosition, this.EstimatedPagePosition, separator);
        sb.AppendFormat(format, __internal.s_ExtendedMatchTypeId, this.ExtendedMatchTypeId, separator);
        sb.AppendFormat(format, __internal.s_GleamedAdDelivered, this.GleamedAdDelivered, separator);
        sb.AppendFormat(format, __internal.s_KeywordScore, this.KeywordScore, separator);
        sb.AppendFormat(format, __internal.s_KeywordSourceBitmap, this.KeywordSourceBitmap, separator);
        sb.AppendFormat(format, __internal.s_vectoringTypeId, this.vectoringTypeId, separator);
        sb.AppendFormat(format, __internal.s_OnlineFraudQualityBand, this.OnlineFraudQualityBand, separator);
        sb.AppendFormat(format, __internal.s_MatchScore, this.MatchScore, separator);
        sb.AppendFormat(format, __internal.s_MatchTypeId, this.MatchTypeId, separator);
        sb.AppendFormat(format, __internal.s_MSRevenueAdvertiserCurrency, this.MSRevenueAdvertiserCurrency, separator);
        sb.AppendFormat(format, __internal.s_MSRevenueUSD, this.MSRevenueUSD, separator);
        sb.AppendFormat(format, __internal.s_OperationalCostAllowanceAdvertiserCurrency, this.OperationalCostAllowanceAdvertiserCurrency, separator);
        sb.AppendFormat(format, __internal.s_OperationalCostAllowanceUSD, this.OperationalCostAllowanceUSD, separator);
        sb.AppendFormat(format, __internal.s_OrderId, this.OrderId, separator);
        sb.AppendFormat(format, __internal.s_PagePosition, this.PagePosition, separator);
        sb.AppendFormat(format, __internal.s_PricingModelId, this.PricingModelId, separator);
        sb.AppendFormat(format, __internal.s_ProbabilityOfClick, this.ProbabilityOfClick, separator);
        sb.AppendFormat(format, __internal.s_ProductId, this.ProductId, separator);
        sb.AppendFormat(format, __internal.s_PublisherEarningsAdvertiserCurrency, this.PublisherEarningsAdvertiserCurrency, separator);
        sb.AppendFormat(format, __internal.s_PublisherEarningsPublisherCurrency, this.PublisherEarningsPublisherCurrency, separator);
        sb.AppendFormat(format, __internal.s_PublisherEarningsUSD, this.PublisherEarningsUSD, separator);
        sb.AppendFormat(format, __internal.s_RankScore, this.RankScore, separator);
        sb.AppendFormat(format, __internal.s_RelativePosition, this.RelativePosition, separator);
        sb.AppendFormat(format, __internal.s_SellableNodeId, this.SellableNodeId, separator);
        sb.AppendFormat(format, __internal.s_SmartPricingModelId, this.SmartPricingModelId, separator);
        sb.AppendFormat(format, __internal.s_SmartPricingRuleId, this.SmartPricingRuleId, separator);
        sb.AppendFormat(format, __internal.s_TokenRatioString, this.TokenRatioString, separator);
        sb.AppendFormat(format, __internal.s_WinningSegmentId, this.WinningSegmentId, separator);
        sb.AppendFormat(format, __internal.s_TargetedLocationType, this.TargetedLocationType, separator);
        sb.AppendFormat(format, __internal.s_RenderedLayoutId, this.RenderedLayoutId, separator);
        sb.AppendFormat(format, __internal.s_ExchangeRateDayId, this.ExchangeRateDayId, separator);
        sb.AppendFormat(format, __internal.s_AdExtensionId, this.AdExtensionId, separator);
        sb.AppendFormat(format, __internal.s_AdExtensionItemId, this.AdExtensionItemId, separator);
        sb.AppendFormat(format, __internal.s_AdExtensionItemRenderedLayoutId, this.AdExtensionItemRenderedLayoutId, separator);
        sb.AppendFormat(format, __internal.s_AdExtensionVersionId, this.AdExtensionVersionId, separator);
        sb.AppendFormat(format, __internal.s_AdExtensionTypeId, this.AdExtensionTypeId, separator);
        sb.AppendFormat(format, __internal.s_AdExtensionRenderedLayoutId, this.AdExtensionRenderedLayoutId, separator);
        sb.AppendFormat(format, __internal.s_Click_ClientIP, this.Click_ClientIP, separator);
        sb.AppendFormat(format, __internal.s_Click_DateTime, this.Click_DateTime, separator);
        sb.AppendFormat(format, __internal.s_ElementName, this.ElementName, separator);
        sb.AppendFormat(format, __internal.s_IsMR, this.IsMR, separator);
        sb.AppendFormat(format, __internal.s_LocationIds, DumpList(this.LocationIds), separator);
        sb.AppendFormat(format, __internal.s_ListingTypeId, this.ListingTypeId, separator);
        sb.AppendFormat(format, __internal.s_ClickId, this.ClickId, separator);
        sb.AppendFormat(format, __internal.s_FraudModelId, this.FraudModelId, separator);
        sb.AppendFormat(format, __internal.s_FraudQualityBand, this.FraudQualityBand, separator);
        sb.AppendFormat(format, __internal.s_FraudQualityBand_test, this.FraudQualityBand_test, separator);
        sb.AppendFormat(format, __internal.s_FraudQualityType, this.FraudQualityType, separator);
        sb.AppendFormat(format, __internal.s_FraudReason, DumpList(this.FraudReason), separator);
        sb.AppendFormat(format, __internal.s_FraudRuleId, this.FraudRuleId, separator);
        sb.AppendFormat(format, __internal.s_FraudScore, this.FraudScore, separator);
        sb.AppendFormat(format, __internal.s_LogDelta, this.LogDelta, separator);
        sb.AppendFormat(format, __internal.s_RGUID, this.RGUID, separator);
        sb.AppendFormat(format, __internal.s_PSCFRClickData, this.PSCFRClickData, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class SearchClickDetailSpark
} // namespace SparkSchema
