



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.directory
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : SAClickDataSpark_types.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using global::Microsoft.Bond;
using global::System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Text;

namespace SparkSchema
{

/// <summary>
/// SAClickDataSpark
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class SAClickDataSpark : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional string ClickId
    private String m_ClickId;

    // 2: Optional Microsoft.Bond.GUID RGUID
    private global::Microsoft.Bond.GUID m_RGUID;

    // 3: Optional int64 Timestamp
    private Int64 m_Timestamp;

    // 4: Optional string ClientIP
    private String m_ClientIP;

    // 5: Optional string UserAgent
    private String m_UserAgent;

    // 6: Optional nullable<uint64> AdId
    private UInt64? m_AdId;

    // 7: Optional int32 AdvertiserAccountId
    private Int32 m_AdvertiserAccountId;

    // 8: Optional nullable<Microsoft.Bond.GUID> MUID
    private global::Microsoft.Bond.GUID m_MUID;

    // 9: Optional nullable<Microsoft.Bond.GUID> ANID
    private global::Microsoft.Bond.GUID m_ANID;

    // 10: Optional nullable<Microsoft.Bond.GUID> AnalyticsGUID
    private global::Microsoft.Bond.GUID m_AnalyticsGUID;

    // 11: Optional SparkSchema.PSCFRSpark pscfrdata
    private global::SparkSchema.PSCFRSpark m_pscfrdata;

    /// <summary>
    /// ClickId
    /// </summary>
    public String ClickId
    {
        get { return this.m_ClickId; }
        set { this.m_ClickId = value; }
    }

    /// <summary>
    /// RGUID
    /// </summary>
    public global::Microsoft.Bond.GUID RGUID
    {
        get { return this.m_RGUID; }
        set { this.m_RGUID = value; }
    }

    /// <summary>
    /// Timestamp
    /// </summary>
    public Int64 Timestamp
    {
        get { return this.m_Timestamp; }
        set { this.m_Timestamp = value; }
    }

    /// <summary>
    /// ClientIP
    /// </summary>
    public String ClientIP
    {
        get { return this.m_ClientIP; }
        set { this.m_ClientIP = value; }
    }

    /// <summary>
    /// UserAgent
    /// </summary>
    public String UserAgent
    {
        get { return this.m_UserAgent; }
        set { this.m_UserAgent = value; }
    }

    /// <summary>
    /// AdId
    /// </summary>
    public UInt64? AdId
    {
        get { return this.m_AdId; }
        set { this.m_AdId = value; }
    }

    /// <summary>
    /// AdvertiserAccountId
    /// </summary>
    public Int32 AdvertiserAccountId
    {
        get { return this.m_AdvertiserAccountId; }
        set { this.m_AdvertiserAccountId = value; }
    }

    /// <summary>
    /// MUID
    /// </summary>
    public global::Microsoft.Bond.GUID MUID
    {
        get { return this.m_MUID; }
        set { this.m_MUID = value; }
    }

    /// <summary>
    /// ANID
    /// </summary>
    public global::Microsoft.Bond.GUID ANID
    {
        get { return this.m_ANID; }
        set { this.m_ANID = value; }
    }

    /// <summary>
    /// AnalyticsGUID
    /// </summary>
    public global::Microsoft.Bond.GUID AnalyticsGUID
    {
        get { return this.m_AnalyticsGUID; }
        set { this.m_AnalyticsGUID = value; }
    }

    /// <summary>
    /// pscfrdata
    /// </summary>
    public global::SparkSchema.PSCFRSpark pscfrdata
    {
        get { return this.m_pscfrdata; }
        set { this.m_pscfrdata = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata ClickId_meta = new Metadata();
        public static readonly Metadata RGUID_meta = new Metadata();
        public static readonly Metadata Timestamp_meta = new Metadata();
        public static readonly Metadata ClientIP_meta = new Metadata();
        public static readonly Metadata UserAgent_meta = new Metadata();
        public static readonly Metadata AdId_meta = new Metadata();
        public static readonly Metadata AdvertiserAccountId_meta = new Metadata();
        public static readonly Metadata MUID_meta = new Metadata();
        public static readonly Metadata ANID_meta = new Metadata();
        public static readonly Metadata AnalyticsGUID_meta = new Metadata();
        public static readonly Metadata pscfrdata_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("SAClickDataSpark");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "SparkSchema." + meta.name;


            // ClickId
            ClickId_meta.name = "ClickId";
            ClickId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // RGUID
            RGUID_meta.name = "RGUID";
            RGUID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Timestamp
            Timestamp_meta.name = "Timestamp";
            Timestamp_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            Timestamp_meta.default_value.int_value = 0;

            // ClientIP
            ClientIP_meta.name = "ClientIP";
            ClientIP_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // UserAgent
            UserAgent_meta.name = "UserAgent";
            UserAgent_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdId
            AdId_meta.name = "AdId";
            AdId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdvertiserAccountId
            AdvertiserAccountId_meta.name = "AdvertiserAccountId";
            AdvertiserAccountId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            AdvertiserAccountId_meta.default_value.int_value = 0;

            // MUID
            MUID_meta.name = "MUID";
            MUID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ANID
            ANID_meta.name = "ANID";
            ANID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AnalyticsGUID
            AnalyticsGUID_meta.name = "AnalyticsGUID";
            AnalyticsGUID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // pscfrdata
            pscfrdata_meta.name = "pscfrdata";
            pscfrdata_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int ClickId = 1;
        public const int RGUID = 2;
        public const int Timestamp = 3;
        public const int ClientIP = 4;
        public const int UserAgent = 5;
        public const int AdId = 6;
        public const int AdvertiserAccountId = 7;
        public const int MUID = 8;
        public const int ANID = 9;
        public const int AnalyticsGUID = 10;
        public const int pscfrdata = 11;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_ClickId = "ClickId";
        public const String s_RGUID = "RGUID";
        public const String s_Timestamp = "Timestamp";
        public const String s_ClientIP = "ClientIP";
        public const String s_UserAgent = "UserAgent";
        public const String s_AdId = "AdId";
        public const String s_AdvertiserAccountId = "AdvertiserAccountId";
        public const String s_MUID = "MUID";
        public const String s_ANID = "ANID";
        public const String s_AnalyticsGUID = "AnalyticsGUID";
        public const String s_pscfrdata = "pscfrdata";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public SAClickDataSpark()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_ClickId = string.Empty;
        m_RGUID = new global::Microsoft.Bond.GUID();
        m_Timestamp = 0;
        m_ClientIP = string.Empty;
        m_UserAgent = string.Empty;
        m_AdId = default(UInt64?);
        m_AdvertiserAccountId = 0;
        m_MUID = default(global::Microsoft.Bond.GUID);
        m_ANID = default(global::Microsoft.Bond.GUID);
        m_AnalyticsGUID = default(global::Microsoft.Bond.GUID);
        m_pscfrdata = new global::SparkSchema.PSCFRSpark();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::SparkSchema.SAClickDataSpark cloned = new global::SparkSchema.SAClickDataSpark();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::SparkSchema.SAClickDataSpark that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: string ClickId
        that.ClickId = this.ClickId;
        // 2: Microsoft.Bond.GUID RGUID
        that.RGUID = (this.RGUID == null ? null : (global::Microsoft.Bond.GUID)this.RGUID.Clone());
        // 3: int64 Timestamp
        that.Timestamp = this.Timestamp;
        // 4: string ClientIP
        that.ClientIP = this.ClientIP;
        // 5: string UserAgent
        that.UserAgent = this.UserAgent;
        // 6: nullable<uint64> AdId
        that.AdId = this.AdId;
        // 7: int32 AdvertiserAccountId
        that.AdvertiserAccountId = this.AdvertiserAccountId;
        // 8: nullable<Microsoft.Bond.GUID> MUID
        that.MUID = (this.MUID == null ? null : (global::Microsoft.Bond.GUID)this.MUID.Clone());
        // 9: nullable<Microsoft.Bond.GUID> ANID
        that.ANID = (this.ANID == null ? null : (global::Microsoft.Bond.GUID)this.ANID.Clone());
        // 10: nullable<Microsoft.Bond.GUID> AnalyticsGUID
        that.AnalyticsGUID = (this.AnalyticsGUID == null ? null : (global::Microsoft.Bond.GUID)this.AnalyticsGUID.Clone());
        // 11: SparkSchema.PSCFRSpark pscfrdata
        that.pscfrdata = (this.pscfrdata == null ? null : (global::SparkSchema.PSCFRSpark)this.pscfrdata.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ClickId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.RGUID.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Timestamp = reader.ReadInt64();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ClientIP = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.UserAgent = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.AdvertiserAccountId = reader.ReadInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_MUID(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ANID(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AnalyticsGUID(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.pscfrdata.Read(reader);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.ClickId:  // id=1
                    this.ClickId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.RGUID:  // id=2
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.RGUID.Read(reader);
                    break;
                case __ordinals.Timestamp:  // id=3
                    this.Timestamp = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    break;
                case __ordinals.ClientIP:  // id=4
                    this.ClientIP = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.UserAgent:  // id=5
                    this.UserAgent = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.AdId:  // id=6
                    this.ReadField_impl_AdId(reader, type);
                    break;
                case __ordinals.AdvertiserAccountId:  // id=7
                    this.AdvertiserAccountId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                case __ordinals.MUID:  // id=8
                    this.ReadField_impl_MUID(reader, type);
                    break;
                case __ordinals.ANID:  // id=9
                    this.ReadField_impl_ANID(reader, type);
                    break;
                case __ordinals.AnalyticsGUID:  // id=10
                    this.ReadField_impl_AnalyticsGUID(reader, type);
                    break;
                case __ordinals.pscfrdata:  // id=11
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.pscfrdata.Read(reader);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    private void ReadField_impl_AdId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdId = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdId


    private void ReadField_impl_MUID(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        if (size1 == 1)
        {
            if (this.m_MUID == null) { this.m_MUID = new global::Microsoft.Bond.GUID(); } 
            ReadHelper.ReadStruct(reader, this.m_MUID, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_MUID


    private void ReadField_impl_ANID(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        if (size1 == 1)
        {
            if (this.m_ANID == null) { this.m_ANID = new global::Microsoft.Bond.GUID(); } 
            ReadHelper.ReadStruct(reader, this.m_ANID, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ANID


    private void ReadField_impl_AnalyticsGUID(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        if (size1 == 1)
        {
            if (this.m_AnalyticsGUID == null) { this.m_AnalyticsGUID = new global::Microsoft.Bond.GUID(); } 
            ReadHelper.ReadStruct(reader, this.m_AnalyticsGUID, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AnalyticsGUID


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(SAClickDataSpark))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.ClickId_meta.default_value.Equals(m_ClickId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ClickId, Schema.ClickId_meta);
                writer.WriteString(m_ClickId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ClickId, Schema.ClickId_meta);
        }

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.RGUID, Schema.RGUID_meta);
            m_RGUID.Write(writer, true);
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.Timestamp_meta.default_value.Equals(m_Timestamp)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.Timestamp, Schema.Timestamp_meta);
                writer.WriteInt64(m_Timestamp);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.Timestamp, Schema.Timestamp_meta);
        }

        if (writeAllFields || (!Schema.ClientIP_meta.default_value.Equals(m_ClientIP)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ClientIP, Schema.ClientIP_meta);
                writer.WriteString(m_ClientIP);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ClientIP, Schema.ClientIP_meta);
        }

        if (writeAllFields || (!Schema.UserAgent_meta.default_value.Equals(m_UserAgent)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.UserAgent, Schema.UserAgent_meta);
                writer.WriteString(m_UserAgent);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.UserAgent, Schema.UserAgent_meta);
        }

        UInt32 count1 = (UInt32)((m_AdId != null) ? 1 : 0);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdId, Schema.AdId_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_UINT64);
                if (count1 != 0)
                {
                        writer.WriteUInt64(m_AdId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdId, Schema.AdId_meta);
        }

        if (writeAllFields || (!Schema.AdvertiserAccountId_meta.default_value.Equals(m_AdvertiserAccountId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.AdvertiserAccountId, Schema.AdvertiserAccountId_meta);
                writer.WriteInt32(m_AdvertiserAccountId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.AdvertiserAccountId, Schema.AdvertiserAccountId_meta);
        }

        UInt32 count2 = (UInt32)((m_MUID != null) ? 1 : 0);
        if (writeAllFields || count2 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MUID, Schema.MUID_meta);
                writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                if (count2 != 0)
                {
                        m_MUID.Write(writer, true);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MUID, Schema.MUID_meta);
        }

        UInt32 count3 = (UInt32)((m_ANID != null) ? 1 : 0);
        if (writeAllFields || count3 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ANID, Schema.ANID_meta);
                writer.WriteContainerBegin(count3, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                if (count3 != 0)
                {
                        m_ANID.Write(writer, true);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.ANID, Schema.ANID_meta);
        }

        UInt32 count4 = (UInt32)((m_AnalyticsGUID != null) ? 1 : 0);
        if (writeAllFields || count4 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AnalyticsGUID, Schema.AnalyticsGUID_meta);
                writer.WriteContainerBegin(count4, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                if (count4 != 0)
                {
                        m_AnalyticsGUID.Write(writer, true);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AnalyticsGUID, Schema.AnalyticsGUID_meta);
        }

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.pscfrdata, Schema.pscfrdata_meta);
            m_pscfrdata.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="ClickId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="RGUID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.Bond.GUID.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="Timestamp";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 4;
        field.metadata.name="ClientIP";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 5;
        field.metadata.name="UserAgent";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 6;
        field.metadata.name="AdId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 7;
        field.metadata.name="AdvertiserAccountId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 8;
        field.metadata.name="MUID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.Bond.GUID.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 9;
        field.metadata.name="ANID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.Bond.GUID.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="AnalyticsGUID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.Bond.GUID.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 11;
        field.metadata.name="pscfrdata";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::SparkSchema.PSCFRSpark.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        SAClickDataSpark that = obj as SAClickDataSpark;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(SAClickDataSpark other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(SAClickDataSpark that)
    {
        bool equals = true;
        
        equals = equals && ((this.ClickId == null) == (that.ClickId == null));
        equals = equals && (this.ClickId == null ? true : (this.ClickId.Length == that.ClickId.Length));
        equals = equals && ((this.Timestamp == that.Timestamp));
        equals = equals && ((this.ClientIP == null) == (that.ClientIP == null));
        equals = equals && (this.ClientIP == null ? true : (this.ClientIP.Length == that.ClientIP.Length));
        equals = equals && ((this.UserAgent == null) == (that.UserAgent == null));
        equals = equals && (this.UserAgent == null ? true : (this.UserAgent.Length == that.UserAgent.Length));
        equals = equals && ((this.AdId == null) == (that.AdId == null));
        if (equals && !(this.AdId == null))
        {
            equals = equals && ((this.AdId.Value == that.AdId.Value));
        }
        equals = equals && ((this.AdvertiserAccountId == that.AdvertiserAccountId));
        equals = equals && ((this.MUID == null) == (that.MUID == null));
        equals = equals && ((this.ANID == null) == (that.ANID == null));
        equals = equals && ((this.AnalyticsGUID == null) == (that.AnalyticsGUID == null));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(SAClickDataSpark that)
    {
        bool equals = true;
        
        equals = equals && (this.ClickId == null ? true : this.ClickId == that.ClickId);
        equals = equals && (this.RGUID == null ? true : this.RGUID.MemberwiseCompare(that.RGUID));
        equals = equals && (this.ClientIP == null ? true : this.ClientIP == that.ClientIP);
        equals = equals && (this.UserAgent == null ? true : this.UserAgent == that.UserAgent);
        equals = equals && ((this.MUID == null) == (that.MUID == null));
        if (equals && !(this.MUID == null))
        {
            equals = equals && (this.MUID == null ? true : this.MUID.MemberwiseCompare(that.MUID));
        }
        equals = equals && ((this.ANID == null) == (that.ANID == null));
        if (equals && !(this.ANID == null))
        {
            equals = equals && (this.ANID == null ? true : this.ANID.MemberwiseCompare(that.ANID));
        }
        equals = equals && ((this.AnalyticsGUID == null) == (that.AnalyticsGUID == null));
        if (equals && !(this.AnalyticsGUID == null))
        {
            equals = equals && (this.AnalyticsGUID == null ? true : this.AnalyticsGUID.MemberwiseCompare(that.AnalyticsGUID));
        }
        equals = equals && (this.pscfrdata == null ? true : this.pscfrdata.MemberwiseCompare(that.pscfrdata));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_ClickId, this.ClickId, separator);
        sb.AppendFormat(format, __internal.s_RGUID, this.RGUID, separator);
        sb.AppendFormat(format, __internal.s_Timestamp, this.Timestamp, separator);
        sb.AppendFormat(format, __internal.s_ClientIP, this.ClientIP, separator);
        sb.AppendFormat(format, __internal.s_UserAgent, this.UserAgent, separator);
        sb.AppendFormat(format, __internal.s_AdId, this.AdId, separator);
        sb.AppendFormat(format, __internal.s_AdvertiserAccountId, this.AdvertiserAccountId, separator);
        sb.AppendFormat(format, __internal.s_MUID, this.MUID, separator);
        sb.AppendFormat(format, __internal.s_ANID, this.ANID, separator);
        sb.AppendFormat(format, __internal.s_AnalyticsGUID, this.AnalyticsGUID, separator);
        sb.AppendFormat(format, __internal.s_pscfrdata, this.pscfrdata, separator);
        
        return sb.ToString();
    } // ToString()

}; // class SAClickDataSpark
} // namespace SparkSchema
