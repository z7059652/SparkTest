



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.directory
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : UserAdActivityDetailSpark_types.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using global::Microsoft.Bond;
using global::System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Text;

namespace SparkSchema
{

/// <summary>
/// SearchClickSpark
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class SearchClickSpark : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional string ClickId
    private String m_ClickId;

    // 2: Optional int64 ClickDateTime
    private Int64 m_ClickDateTime;

    // 3: Optional bool FirstAssist
    private Boolean m_FirstAssist;

    /// <summary>
    /// ClickId
    /// </summary>
    public String ClickId
    {
        get { return this.m_ClickId; }
        set { this.m_ClickId = value; }
    }

    /// <summary>
    /// ClickDateTime
    /// </summary>
    public Int64 ClickDateTime
    {
        get { return this.m_ClickDateTime; }
        set { this.m_ClickDateTime = value; }
    }

    /// <summary>
    /// FirstAssist
    /// </summary>
    public Boolean FirstAssist
    {
        get { return this.m_FirstAssist; }
        set { this.m_FirstAssist = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata ClickId_meta = new Metadata();
        public static readonly Metadata ClickDateTime_meta = new Metadata();
        public static readonly Metadata FirstAssist_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("SearchClickSpark");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "SparkSchema." + meta.name;


            // ClickId
            ClickId_meta.name = "ClickId";
            ClickId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ClickDateTime
            ClickDateTime_meta.name = "ClickDateTime";
            ClickDateTime_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            ClickDateTime_meta.default_value.int_value = 0;

            // FirstAssist
            FirstAssist_meta.name = "FirstAssist";
            FirstAssist_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            FirstAssist_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int ClickId = 1;
        public const int ClickDateTime = 2;
        public const int FirstAssist = 3;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_ClickId = "ClickId";
        public const String s_ClickDateTime = "ClickDateTime";
        public const String s_FirstAssist = "FirstAssist";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public SearchClickSpark()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_ClickId = string.Empty;
        m_ClickDateTime = 0;
        m_FirstAssist = false;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::SparkSchema.SearchClickSpark cloned = new global::SparkSchema.SearchClickSpark();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::SparkSchema.SearchClickSpark that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: string ClickId
        that.ClickId = this.ClickId;
        // 2: int64 ClickDateTime
        that.ClickDateTime = this.ClickDateTime;
        // 3: bool FirstAssist
        that.FirstAssist = this.FirstAssist;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ClickId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ClickDateTime = reader.ReadInt64();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.FirstAssist = reader.ReadBool();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.ClickId:  // id=1
                    this.ClickId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.ClickDateTime:  // id=2
                    this.ClickDateTime = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    break;
                case __ordinals.FirstAssist:  // id=3
                    this.FirstAssist = global::Microsoft.Bond.ReadHelper.ReadBool(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(SearchClickSpark))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.ClickId_meta.default_value.Equals(m_ClickId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ClickId, Schema.ClickId_meta);
                writer.WriteString(m_ClickId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ClickId, Schema.ClickId_meta);
        }

        if (writeAllFields || (!Schema.ClickDateTime_meta.default_value.Equals(m_ClickDateTime)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.ClickDateTime, Schema.ClickDateTime_meta);
                writer.WriteInt64(m_ClickDateTime);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.ClickDateTime, Schema.ClickDateTime_meta);
        }

        if (writeAllFields || (!Schema.FirstAssist_meta.default_value.Equals(m_FirstAssist)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.FirstAssist, Schema.FirstAssist_meta);
                writer.WriteBool(m_FirstAssist);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.FirstAssist, Schema.FirstAssist_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="ClickId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="ClickDateTime";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="FirstAssist";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = false?1:0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_BOOL;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        SearchClickSpark that = obj as SearchClickSpark;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(SearchClickSpark other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(SearchClickSpark that)
    {
        bool equals = true;
        
        equals = equals && ((this.ClickId == null) == (that.ClickId == null));
        equals = equals && (this.ClickId == null ? true : (this.ClickId.Length == that.ClickId.Length));
        equals = equals && ((this.ClickDateTime == that.ClickDateTime));
        equals = equals && ((this.FirstAssist == that.FirstAssist));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(SearchClickSpark that)
    {
        bool equals = true;
        
        equals = equals && (this.ClickId == null ? true : this.ClickId == that.ClickId);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_ClickId, this.ClickId, separator);
        sb.AppendFormat(format, __internal.s_ClickDateTime, this.ClickDateTime, separator);
        sb.AppendFormat(format, __internal.s_FirstAssist, this.FirstAssist, separator);
        
        return sb.ToString();
    } // ToString()

}; // class SearchClickSpark

/// <summary>
/// DisplayClickSpark
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class DisplayClickSpark : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional int64 ClickDateTime
    private Int64 m_ClickDateTime;

    /// <summary>
    /// ClickDateTime
    /// </summary>
    public Int64 ClickDateTime
    {
        get { return this.m_ClickDateTime; }
        set { this.m_ClickDateTime = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata ClickDateTime_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("DisplayClickSpark");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "SparkSchema." + meta.name;


            // ClickDateTime
            ClickDateTime_meta.name = "ClickDateTime";
            ClickDateTime_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            ClickDateTime_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int ClickDateTime = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_ClickDateTime = "ClickDateTime";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public DisplayClickSpark()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_ClickDateTime = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::SparkSchema.DisplayClickSpark cloned = new global::SparkSchema.DisplayClickSpark();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::SparkSchema.DisplayClickSpark that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: int64 ClickDateTime
        that.ClickDateTime = this.ClickDateTime;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ClickDateTime = reader.ReadInt64();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.ClickDateTime:  // id=1
                    this.ClickDateTime = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(DisplayClickSpark))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.ClickDateTime_meta.default_value.Equals(m_ClickDateTime)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.ClickDateTime, Schema.ClickDateTime_meta);
                writer.WriteInt64(m_ClickDateTime);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.ClickDateTime, Schema.ClickDateTime_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="ClickDateTime";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        DisplayClickSpark that = obj as DisplayClickSpark;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(DisplayClickSpark other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(DisplayClickSpark that)
    {
        bool equals = true;
        
        equals = equals && ((this.ClickDateTime == that.ClickDateTime));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(DisplayClickSpark that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_ClickDateTime, this.ClickDateTime, separator);
        
        return sb.ToString();
    } // ToString()

}; // class DisplayClickSpark

/// <summary>
/// DisplayImpressionSpark
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class DisplayImpressionSpark : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional int64 ImpressionDateTime
    private Int64 m_ImpressionDateTime;

    /// <summary>
    /// ImpressionDateTime
    /// </summary>
    public Int64 ImpressionDateTime
    {
        get { return this.m_ImpressionDateTime; }
        set { this.m_ImpressionDateTime = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata ImpressionDateTime_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("DisplayImpressionSpark");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "SparkSchema." + meta.name;


            // ImpressionDateTime
            ImpressionDateTime_meta.name = "ImpressionDateTime";
            ImpressionDateTime_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            ImpressionDateTime_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int ImpressionDateTime = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_ImpressionDateTime = "ImpressionDateTime";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public DisplayImpressionSpark()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_ImpressionDateTime = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::SparkSchema.DisplayImpressionSpark cloned = new global::SparkSchema.DisplayImpressionSpark();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::SparkSchema.DisplayImpressionSpark that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: int64 ImpressionDateTime
        that.ImpressionDateTime = this.ImpressionDateTime;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ImpressionDateTime = reader.ReadInt64();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.ImpressionDateTime:  // id=1
                    this.ImpressionDateTime = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(DisplayImpressionSpark))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.ImpressionDateTime_meta.default_value.Equals(m_ImpressionDateTime)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.ImpressionDateTime, Schema.ImpressionDateTime_meta);
                writer.WriteInt64(m_ImpressionDateTime);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.ImpressionDateTime, Schema.ImpressionDateTime_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="ImpressionDateTime";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        DisplayImpressionSpark that = obj as DisplayImpressionSpark;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(DisplayImpressionSpark other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(DisplayImpressionSpark that)
    {
        bool equals = true;
        
        equals = equals && ((this.ImpressionDateTime == that.ImpressionDateTime));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(DisplayImpressionSpark that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_ImpressionDateTime, this.ImpressionDateTime, separator);
        
        return sb.ToString();
    } // ToString()

}; // class DisplayImpressionSpark

/// <summary>
/// UserAdActivityDetailSpark
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class UserAdActivityDetailSpark : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional nullable<uint64> AdId
    private UInt64? m_AdId;

    // 2: Optional nullable<uint64> OrderItemId
    private UInt64? m_OrderItemId;

    // 3: Optional nullable<vector<SparkSchema.SearchClickSpark>> SearchClick
    private List<global::SparkSchema.SearchClickSpark> m_SearchClick;

    // 4: Optional nullable<vector<SparkSchema.DisplayClickSpark>> DisplayClick
    private List<global::SparkSchema.DisplayClickSpark> m_DisplayClick;

    // 5: Optional nullable<vector<SparkSchema.DisplayImpressionSpark>> DisplayImpression
    private List<global::SparkSchema.DisplayImpressionSpark> m_DisplayImpression;

    // 6: Optional nullable<int32> CustomerId
    private Int32? m_CustomerId;

    // 7: Optional nullable<int32> AdvertiserAccountId
    private Int32? m_AdvertiserAccountId;

    // 8: Optional nullable<int32> AdUnitID
    private Int32? m_AdUnitID;

    // 9: Optional nullable<int32> UTCOffset
    private Int32? m_UTCOffset;

    // 10: Optional nullable<int32> DeliveredLocationId
    private Int32? m_DeliveredLocationId;

    // 11: Optional nullable<int32> AdvertiserId
    private Int32? m_AdvertiserId;

    /// <summary>
    /// AdId
    /// </summary>
    public UInt64? AdId
    {
        get { return this.m_AdId; }
        set { this.m_AdId = value; }
    }

    /// <summary>
    /// OrderItemId
    /// </summary>
    public UInt64? OrderItemId
    {
        get { return this.m_OrderItemId; }
        set { this.m_OrderItemId = value; }
    }

    /// <summary>
    /// SearchClick
    /// </summary>
    public List<global::SparkSchema.SearchClickSpark> SearchClick
    {
        get { return this.m_SearchClick; }
        set { this.m_SearchClick = value; }
    }

    /// <summary>
    /// --Display data--No longer used. Dispaly data were moved out after 2016/03/01.
    /// </summary>
    public List<global::SparkSchema.DisplayClickSpark> DisplayClick
    {
        get { return this.m_DisplayClick; }
        set { this.m_DisplayClick = value; }
    }

    /// <summary>
    /// DisplayImpression
    /// </summary>
    public List<global::SparkSchema.DisplayImpressionSpark> DisplayImpression
    {
        get { return this.m_DisplayImpression; }
        set { this.m_DisplayImpression = value; }
    }

    /// <summary>
    /// --Display data--end
    /// </summary>
    public Int32? CustomerId
    {
        get { return this.m_CustomerId; }
        set { this.m_CustomerId = value; }
    }

    /// <summary>
    /// AdvertiserAccountId
    /// </summary>
    public Int32? AdvertiserAccountId
    {
        get { return this.m_AdvertiserAccountId; }
        set { this.m_AdvertiserAccountId = value; }
    }

    /// <summary>
    /// This is used only for Paid Search Ads as Display side does not have Accounts
    /// </summary>
    public Int32? AdUnitID
    {
        get { return this.m_AdUnitID; }
        set { this.m_AdUnitID = value; }
    }

    /// <summary>
    /// UTCOffset
    /// </summary>
    public Int32? UTCOffset
    {
        get { return this.m_UTCOffset; }
        set { this.m_UTCOffset = value; }
    }

    /// <summary>
    /// DeliveredLocationId
    /// </summary>
    public Int32? DeliveredLocationId
    {
        get { return this.m_DeliveredLocationId; }
        set { this.m_DeliveredLocationId = value; }
    }

    /// <summary>
    /// AdvertiserId
    /// </summary>
    public Int32? AdvertiserId
    {
        get { return this.m_AdvertiserId; }
        set { this.m_AdvertiserId = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata AdId_meta = new Metadata();
        public static readonly Metadata OrderItemId_meta = new Metadata();
        public static readonly Metadata SearchClick_meta = new Metadata();
        public static readonly Metadata DisplayClick_meta = new Metadata();
        public static readonly Metadata DisplayImpression_meta = new Metadata();
        public static readonly Metadata CustomerId_meta = new Metadata();
        public static readonly Metadata AdvertiserAccountId_meta = new Metadata();
        public static readonly Metadata AdUnitID_meta = new Metadata();
        public static readonly Metadata UTCOffset_meta = new Metadata();
        public static readonly Metadata DeliveredLocationId_meta = new Metadata();
        public static readonly Metadata AdvertiserId_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("UserAdActivityDetailSpark");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "SparkSchema." + meta.name;


            // AdId
            AdId_meta.name = "AdId";
            AdId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // OrderItemId
            OrderItemId_meta.name = "OrderItemId";
            OrderItemId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // SearchClick
            SearchClick_meta.name = "SearchClick";
            SearchClick_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // DisplayClick
            DisplayClick_meta.name = "DisplayClick";
            DisplayClick_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // DisplayImpression
            DisplayImpression_meta.name = "DisplayImpression";
            DisplayImpression_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // CustomerId
            CustomerId_meta.name = "CustomerId";
            CustomerId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdvertiserAccountId
            AdvertiserAccountId_meta.name = "AdvertiserAccountId";
            AdvertiserAccountId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdUnitID
            AdUnitID_meta.name = "AdUnitID";
            AdUnitID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // UTCOffset
            UTCOffset_meta.name = "UTCOffset";
            UTCOffset_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // DeliveredLocationId
            DeliveredLocationId_meta.name = "DeliveredLocationId";
            DeliveredLocationId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AdvertiserId
            AdvertiserId_meta.name = "AdvertiserId";
            AdvertiserId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int AdId = 1;
        public const int OrderItemId = 2;
        public const int SearchClick = 3;
        public const int DisplayClick = 4;
        public const int DisplayImpression = 5;
        public const int CustomerId = 6;
        public const int AdvertiserAccountId = 7;
        public const int AdUnitID = 8;
        public const int UTCOffset = 9;
        public const int DeliveredLocationId = 10;
        public const int AdvertiserId = 11;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_AdId = "AdId";
        public const String s_OrderItemId = "OrderItemId";
        public const String s_SearchClick = "SearchClick";
        public const String s_DisplayClick = "DisplayClick";
        public const String s_DisplayImpression = "DisplayImpression";
        public const String s_CustomerId = "CustomerId";
        public const String s_AdvertiserAccountId = "AdvertiserAccountId";
        public const String s_AdUnitID = "AdUnitID";
        public const String s_UTCOffset = "UTCOffset";
        public const String s_DeliveredLocationId = "DeliveredLocationId";
        public const String s_AdvertiserId = "AdvertiserId";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public UserAdActivityDetailSpark()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_AdId = default(UInt64?);
        m_OrderItemId = default(UInt64?);
        m_SearchClick = default(List<global::SparkSchema.SearchClickSpark>);
        m_DisplayClick = default(List<global::SparkSchema.DisplayClickSpark>);
        m_DisplayImpression = default(List<global::SparkSchema.DisplayImpressionSpark>);
        m_CustomerId = default(Int32?);
        m_AdvertiserAccountId = default(Int32?);
        m_AdUnitID = default(Int32?);
        m_UTCOffset = default(Int32?);
        m_DeliveredLocationId = default(Int32?);
        m_AdvertiserId = default(Int32?);
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::SparkSchema.UserAdActivityDetailSpark cloned = new global::SparkSchema.UserAdActivityDetailSpark();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::SparkSchema.UserAdActivityDetailSpark that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: nullable<uint64> AdId
        that.AdId = this.AdId;
        // 2: nullable<uint64> OrderItemId
        that.OrderItemId = this.OrderItemId;
        // 3: nullable<vector<SparkSchema.SearchClickSpark>> SearchClick
        if (this.SearchClick != null)
        {
            if (that.SearchClick == null)
            {
                that.SearchClick = new List<global::SparkSchema.SearchClickSpark>();
            }
            else
            {
                that.SearchClick.Clear();
            }
            foreach (var iter1 in this.SearchClick)
            {
                global::SparkSchema.SearchClickSpark tmpItem2 = default(global::SparkSchema.SearchClickSpark);
                tmpItem2 = (iter1 == null ? null : (global::SparkSchema.SearchClickSpark)iter1.Clone());
                that.SearchClick.Add(tmpItem2);
            }
        }
        else
        {
            that.SearchClick = null;
        }
        // 4: nullable<vector<SparkSchema.DisplayClickSpark>> DisplayClick
        if (this.DisplayClick != null)
        {
            if (that.DisplayClick == null)
            {
                that.DisplayClick = new List<global::SparkSchema.DisplayClickSpark>();
            }
            else
            {
                that.DisplayClick.Clear();
            }
            foreach (var iter3 in this.DisplayClick)
            {
                global::SparkSchema.DisplayClickSpark tmpItem4 = default(global::SparkSchema.DisplayClickSpark);
                tmpItem4 = (iter3 == null ? null : (global::SparkSchema.DisplayClickSpark)iter3.Clone());
                that.DisplayClick.Add(tmpItem4);
            }
        }
        else
        {
            that.DisplayClick = null;
        }
        // 5: nullable<vector<SparkSchema.DisplayImpressionSpark>> DisplayImpression
        if (this.DisplayImpression != null)
        {
            if (that.DisplayImpression == null)
            {
                that.DisplayImpression = new List<global::SparkSchema.DisplayImpressionSpark>();
            }
            else
            {
                that.DisplayImpression.Clear();
            }
            foreach (var iter5 in this.DisplayImpression)
            {
                global::SparkSchema.DisplayImpressionSpark tmpItem6 = default(global::SparkSchema.DisplayImpressionSpark);
                tmpItem6 = (iter5 == null ? null : (global::SparkSchema.DisplayImpressionSpark)iter5.Clone());
                that.DisplayImpression.Add(tmpItem6);
            }
        }
        else
        {
            that.DisplayImpression = null;
        }
        // 6: nullable<int32> CustomerId
        that.CustomerId = this.CustomerId;
        // 7: nullable<int32> AdvertiserAccountId
        that.AdvertiserAccountId = this.AdvertiserAccountId;
        // 8: nullable<int32> AdUnitID
        that.AdUnitID = this.AdUnitID;
        // 9: nullable<int32> UTCOffset
        that.UTCOffset = this.UTCOffset;
        // 10: nullable<int32> DeliveredLocationId
        that.DeliveredLocationId = this.DeliveredLocationId;
        // 11: nullable<int32> AdvertiserId
        that.AdvertiserId = this.AdvertiserId;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_OrderItemId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_SearchClick(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_DisplayClick(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_DisplayImpression(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_CustomerId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdvertiserAccountId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdUnitID(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_UTCOffset(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_DeliveredLocationId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_AdvertiserId(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.AdId:  // id=1
                    this.ReadField_impl_AdId(reader, type);
                    break;
                case __ordinals.OrderItemId:  // id=2
                    this.ReadField_impl_OrderItemId(reader, type);
                    break;
                case __ordinals.SearchClick:  // id=3
                    this.ReadField_impl_SearchClick(reader, type);
                    break;
                case __ordinals.DisplayClick:  // id=4
                    this.ReadField_impl_DisplayClick(reader, type);
                    break;
                case __ordinals.DisplayImpression:  // id=5
                    this.ReadField_impl_DisplayImpression(reader, type);
                    break;
                case __ordinals.CustomerId:  // id=6
                    this.ReadField_impl_CustomerId(reader, type);
                    break;
                case __ordinals.AdvertiserAccountId:  // id=7
                    this.ReadField_impl_AdvertiserAccountId(reader, type);
                    break;
                case __ordinals.AdUnitID:  // id=8
                    this.ReadField_impl_AdUnitID(reader, type);
                    break;
                case __ordinals.UTCOffset:  // id=9
                    this.ReadField_impl_UTCOffset(reader, type);
                    break;
                case __ordinals.DeliveredLocationId:  // id=10
                    this.ReadField_impl_DeliveredLocationId(reader, type);
                    break;
                case __ordinals.AdvertiserId:  // id=11
                    this.ReadField_impl_AdvertiserId(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    private void ReadField_impl_AdId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdId = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdId


    private void ReadField_impl_OrderItemId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_OrderItemId = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_OrderItemId


    private void ReadField_impl_SearchClick(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_LIST);
    
        if (size1 == 1)
        {
            if (this.m_SearchClick == null) { this.m_SearchClick = new List<global::SparkSchema.SearchClickSpark>(); } 
            BondDataType elemType3;
            UInt32 count4;
        
            reader.ReadContainerBegin(out count4, out elemType3);
            global::Microsoft.Bond.ReadHelper.ValidateType(elemType3, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            if (this.m_SearchClick.Capacity < count4)
            {
                this.m_SearchClick.Capacity = (int)count4;
            }
        
            for (UInt32 i6 = 0; i6 < count4; i6++)
            {
                global::SparkSchema.SearchClickSpark element5 = new global::SparkSchema.SearchClickSpark();
                 
                ReadHelper.ReadStruct(reader, element5, elemType3);
                this.m_SearchClick.Add(element5);
            }
        
            reader.ReadContainerEnd();
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_SearchClick


    private void ReadField_impl_DisplayClick(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_LIST);
    
        if (size1 == 1)
        {
            if (this.m_DisplayClick == null) { this.m_DisplayClick = new List<global::SparkSchema.DisplayClickSpark>(); } 
            BondDataType elemType3;
            UInt32 count4;
        
            reader.ReadContainerBegin(out count4, out elemType3);
            global::Microsoft.Bond.ReadHelper.ValidateType(elemType3, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            if (this.m_DisplayClick.Capacity < count4)
            {
                this.m_DisplayClick.Capacity = (int)count4;
            }
        
            for (UInt32 i6 = 0; i6 < count4; i6++)
            {
                global::SparkSchema.DisplayClickSpark element5 = new global::SparkSchema.DisplayClickSpark();
                 
                ReadHelper.ReadStruct(reader, element5, elemType3);
                this.m_DisplayClick.Add(element5);
            }
        
            reader.ReadContainerEnd();
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_DisplayClick


    private void ReadField_impl_DisplayImpression(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_LIST);
    
        if (size1 == 1)
        {
            if (this.m_DisplayImpression == null) { this.m_DisplayImpression = new List<global::SparkSchema.DisplayImpressionSpark>(); } 
            BondDataType elemType3;
            UInt32 count4;
        
            reader.ReadContainerBegin(out count4, out elemType3);
            global::Microsoft.Bond.ReadHelper.ValidateType(elemType3, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            if (this.m_DisplayImpression.Capacity < count4)
            {
                this.m_DisplayImpression.Capacity = (int)count4;
            }
        
            for (UInt32 i6 = 0; i6 < count4; i6++)
            {
                global::SparkSchema.DisplayImpressionSpark element5 = new global::SparkSchema.DisplayImpressionSpark();
                 
                ReadHelper.ReadStruct(reader, element5, elemType3);
                this.m_DisplayImpression.Add(element5);
            }
        
            reader.ReadContainerEnd();
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_DisplayImpression


    private void ReadField_impl_CustomerId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_CustomerId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_CustomerId


    private void ReadField_impl_AdvertiserAccountId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdvertiserAccountId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdvertiserAccountId


    private void ReadField_impl_AdUnitID(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdUnitID = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdUnitID


    private void ReadField_impl_UTCOffset(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_UTCOffset = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_UTCOffset


    private void ReadField_impl_DeliveredLocationId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_DeliveredLocationId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_DeliveredLocationId


    private void ReadField_impl_AdvertiserId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_AdvertiserId = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_AdvertiserId


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(UserAdActivityDetailSpark))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        UInt32 count1 = (UInt32)((m_AdId != null) ? 1 : 0);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdId, Schema.AdId_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_UINT64);
                if (count1 != 0)
                {
                        writer.WriteUInt64(m_AdId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdId, Schema.AdId_meta);
        }

        UInt32 count2 = (UInt32)((m_OrderItemId != null) ? 1 : 0);
        if (writeAllFields || count2 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OrderItemId, Schema.OrderItemId_meta);
                writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_UINT64);
                if (count2 != 0)
                {
                        writer.WriteUInt64(m_OrderItemId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.OrderItemId, Schema.OrderItemId_meta);
        }

        UInt32 count3 = (UInt32)((m_SearchClick != null) ? 1 : 0);
        if (writeAllFields || count3 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SearchClick, Schema.SearchClick_meta);
                writer.WriteContainerBegin(count3, global::Microsoft.Bond.BondDataType.BT_LIST);
                if (count3 != 0)
                {
                        UInt32 count5 = (m_SearchClick == null ? 0 : (UInt32)m_SearchClick.Count);
                    writer.WriteContainerBegin(count5, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    for (int idx4 = 0; idx4 < count5; idx4++)
                    {
                            m_SearchClick[idx4].Write(writer, true);
                    }
                    writer.WriteContainerEnd();
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.SearchClick, Schema.SearchClick_meta);
        }

        UInt32 count6 = (UInt32)((m_DisplayClick != null) ? 1 : 0);
        if (writeAllFields || count6 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DisplayClick, Schema.DisplayClick_meta);
                writer.WriteContainerBegin(count6, global::Microsoft.Bond.BondDataType.BT_LIST);
                if (count6 != 0)
                {
                        UInt32 count8 = (m_DisplayClick == null ? 0 : (UInt32)m_DisplayClick.Count);
                    writer.WriteContainerBegin(count8, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    for (int idx7 = 0; idx7 < count8; idx7++)
                    {
                            m_DisplayClick[idx7].Write(writer, true);
                    }
                    writer.WriteContainerEnd();
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DisplayClick, Schema.DisplayClick_meta);
        }

        UInt32 count9 = (UInt32)((m_DisplayImpression != null) ? 1 : 0);
        if (writeAllFields || count9 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DisplayImpression, Schema.DisplayImpression_meta);
                writer.WriteContainerBegin(count9, global::Microsoft.Bond.BondDataType.BT_LIST);
                if (count9 != 0)
                {
                        UInt32 count11 = (m_DisplayImpression == null ? 0 : (UInt32)m_DisplayImpression.Count);
                    writer.WriteContainerBegin(count11, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    for (int idx10 = 0; idx10 < count11; idx10++)
                    {
                            m_DisplayImpression[idx10].Write(writer, true);
                    }
                    writer.WriteContainerEnd();
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DisplayImpression, Schema.DisplayImpression_meta);
        }

        UInt32 count12 = (UInt32)((m_CustomerId != null) ? 1 : 0);
        if (writeAllFields || count12 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CustomerId, Schema.CustomerId_meta);
                writer.WriteContainerBegin(count12, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count12 != 0)
                {
                        writer.WriteInt32(m_CustomerId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CustomerId, Schema.CustomerId_meta);
        }

        UInt32 count13 = (UInt32)((m_AdvertiserAccountId != null) ? 1 : 0);
        if (writeAllFields || count13 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdvertiserAccountId, Schema.AdvertiserAccountId_meta);
                writer.WriteContainerBegin(count13, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count13 != 0)
                {
                        writer.WriteInt32(m_AdvertiserAccountId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdvertiserAccountId, Schema.AdvertiserAccountId_meta);
        }

        UInt32 count14 = (UInt32)((m_AdUnitID != null) ? 1 : 0);
        if (writeAllFields || count14 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdUnitID, Schema.AdUnitID_meta);
                writer.WriteContainerBegin(count14, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count14 != 0)
                {
                        writer.WriteInt32(m_AdUnitID.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdUnitID, Schema.AdUnitID_meta);
        }

        UInt32 count15 = (UInt32)((m_UTCOffset != null) ? 1 : 0);
        if (writeAllFields || count15 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.UTCOffset, Schema.UTCOffset_meta);
                writer.WriteContainerBegin(count15, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count15 != 0)
                {
                        writer.WriteInt32(m_UTCOffset.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.UTCOffset, Schema.UTCOffset_meta);
        }

        UInt32 count16 = (UInt32)((m_DeliveredLocationId != null) ? 1 : 0);
        if (writeAllFields || count16 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DeliveredLocationId, Schema.DeliveredLocationId_meta);
                writer.WriteContainerBegin(count16, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count16 != 0)
                {
                        writer.WriteInt32(m_DeliveredLocationId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DeliveredLocationId, Schema.DeliveredLocationId_meta);
        }

        UInt32 count17 = (UInt32)((m_AdvertiserId != null) ? 1 : 0);
        if (writeAllFields || count17 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdvertiserId, Schema.AdvertiserId_meta);
                writer.WriteContainerBegin(count17, global::Microsoft.Bond.BondDataType.BT_INT32);
                if (count17 != 0)
                {
                        writer.WriteInt32(m_AdvertiserId.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.AdvertiserId, Schema.AdvertiserId_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="AdId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="OrderItemId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="SearchClick";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.element = global::SparkSchema.SearchClickSpark.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 4;
        field.metadata.name="DisplayClick";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.element = global::SparkSchema.DisplayClickSpark.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 5;
        field.metadata.name="DisplayImpression";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.element = global::SparkSchema.DisplayImpressionSpark.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 6;
        field.metadata.name="CustomerId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 7;
        field.metadata.name="AdvertiserAccountId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 8;
        field.metadata.name="AdUnitID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 9;
        field.metadata.name="UTCOffset";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="DeliveredLocationId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 11;
        field.metadata.name="AdvertiserId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        UserAdActivityDetailSpark that = obj as UserAdActivityDetailSpark;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(UserAdActivityDetailSpark other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(UserAdActivityDetailSpark that)
    {
        bool equals = true;
        
        equals = equals && ((this.AdId == null) == (that.AdId == null));
        if (equals && !(this.AdId == null))
        {
            equals = equals && ((this.AdId.Value == that.AdId.Value));
        }
        equals = equals && ((this.OrderItemId == null) == (that.OrderItemId == null));
        if (equals && !(this.OrderItemId == null))
        {
            equals = equals && ((this.OrderItemId.Value == that.OrderItemId.Value));
        }
        equals = equals && ((this.SearchClick == null) == (that.SearchClick == null));
        equals = equals && ((this.DisplayClick == null) == (that.DisplayClick == null));
        equals = equals && ((this.DisplayImpression == null) == (that.DisplayImpression == null));
        equals = equals && ((this.CustomerId == null) == (that.CustomerId == null));
        if (equals && !(this.CustomerId == null))
        {
            equals = equals && ((this.CustomerId.Value == that.CustomerId.Value));
        }
        equals = equals && ((this.AdvertiserAccountId == null) == (that.AdvertiserAccountId == null));
        if (equals && !(this.AdvertiserAccountId == null))
        {
            equals = equals && ((this.AdvertiserAccountId.Value == that.AdvertiserAccountId.Value));
        }
        equals = equals && ((this.AdUnitID == null) == (that.AdUnitID == null));
        if (equals && !(this.AdUnitID == null))
        {
            equals = equals && ((this.AdUnitID.Value == that.AdUnitID.Value));
        }
        equals = equals && ((this.UTCOffset == null) == (that.UTCOffset == null));
        if (equals && !(this.UTCOffset == null))
        {
            equals = equals && ((this.UTCOffset.Value == that.UTCOffset.Value));
        }
        equals = equals && ((this.DeliveredLocationId == null) == (that.DeliveredLocationId == null));
        if (equals && !(this.DeliveredLocationId == null))
        {
            equals = equals && ((this.DeliveredLocationId.Value == that.DeliveredLocationId.Value));
        }
        equals = equals && ((this.AdvertiserId == null) == (that.AdvertiserId == null));
        if (equals && !(this.AdvertiserId == null))
        {
            equals = equals && ((this.AdvertiserId.Value == that.AdvertiserId.Value));
        }
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(UserAdActivityDetailSpark that)
    {
        bool equals = true;
        
        equals = equals && ((this.SearchClick == null) == (that.SearchClick == null));
        if (equals && !(this.SearchClick == null))
        {
            if (equals && this.SearchClick != null && this.SearchClick.Count != 0)
            {
                var enum_1_1 = this.SearchClick.GetEnumerator();
                var enum_2_2 = that.SearchClick.GetEnumerator();
                while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
                {
                        equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                    equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                    if (!equals)
                    {
                        break;
                    }
                }
            }
        }
        equals = equals && ((this.DisplayClick == null) == (that.DisplayClick == null));
        if (equals && !(this.DisplayClick == null))
        {
            if (equals && this.DisplayClick != null && this.DisplayClick.Count != 0)
            {
                var enum_1_3 = this.DisplayClick.GetEnumerator();
                var enum_2_4 = that.DisplayClick.GetEnumerator();
                while (enum_1_3.MoveNext() && enum_2_4.MoveNext())
                {
                        equals = equals && ((enum_1_3.Current == null) == (enum_2_4.Current == null));
                    equals = equals && (enum_1_3.Current == null ? true : enum_1_3.Current.MemberwiseCompare(enum_2_4.Current));
                    if (!equals)
                    {
                        break;
                    }
                }
            }
        }
        equals = equals && ((this.DisplayImpression == null) == (that.DisplayImpression == null));
        if (equals && !(this.DisplayImpression == null))
        {
            if (equals && this.DisplayImpression != null && this.DisplayImpression.Count != 0)
            {
                var enum_1_5 = this.DisplayImpression.GetEnumerator();
                var enum_2_6 = that.DisplayImpression.GetEnumerator();
                while (enum_1_5.MoveNext() && enum_2_6.MoveNext())
                {
                        equals = equals && ((enum_1_5.Current == null) == (enum_2_6.Current == null));
                    equals = equals && (enum_1_5.Current == null ? true : enum_1_5.Current.MemberwiseCompare(enum_2_6.Current));
                    if (!equals)
                    {
                        break;
                    }
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_AdId, this.AdId, separator);
        sb.AppendFormat(format, __internal.s_OrderItemId, this.OrderItemId, separator);
        sb.AppendFormat(format, __internal.s_SearchClick, this.SearchClick, separator);
        sb.AppendFormat(format, __internal.s_DisplayClick, this.DisplayClick, separator);
        sb.AppendFormat(format, __internal.s_DisplayImpression, this.DisplayImpression, separator);
        sb.AppendFormat(format, __internal.s_CustomerId, this.CustomerId, separator);
        sb.AppendFormat(format, __internal.s_AdvertiserAccountId, this.AdvertiserAccountId, separator);
        sb.AppendFormat(format, __internal.s_AdUnitID, this.AdUnitID, separator);
        sb.AppendFormat(format, __internal.s_UTCOffset, this.UTCOffset, separator);
        sb.AppendFormat(format, __internal.s_DeliveredLocationId, this.DeliveredLocationId, separator);
        sb.AppendFormat(format, __internal.s_AdvertiserId, this.AdvertiserId, separator);
        
        return sb.ToString();
    } // ToString()

}; // class UserAdActivityDetailSpark
} // namespace SparkSchema
